{
	"compiler": {
		"version": "0.5.16+commit.9c3226ce"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"devdoc": {
			"details": "Contract module that helps prevent reentrant calls to a function. * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier available, which can be aplied to functions to make sure there are no nested (reentrant) calls to them. * Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them.",
			"methods": {}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/StakingRewardsFactory_flattened.sol": "ReentrancyGuard"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/StakingRewardsFactory_flattened.sol": {
			"keccak256": "0x70b00558254c10da5acfe4ae00c620cce247fde66de6883cb9d519951e10d3a9",
			"urls": [
				"bzz-raw://19dfab2ae343c0c0b6a57e5e612703ad7c69fc1be041cf6e6b25f13cba89752f",
				"dweb:/ipfs/QmcV5yqxojZbEyc4FqDtZzPENjpaK6PiNhrDBjSbfmExhX"
			]
		}
	},
	"version": 1
}