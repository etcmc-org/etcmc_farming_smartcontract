{
	"id": "c7723e5166cf37a51ad8e26f5b1bd9c1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.5.16",
	"solcLongVersion": "0.5.16+commit.9c3226ce",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/StakingRewards.sol": {
				"content": "pragma solidity 0.5.16;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n// Inheritance\nimport \"./interfaces/IStakingRewards.sol\";\nimport \"./RewardsDistributionRecipient.sol\";\n\ncontract StakingRewards is\n    IStakingRewards,\n    RewardsDistributionRecipient,\n    ReentrancyGuard\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n\n    IERC20 public rewardsToken;\n    IERC20 public stakingToken;\n    uint256 public periodFinish = 0;\n    uint256 public rewardRate = 0;\n    uint256 public rewardsDuration = 0 days;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _rewardsDistribution,\n        address _rewardsToken,\n        uint256 _rewardsDuration, // Parameter in days\n        address _stakingToken\n    ) public {\n        rewardsToken = IERC20(_rewardsToken);\n        stakingToken = IERC20(_stakingToken);\n        rewardsDuration = _rewardsDuration * 1 days; // Conversion to seconds\n        rewardsDistribution = _rewardsDistribution;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored.add(\n                lastTimeRewardApplicable()\n                    .sub(lastUpdateTime)\n                    .mul(rewardRate)\n                    .mul(1e18)\n                    .div(_totalSupply)\n            );\n    }\n\n    function earned(address account) public view returns (uint256) {\n        return\n            _balances[account]\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\n                .div(1e18)\n                .add(rewards[account]);\n    }\n\n    function getRewardForDuration() external view returns (uint256) {\n        return rewardRate.mul(rewardsDuration);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function stakeWithPermit(\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot stake 0\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n\n        // permit\n        IUniswapV2ERC20(address(stakingToken)).permit(\n            msg.sender,\n            address(this),\n            amount,\n            deadline,\n            v,\n            r,\n            s\n        );\n\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    function stake(uint256 amount)\n        external\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        require(amount > 0, \"Cannot stake 0\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount)\n        public\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        require(amount > 0, \"Cannot withdraw 0\");\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    function getReward() public nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            rewardsToken.safeTransfer(msg.sender, reward);\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    function exit() external {\n        withdraw(_balances[msg.sender]);\n        getReward();\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function notifyRewardAmount(uint256 reward)\n        external\n        onlyRewardsDistribution\n        updateReward(address(0))\n    {\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward.div(rewardsDuration);\n        } else {\n            uint256 remaining = periodFinish.sub(block.timestamp);\n            uint256 leftover = remaining.mul(rewardRate);\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n        }\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n        // This keeps the reward rate in the right range, preventing overflows due to\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n        uint256 balance = rewardsToken.balanceOf(address(this));\n        require(\n            rewardRate <= balance.div(rewardsDuration),\n            \"Provided reward too high\"\n        );\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(rewardsDuration);\n        emit RewardAdded(reward);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n}\n\ninterface IUniswapV2ERC20 {\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
			},
			"contracts/RewardsDistributionRecipient.sol": {
				"content": "pragma solidity 0.5.16;\n\ncontract RewardsDistributionRecipient {\n    address public rewardsDistribution;\n\n    function notifyRewardAmount(uint256 reward) external;\n\n    modifier onlyRewardsDistribution() {\n        require(\n            msg.sender == rewardsDistribution,\n            \"Caller is not RewardsDistribution contract\"\n        );\n        _;\n    }\n}\n"
			},
			"contracts/interfaces/IStakingRewards.sol": {
				"content": "pragma solidity >=0.4.24;\n\ninterface IStakingRewards {\n    // Views\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function getRewardForDuration() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    // Mutative\n\n    function stake(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function getReward() external;\n\n    function exit() external;\n}\n"
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\n * available, which can be aplied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
				"content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol": {
				"content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * > Note that this information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * `IERC20.balanceOf` and `IERC20.transfer`.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n"
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n"
			},
			"@openzeppelin/contracts/math/Math.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Collection of functions related to the address type,\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/math/Math.sol\":99:767  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/math/Math.sol\":99:767  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a72315820b6b88e150c4f19d736d2319ae75704b7617741cd3870350d29e7fe05c41b056c64736f6c63430005100032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820b6b88e150c4f19d736d2319ae75704b7617741cd3870350d29e7fe05c41b056c64736f6c63430005100032",
							"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xB6 0xB8 DUP15 ISZERO 0xC 0x4F NOT 0xD7 CALLDATASIZE 0xD2 BALANCE SWAP11 0xE7 JUMPI DIV 0xB7 PUSH2 0x7741 0xCD CODESIZE PUSH17 0x350D29E7FE05C41B056C64736F6C634300 SDIV LT STOP ORIGIN ",
							"sourceMap": "99:668:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820b6b88e150c4f19d736d2319ae75704b7617741cd3870350d29e7fe05c41b056c64736f6c63430005100032",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xB6 0xB8 DUP15 ISZERO 0xC 0x4F NOT 0xD7 CALLDATASIZE 0xD2 BALANCE SWAP11 0xE7 JUMPI DIV 0xB7 PUSH2 0x7741 0xCD CODESIZE PUSH17 0x350D29E7FE05C41B056C64736F6C634300 SDIV LT STOP ORIGIN ",
							"sourceMap": "99:668:0:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "94",
								"totalCost": "17094"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 99,
									"end": 767,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 99,
									"end": 767,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a72315820b6b88e150c4f19d736d2319ae75704b7617741cd3870350d29e7fe05c41b056c64736f6c63430005100032",
									".code": [
										{
											"begin": 99,
											"end": 767,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 99,
											"end": 767,
											"name": "ADDRESS"
										},
										{
											"begin": 99,
											"end": 767,
											"name": "EQ"
										},
										{
											"begin": 99,
											"end": 767,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 99,
											"end": 767,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 99,
											"end": 767,
											"name": "MSTORE"
										},
										{
											"begin": 99,
											"end": 767,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 99,
											"end": 767,
											"name": "DUP1"
										},
										{
											"begin": 99,
											"end": 767,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/math/Math.sol\":\"Math\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"keccak256\":\"0x4b5aa451e4e8801478708f94b118a7821c0500d676255eaf89fc78c14856ce4e\",\"urls\":[\"bzz-raw://bed15b3f35ed05505efc8fb5cb01d06c52230fbcaadf4ed24a85b1ac2f15f33c\",\"dweb:/ipfs/QmS6tW81u8E4tvzVfVuqEuMCkdwAozQ6pKJPRBR4JEVmQp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/math/SafeMath.sol\":589:3528  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":589:3528  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a72315820fb09d1a8991e029289838620e19dbafa61f3dc3db3f9be270c47fdc3d0f43a2164736f6c63430005100032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820fb09d1a8991e029289838620e19dbafa61f3dc3db3f9be270c47fdc3d0f43a2164736f6c63430005100032",
							"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xFB MULMOD 0xD1 0xA8 SWAP10 0x1E MUL SWAP3 DUP10 DUP4 DUP7 KECCAK256 0xE1 SWAP14 0xBA STATICCALL PUSH2 0xF3DC RETURNDATASIZE 0xB3 0xF9 0xBE 0x27 0xC SELFBALANCE REVERT 0xC3 0xD0 DELEGATECALL GASPRICE 0x21 PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
							"sourceMap": "589:2939:1:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820fb09d1a8991e029289838620e19dbafa61f3dc3db3f9be270c47fdc3d0f43a2164736f6c63430005100032",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xFB MULMOD 0xD1 0xA8 SWAP10 0x1E MUL SWAP3 DUP10 DUP4 DUP7 KECCAK256 0xE1 SWAP14 0xBA STATICCALL PUSH2 0xF3DC RETURNDATASIZE 0xB3 0xF9 0xBE 0x27 0xC SELFBALANCE REVERT 0xC3 0xD0 DELEGATECALL GASPRICE 0x21 PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
							"sourceMap": "589:2939:1:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "94",
								"totalCost": "17094"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 589,
									"end": 3528,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 589,
									"end": 3528,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a72315820fb09d1a8991e029289838620e19dbafa61f3dc3db3f9be270c47fdc3d0f43a2164736f6c63430005100032",
									".code": [
										{
											"begin": 589,
											"end": 3528,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "ADDRESS"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "EQ"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "MSTORE"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "DUP1"
										},
										{
											"begin": 589,
											"end": 3528,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xd1804d04fb39689453f673601429a99a0c68c422a981fc338773df9a59180fe9\",\"urls\":[\"bzz-raw://1b9307920e0378d58c6677f8952ad090a9ecb30e878835e301a0d18386a870c1\",\"dweb:/ipfs/QmYYixTDVF4FXqFpYzEcufAwEY9BFBJ33Ew9ncsGvD7btC\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol": {
				"ERC20Detailed": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								},
								{
									"internalType": "uint8",
									"name": "decimals",
									"type": "uint8"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Optional functions from the ERC20 standard.",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom`. This is zero by default.     * This value changes when `approve` or `transferFrom` are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * > Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an `Approval` event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"constructor": {
								"details": "Sets the values for `name`, `symbol`, and `decimals`. All three of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.     * > Note that this information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including `IERC20.balanceOf` and `IERC20.transfer`."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event."
							}
						}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Optional functions from the ERC20 standard.\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom`. This is zero by default.     * This value changes when `approve` or `transferFrom` are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * > Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an `Approval` event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"constructor\":{\"details\":\"Sets the values for `name`, `symbol`, and `decimals`. All three of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.     * > Note that this information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including `IERC20.balanceOf` and `IERC20.transfer`.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\":\"ERC20Detailed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\":{\"keccak256\":\"0xc61b3603089b09a730d8ca72e9133a496cc4405da40e9b87c12f073245d774bf\",\"urls\":[\"bzz-raw://de8bb0003d53de236913f0e0102e7a9d015e02098f2495edd000f207fe2be2f4\",\"dweb:/ipfs/QmbtwNwAJEehWWL7yGGyyMoenQvcqtz91pqLgQPpLRoLYC\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x90e8c2521653bbb1768b05889c5760031e688d9cd361f167489b89215e201b95\",\"urls\":[\"bzz-raw://d0abb99bb8bfc2bc0a89902b8ed1dc0442ad08cc78cee64c291b3df6a27bcccc\",\"dweb:/ipfs/QmP5NaEwZthQeM2ESz4WTT3osrP7jhbvu7ocbttBi2JAw6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 208,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol:ERC20Detailed",
								"label": "_name",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 210,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol:ERC20Detailed",
								"label": "_symbol",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 212,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol:ERC20Detailed",
								"label": "_decimals",
								"offset": 0,
								"slot": "2",
								"type": "t_uint8"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP. Does not include the optional functions; to access them see `ERC20Detailed`.",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom`. This is zero by default.     * This value changes when `approve` or `transferFrom` are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * > Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an `Approval` event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event."
							}
						}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP. Does not include the optional functions; to access them see `ERC20Detailed`.\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom`. This is zero by default.     * This value changes when `approve` or `transferFrom` are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * > Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an `Approval` event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x90e8c2521653bbb1768b05889c5760031e688d9cd361f167489b89215e201b95\",\"urls\":[\"bzz-raw://d0abb99bb8bfc2bc0a89902b8ed1dc0442ad08cc78cee64c291b3df6a27bcccc\",\"dweb:/ipfs/QmP5NaEwZthQeM2ESz4WTT3osrP7jhbvu7ocbttBi2JAw6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"methods": {},
						"title": "SafeERC20"
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":574:3718  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":574:3718  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a7231582024c968344c8dfb685be27e186a72d8be2f86bdecd8e757bf931cd09c391450cd64736f6c63430005100032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7231582024c968344c8dfb685be27e186a72d8be2f86bdecd8e757bf931cd09c391450cd64736f6c63430005100032",
							"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0x24 0xC9 PUSH9 0x344C8DFB685BE27E18 PUSH11 0x72D8BE2F86BDECD8E757BF SWAP4 SHR 0xD0 SWAP13 CODECOPY EQ POP 0xCD PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
							"sourceMap": "574:3144:4:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7231582024c968344c8dfb685be27e186a72d8be2f86bdecd8e757bf931cd09c391450cd64736f6c63430005100032",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0x24 0xC9 PUSH9 0x344C8DFB685BE27E18 PUSH11 0x72D8BE2F86BDECD8E757BF SWAP4 SHR 0xD0 SWAP13 CODECOPY EQ POP 0xCD PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
							"sourceMap": "574:3144:4:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "94",
								"totalCost": "17094"
							},
							"internal": {
								"callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 574,
									"end": 3718,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 574,
									"end": 3718,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a7231582024c968344c8dfb685be27e186a72d8be2f86bdecd8e757bf931cd09c391450cd64736f6c63430005100032",
									".code": [
										{
											"begin": 574,
											"end": 3718,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 574,
											"end": 3718,
											"name": "ADDRESS"
										},
										{
											"begin": 574,
											"end": 3718,
											"name": "EQ"
										},
										{
											"begin": 574,
											"end": 3718,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 574,
											"end": 3718,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 574,
											"end": 3718,
											"name": "MSTORE"
										},
										{
											"begin": 574,
											"end": 3718,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 574,
											"end": 3718,
											"name": "DUP1"
										},
										{
											"begin": 574,
											"end": 3718,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"methods\":{},\"title\":\"SafeERC20\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xd1804d04fb39689453f673601429a99a0c68c422a981fc338773df9a59180fe9\",\"urls\":[\"bzz-raw://1b9307920e0378d58c6677f8952ad090a9ecb30e878835e301a0d18386a870c1\",\"dweb:/ipfs/QmYYixTDVF4FXqFpYzEcufAwEY9BFBJ33Ew9ncsGvD7btC\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x90e8c2521653bbb1768b05889c5760031e688d9cd361f167489b89215e201b95\",\"urls\":[\"bzz-raw://d0abb99bb8bfc2bc0a89902b8ed1dc0442ad08cc78cee64c291b3df6a27bcccc\",\"dweb:/ipfs/QmP5NaEwZthQeM2ESz4WTT3osrP7jhbvu7ocbttBi2JAw6\"]},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0xf6f89424e17870561dc23c5933c55c5726b66a68d51ad2a2c00c569a5f02f507\",\"urls\":[\"bzz-raw://005657a7ffbf6d12726ac0167b55be965dc473d43f061b605f883a54cc00ab4f\",\"dweb:/ipfs/QmaBzyvDQyNnn6DXQYewEtN9Go85orikSnW9PwNWqUGPEX\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf3358e5819ca73357abd6c90bdfffd0474af54364897f6b3e3234c4b71fbe9a1\",\"urls\":[\"bzz-raw://75ae8d04454d1511a2ed986cc8585736f05c5c25280683b3d24712a9f414a4bf\",\"dweb:/ipfs/Qmb3kNCoBUZdah1AgBBD4zMk898j5Qw8ahT1w5cCMYp5Y3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type,",
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":94:957  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":94:957  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a723158209676d6b13b8555223cfb4b2986fb01261f20e232c95ea626c44f66946c9bc71064736f6c63430005100032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158209676d6b13b8555223cfb4b2986fb01261f20e232c95ea626c44f66946c9bc71064736f6c63430005100032",
							"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SWAP7 PUSH23 0xD6B13B8555223CFB4B2986FB01261F20E232C95EA626C4 0x4F PUSH7 0x946C9BC7106473 PUSH16 0x6C634300051000320000000000000000 ",
							"sourceMap": "94:863:5:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158209676d6b13b8555223cfb4b2986fb01261f20e232c95ea626c44f66946c9bc71064736f6c63430005100032",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SWAP7 PUSH23 0xD6B13B8555223CFB4B2986FB01261F20E232C95EA626C4 0x4F PUSH7 0x946C9BC7106473 PUSH16 0x6C634300051000320000000000000000 ",
							"sourceMap": "94:863:5:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "94",
								"totalCost": "17094"
							},
							"internal": {
								"isContract(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 94,
									"end": 957,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 94,
									"end": 957,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a723158209676d6b13b8555223cfb4b2986fb01261f20e232c95ea626c44f66946c9bc71064736f6c63430005100032",
									".code": [
										{
											"begin": 94,
											"end": 957,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "ADDRESS"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "EQ"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "MSTORE"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 957,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type,\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf3358e5819ca73357abd6c90bdfffd0474af54364897f6b3e3234c4b71fbe9a1\",\"urls\":[\"bzz-raw://75ae8d04454d1511a2ed986cc8585736f05c5c25280683b3d24712a9f414a4bf\",\"dweb:/ipfs/Qmb3kNCoBUZdah1AgBBD4zMk898j5Qw8ahT1w5cCMYp5Y3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						}
					],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier available, which can be aplied to functions to make sure there are no nested (reentrant) calls to them. * Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them.",
						"methods": {}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier available, which can be aplied to functions to make sure there are no nested (reentrant) calls to them. * Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x0441ff2b36d503f3a29d28d3754291f119064f4973d5c780698143d919037a78\",\"urls\":[\"bzz-raw://af27dd68d2371e68c8ed8cf297ec6d832bf906742d53367b70399ba918060cb7\",\"dweb:/ipfs/QmcMMjZceFepXgRrzSx577oWwt7SCSFzoqZiTF7tTxquF7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 570,
								"contract": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_guardCounter",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"contracts/RewardsDistributionRecipient.sol": {
				"RewardsDistributionRecipient": {
					"abi": [
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "reward",
									"type": "uint256"
								}
							],
							"name": "notifyRewardAmount",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "rewardsDistribution",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"notifyRewardAmount(uint256)": "3c6b16ab",
							"rewardsDistribution()": "3fc6df6e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/RewardsDistributionRecipient.sol\":\"RewardsDistributionRecipient\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RewardsDistributionRecipient.sol\":{\"keccak256\":\"0xbe4c2cf3665101e576fae0f7a26e174a0d80b71d27a7e3a36c230ff857209833\",\"urls\":[\"bzz-raw://655680f2d2e2aa7b2b6ef2a7680b2d81e26a36cdadb02765ded73d47a6bef29b\",\"dweb:/ipfs/QmQSgF4T313dNNnwqkiXvphQTYt93VZ9uMiYEEv2kiE8H5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 602,
								"contract": "contracts/RewardsDistributionRecipient.sol:RewardsDistributionRecipient",
								"label": "rewardsDistribution",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"contracts/StakingRewards.sol": {
				"IUniswapV2ERC20": {
					"abi": [
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/StakingRewards.sol\":\"IUniswapV2ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"keccak256\":\"0x4b5aa451e4e8801478708f94b118a7821c0500d676255eaf89fc78c14856ce4e\",\"urls\":[\"bzz-raw://bed15b3f35ed05505efc8fb5cb01d06c52230fbcaadf4ed24a85b1ac2f15f33c\",\"dweb:/ipfs/QmS6tW81u8E4tvzVfVuqEuMCkdwAozQ6pKJPRBR4JEVmQp\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xd1804d04fb39689453f673601429a99a0c68c422a981fc338773df9a59180fe9\",\"urls\":[\"bzz-raw://1b9307920e0378d58c6677f8952ad090a9ecb30e878835e301a0d18386a870c1\",\"dweb:/ipfs/QmYYixTDVF4FXqFpYzEcufAwEY9BFBJ33Ew9ncsGvD7btC\"]},\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\":{\"keccak256\":\"0xc61b3603089b09a730d8ca72e9133a496cc4405da40e9b87c12f073245d774bf\",\"urls\":[\"bzz-raw://de8bb0003d53de236913f0e0102e7a9d015e02098f2495edd000f207fe2be2f4\",\"dweb:/ipfs/QmbtwNwAJEehWWL7yGGyyMoenQvcqtz91pqLgQPpLRoLYC\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x90e8c2521653bbb1768b05889c5760031e688d9cd361f167489b89215e201b95\",\"urls\":[\"bzz-raw://d0abb99bb8bfc2bc0a89902b8ed1dc0442ad08cc78cee64c291b3df6a27bcccc\",\"dweb:/ipfs/QmP5NaEwZthQeM2ESz4WTT3osrP7jhbvu7ocbttBi2JAw6\"]},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0xf6f89424e17870561dc23c5933c55c5726b66a68d51ad2a2c00c569a5f02f507\",\"urls\":[\"bzz-raw://005657a7ffbf6d12726ac0167b55be965dc473d43f061b605f883a54cc00ab4f\",\"dweb:/ipfs/QmaBzyvDQyNnn6DXQYewEtN9Go85orikSnW9PwNWqUGPEX\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf3358e5819ca73357abd6c90bdfffd0474af54364897f6b3e3234c4b71fbe9a1\",\"urls\":[\"bzz-raw://75ae8d04454d1511a2ed986cc8585736f05c5c25280683b3d24712a9f414a4bf\",\"dweb:/ipfs/Qmb3kNCoBUZdah1AgBBD4zMk898j5Qw8ahT1w5cCMYp5Y3\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x0441ff2b36d503f3a29d28d3754291f119064f4973d5c780698143d919037a78\",\"urls\":[\"bzz-raw://af27dd68d2371e68c8ed8cf297ec6d832bf906742d53367b70399ba918060cb7\",\"dweb:/ipfs/QmcMMjZceFepXgRrzSx577oWwt7SCSFzoqZiTF7tTxquF7\"]},\"contracts/RewardsDistributionRecipient.sol\":{\"keccak256\":\"0xbe4c2cf3665101e576fae0f7a26e174a0d80b71d27a7e3a36c230ff857209833\",\"urls\":[\"bzz-raw://655680f2d2e2aa7b2b6ef2a7680b2d81e26a36cdadb02765ded73d47a6bef29b\",\"dweb:/ipfs/QmQSgF4T313dNNnwqkiXvphQTYt93VZ9uMiYEEv2kiE8H5\"]},\"contracts/StakingRewards.sol\":{\"keccak256\":\"0xea59e1d29b8629d0479855bfce8b33b646d8da173ac99bc817ca63e7856e2014\",\"urls\":[\"bzz-raw://48c4a0b2c9281906fded535549a9e047fd539249a138844acadb032bb53bf2c1\",\"dweb:/ipfs/QmbKsm9spEEgLvHEuA9fus83M17NBym5919RTvxyiVX2kg\"]},\"contracts/interfaces/IStakingRewards.sol\":{\"keccak256\":\"0xc4ec3f2fa8a00b37bdd8f80a66c7c1361c67036772203dcb2e8a80ca75dc4466\",\"urls\":[\"bzz-raw://08aa33dba10e77c513cf90f2795f62bf448a915d5e02d645d6b84bf3391f371b\",\"dweb:/ipfs/QmdVYtb1x2V6zZqwJTMuZQ6HyLq8YMzsB5NkaEQnPibL3p\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				},
				"StakingRewards": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_rewardsDistribution",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_rewardsToken",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_rewardsDuration",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_stakingToken",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "reward",
									"type": "uint256"
								}
							],
							"name": "RewardAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "reward",
									"type": "uint256"
								}
							],
							"name": "RewardPaid",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Withdrawn",
							"type": "event"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "earned",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [],
							"name": "exit",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [],
							"name": "getReward",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "getRewardForDuration",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "lastTimeRewardApplicable",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "lastUpdateTime",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "reward",
									"type": "uint256"
								}
							],
							"name": "notifyRewardAmount",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "periodFinish",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "rewardPerToken",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "rewardPerTokenStored",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "rewardRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "rewards",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "rewardsDistribution",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "rewardsDuration",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "rewardsToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "stakeWithPermit",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "stakingToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "userRewardPerTokenPaid",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contracts/StakingRewards.sol\":414:6489  contract StakingRewards is... */\n  mstore(0x40, 0x80)\n    /* \"contracts/StakingRewards.sol\":730:731  0 */\n  0x00\n    /* \"contracts/StakingRewards.sol\":700:731  uint256 public periodFinish = 0 */\n  0x04\n  sstore\n    /* \"contracts/StakingRewards.sol\":765:766  0 */\n  0x00\n    /* \"contracts/StakingRewards.sol\":737:766  uint256 public rewardRate = 0 */\n  0x05\n  sstore\n    /* \"contracts/StakingRewards.sol\":805:811  0 days */\n  0x00\n    /* \"contracts/StakingRewards.sol\":772:811  uint256 public rewardsDuration = 0 days */\n  0x06\n  sstore\n    /* \"contracts/StakingRewards.sol\":1137:1546  constructor(... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/StakingRewards.sol\":1137:1546  constructor(... */\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n    /* \"--CODEGEN--\":13:16   */\n  0x80\n    /* \"--CODEGEN--\":8:11   */\n  dup2\n    /* \"--CODEGEN--\":5:17   */\n  lt\n    /* \"--CODEGEN--\":2:4   */\n  iszero\n  tag_2\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":2:4   */\ntag_2:\n    /* \"contracts/StakingRewards.sol\":1137:1546  constructor(... */\n  dup2\n  add\n  swap1\n  dup1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  pop\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":884:885  1 */\n  0x01\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":868:881  _guardCounter */\n  dup1\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":868:885  _guardCounter = 1 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/StakingRewards.sol\":1349:1362  _rewardsToken */\n  dup3\n    /* \"contracts/StakingRewards.sol\":1327:1339  rewardsToken */\n  0x02\n  0x00\n    /* \"contracts/StakingRewards.sol\":1327:1363  rewardsToken = IERC20(_rewardsToken) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/StakingRewards.sol\":1395:1408  _stakingToken */\n  dup1\n    /* \"contracts/StakingRewards.sol\":1373:1385  stakingToken */\n  0x03\n  0x00\n    /* \"contracts/StakingRewards.sol\":1373:1409  stakingToken = IERC20(_stakingToken) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/StakingRewards.sol\":1456:1462  1 days */\n  0x015180\n    /* \"contracts/StakingRewards.sol\":1437:1453  _rewardsDuration */\n  dup3\n    /* \"contracts/StakingRewards.sol\":1437:1462  _rewardsDuration * 1 days */\n  mul\n    /* \"contracts/StakingRewards.sol\":1419:1434  rewardsDuration */\n  0x06\n    /* \"contracts/StakingRewards.sol\":1419:1462  rewardsDuration = _rewardsDuration * 1 days */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/StakingRewards.sol\":1519:1539  _rewardsDistribution */\n  dup4\n    /* \"contracts/StakingRewards.sol\":1497:1516  rewardsDistribution */\n  0x00\n  dup1\n    /* \"contracts/StakingRewards.sol\":1497:1539  rewardsDistribution = _rewardsDistribution */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/StakingRewards.sol\":1137:1546  constructor(... */\n  pop\n  pop\n  pop\n  pop\n    /* \"contracts/StakingRewards.sol\":414:6489  contract StakingRewards is... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/StakingRewards.sol\":414:6489  contract StakingRewards is... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/StakingRewards.sol\":414:6489  contract StakingRewards is... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x7b0a47ee\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xcd3daf9d\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xcd3daf9d\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xd1af0c7d\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xdf136d65\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xe9fad8ee\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xebe2b12b\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xecd9ba82\n      eq\n      tag_24\n      jumpi\n      jump(tag_2)\n    tag_26:\n      dup1\n      0x7b0a47ee\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x80faa57d\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x8b876347\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xa694fc3a\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xc8f33c91\n      eq\n      tag_18\n      jumpi\n      jump(tag_2)\n    tag_25:\n      dup1\n      0x386a9525\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x386a9525\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x3c6b16ab\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x3d18b912\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x3fc6df6e\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x72f702f3\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_27:\n      dup1\n      0x8cc262\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x0700037d\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x1c1f78eb\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x2e1a7d4d\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/StakingRewards.sol\":2351:2610  function earned(address account) public view returns (uint256) {... */\n    tag_3:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_29\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_29:\n        /* \"contracts/StakingRewards.sol\":2351:2610  function earned(address account) public view returns (uint256) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_30\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":957:999  mapping(address => uint256) public rewards */\n    tag_4:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_32\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_32:\n        /* \"contracts/StakingRewards.sol\":957:999  mapping(address => uint256) public rewards */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_33\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":1591:1682  function totalSupply() external view returns (uint256) {... */\n    tag_5:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":2616:2735  function getRewardForDuration() external view returns (uint256) {... */\n    tag_6:\n      tag_36\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":3887:4266  function withdraw(uint256 amount)... */\n    tag_7:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_39\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_39:\n        /* \"contracts/StakingRewards.sol\":3887:4266  function withdraw(uint256 amount)... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_40\n      jump\t// in\n    tag_38:\n      stop\n        /* \"contracts/StakingRewards.sol\":772:811  uint256 public rewardsDuration = 0 days */\n    tag_8:\n      tag_41\n      tag_42\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":4732:5861  function notifyRewardAmount(uint256 reward)... */\n    tag_9:\n      tag_43\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_44\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_44:\n        /* \"contracts/StakingRewards.sol\":4732:5861  function notifyRewardAmount(uint256 reward)... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_45\n      jump\t// in\n    tag_43:\n      stop\n        /* \"contracts/StakingRewards.sol\":4272:4572  function getReward() public nonReentrant updateReward(msg.sender) {... */\n    tag_10:\n      tag_46\n      tag_47\n      jump\t// in\n    tag_46:\n      stop\n        /* \"contracts/RewardsDistributionRecipient.sol\":69:103  address public rewardsDistribution */\n    tag_11:\n      tag_48\n      tag_49\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":1688:1798  function balanceOf(address account) external view returns (uint256) {... */\n    tag_12:\n      tag_50\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_51\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_51:\n        /* \"contracts/StakingRewards.sol\":1688:1798  function balanceOf(address account) external view returns (uint256) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_52\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":668:694  IERC20 public stakingToken */\n    tag_13:\n      tag_53\n      tag_54\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":737:766  uint256 public rewardRate = 0 */\n    tag_14:\n      tag_55\n      tag_56\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":1804:1933  function lastTimeRewardApplicable() public view returns (uint256) {... */\n    tag_15:\n      tag_57\n      tag_58\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":894:951  mapping(address => uint256) public userRewardPerTokenPaid */\n    tag_16:\n      tag_59\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_60\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_60:\n        /* \"contracts/StakingRewards.sol\":894:951  mapping(address => uint256) public userRewardPerTokenPaid */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_61\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":3490:3881  function stake(uint256 amount)... */\n    tag_17:\n      tag_62\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_63\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_63:\n        /* \"contracts/StakingRewards.sol\":3490:3881  function stake(uint256 amount)... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_64\n      jump\t// in\n    tag_62:\n      stop\n        /* \"contracts/StakingRewards.sol\":817:846  uint256 public lastUpdateTime */\n    tag_18:\n      tag_65\n      tag_66\n      jump\t// in\n    tag_65:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":1939:2345  function rewardPerToken() public view returns (uint256) {... */\n    tag_19:\n      tag_67\n      tag_68\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":636:662  IERC20 public rewardsToken */\n    tag_20:\n      tag_69\n      tag_70\n      jump\t// in\n    tag_69:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":852:887  uint256 public rewardPerTokenStored */\n    tag_21:\n      tag_71\n      tag_72\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":4578:4672  function exit() external {... */\n    tag_22:\n      tag_73\n      tag_74\n      jump\t// in\n    tag_73:\n      stop\n        /* \"contracts/StakingRewards.sol\":700:731  uint256 public periodFinish = 0 */\n    tag_23:\n      tag_75\n      tag_76\n      jump\t// in\n    tag_75:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakingRewards.sol\":2793:3484  function stakeWithPermit(... */\n    tag_24:\n      tag_77\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:16   */\n      0xa0\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:17   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_78\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_78:\n        /* \"contracts/StakingRewards.sol\":2793:3484  function stakeWithPermit(... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_79\n      jump\t// in\n    tag_77:\n      stop\n        /* \"contracts/StakingRewards.sol\":2351:2610  function earned(address account) public view returns (uint256) {... */\n    tag_30:\n        /* \"contracts/StakingRewards.sol\":2405:2412  uint256 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":2443:2603  _balances[account]... */\n      tag_81\n        /* \"contracts/StakingRewards.sol\":2586:2593  rewards */\n      0x0a\n        /* \"contracts/StakingRewards.sol\":2586:2602  rewards[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":2594:2601  account */\n      dup5\n        /* \"contracts/StakingRewards.sol\":2586:2602  rewards[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/StakingRewards.sol\":2443:2564  _balances[account]... */\n      tag_82\n        /* \"contracts/StakingRewards.sol\":2559:2563  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/StakingRewards.sol\":2443:2537  _balances[account]... */\n      tag_83\n        /* \"contracts/StakingRewards.sol\":2483:2536  rewardPerToken().sub(userRewardPerTokenPaid[account]) */\n      tag_84\n        /* \"contracts/StakingRewards.sol\":2504:2526  userRewardPerTokenPaid */\n      0x09\n        /* \"contracts/StakingRewards.sol\":2504:2535  userRewardPerTokenPaid[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":2527:2534  account */\n      dup10\n        /* \"contracts/StakingRewards.sol\":2504:2535  userRewardPerTokenPaid[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/StakingRewards.sol\":2483:2499  rewardPerToken() */\n      tag_85\n        /* \"contracts/StakingRewards.sol\":2483:2497  rewardPerToken */\n      tag_68\n        /* \"contracts/StakingRewards.sol\":2483:2499  rewardPerToken() */\n      jump\t// in\n    tag_85:\n        /* \"contracts/StakingRewards.sol\":2483:2503  rewardPerToken().sub */\n      tag_86\n      swap1\n        /* \"contracts/StakingRewards.sol\":2483:2536  rewardPerToken().sub(userRewardPerTokenPaid[account]) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_84:\n        /* \"contracts/StakingRewards.sol\":2443:2452  _balances */\n      0x0c\n        /* \"contracts/StakingRewards.sol\":2443:2461  _balances[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":2453:2460  account */\n      dup10\n        /* \"contracts/StakingRewards.sol\":2443:2461  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/StakingRewards.sol\":2443:2482  _balances[account]... */\n      tag_87\n      swap1\n        /* \"contracts/StakingRewards.sol\":2443:2537  _balances[account]... */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_83:\n        /* \"contracts/StakingRewards.sol\":2443:2558  _balances[account]... */\n      tag_88\n      swap1\n        /* \"contracts/StakingRewards.sol\":2443:2564  _balances[account]... */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_82:\n        /* \"contracts/StakingRewards.sol\":2443:2585  _balances[account]... */\n      tag_89\n      swap1\n        /* \"contracts/StakingRewards.sol\":2443:2603  _balances[account]... */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_81:\n        /* \"contracts/StakingRewards.sol\":2424:2603  return... */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":2351:2610  function earned(address account) public view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":957:999  mapping(address => uint256) public rewards */\n    tag_33:\n      mstore(0x20, 0x0a)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":1591:1682  function totalSupply() external view returns (uint256) {... */\n    tag_35:\n        /* \"contracts/StakingRewards.sol\":1637:1644  uint256 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":1663:1675  _totalSupply */\n      sload(0x0b)\n        /* \"contracts/StakingRewards.sol\":1656:1675  return _totalSupply */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":1591:1682  function totalSupply() external view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":2616:2735  function getRewardForDuration() external view returns (uint256) {... */\n    tag_37:\n        /* \"contracts/StakingRewards.sol\":2671:2678  uint256 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":2697:2728  rewardRate.mul(rewardsDuration) */\n      tag_92\n        /* \"contracts/StakingRewards.sol\":2712:2727  rewardsDuration */\n      sload(0x06)\n        /* \"contracts/StakingRewards.sol\":2697:2707  rewardRate */\n      sload(0x05)\n        /* \"contracts/StakingRewards.sol\":2697:2711  rewardRate.mul */\n      tag_87\n      swap1\n        /* \"contracts/StakingRewards.sol\":2697:2728  rewardRate.mul(rewardsDuration) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_92:\n        /* \"contracts/StakingRewards.sol\":2690:2728  return rewardRate.mul(rewardsDuration) */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":2616:2735  function getRewardForDuration() external view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":3887:4266  function withdraw(uint256 amount)... */\n    tag_40:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1318:1319  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1301:1314  _guardCounter */\n      dup1\n      0x00\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1301:1319  _guardCounter += 1 */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1329:1349  uint256 localCounter */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1352:1365  _guardCounter */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1329:1365  uint256 localCounter = _guardCounter */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":3978:3988  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":5982:5998  rewardPerToken() */\n      tag_95\n        /* \"contracts/StakingRewards.sol\":5982:5996  rewardPerToken */\n      tag_68\n        /* \"contracts/StakingRewards.sol\":5982:5998  rewardPerToken() */\n      jump\t// in\n    tag_95:\n        /* \"contracts/StakingRewards.sol\":5959:5979  rewardPerTokenStored */\n      0x08\n        /* \"contracts/StakingRewards.sol\":5959:5998  rewardPerTokenStored = rewardPerToken() */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6025:6051  lastTimeRewardApplicable() */\n      tag_96\n        /* \"contracts/StakingRewards.sol\":6025:6049  lastTimeRewardApplicable */\n      tag_58\n        /* \"contracts/StakingRewards.sol\":6025:6051  lastTimeRewardApplicable() */\n      jump\t// in\n    tag_96:\n        /* \"contracts/StakingRewards.sol\":6008:6022  lastUpdateTime */\n      0x07\n        /* \"contracts/StakingRewards.sol\":6008:6051  lastUpdateTime = lastTimeRewardApplicable() */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6084:6085  0 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6065:6086  account != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakingRewards.sol\":6065:6072  account */\n      dup2\n        /* \"contracts/StakingRewards.sol\":6065:6086  account != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/StakingRewards.sol\":6061:6215  if (account != address(0)) {... */\n      tag_97\n      jumpi\n        /* \"contracts/StakingRewards.sol\":6121:6136  earned(account) */\n      tag_98\n        /* \"contracts/StakingRewards.sol\":6128:6135  account */\n      dup2\n        /* \"contracts/StakingRewards.sol\":6121:6127  earned */\n      tag_30\n        /* \"contracts/StakingRewards.sol\":6121:6136  earned(account) */\n      jump\t// in\n    tag_98:\n        /* \"contracts/StakingRewards.sol\":6102:6109  rewards */\n      0x0a\n        /* \"contracts/StakingRewards.sol\":6102:6118  rewards[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6110:6117  account */\n      dup4\n        /* \"contracts/StakingRewards.sol\":6102:6118  rewards[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":6102:6136  rewards[account] = earned(account) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6184:6204  rewardPerTokenStored */\n      sload(0x08)\n        /* \"contracts/StakingRewards.sol\":6150:6172  userRewardPerTokenPaid */\n      0x09\n        /* \"contracts/StakingRewards.sol\":6150:6181  userRewardPerTokenPaid[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6173:6180  account */\n      dup4\n        /* \"contracts/StakingRewards.sol\":6150:6181  userRewardPerTokenPaid[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":6150:6204  userRewardPerTokenPaid[account] = rewardPerTokenStored */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6061:6215  if (account != address(0)) {... */\n    tag_97:\n        /* \"contracts/StakingRewards.sol\":4021:4022  0 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":4012:4018  amount */\n      dup4\n        /* \"contracts/StakingRewards.sol\":4012:4022  amount > 0 */\n      gt\n        /* \"contracts/StakingRewards.sol\":4004:4044  require(amount > 0, \"Cannot withdraw 0\") */\n      tag_100\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x11\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x43616e6e6f742077697468647261772030000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_100:\n        /* \"contracts/StakingRewards.sol\":4069:4093  _totalSupply.sub(amount) */\n      tag_101\n        /* \"contracts/StakingRewards.sol\":4086:4092  amount */\n      dup4\n        /* \"contracts/StakingRewards.sol\":4069:4081  _totalSupply */\n      sload(0x0b)\n        /* \"contracts/StakingRewards.sol\":4069:4085  _totalSupply.sub */\n      tag_86\n      swap1\n        /* \"contracts/StakingRewards.sol\":4069:4093  _totalSupply.sub(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_101:\n        /* \"contracts/StakingRewards.sol\":4054:4066  _totalSupply */\n      0x0b\n        /* \"contracts/StakingRewards.sol\":4054:4093  _totalSupply = _totalSupply.sub(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":4127:4160  _balances[msg.sender].sub(amount) */\n      tag_102\n        /* \"contracts/StakingRewards.sol\":4153:4159  amount */\n      dup4\n        /* \"contracts/StakingRewards.sol\":4127:4136  _balances */\n      0x0c\n        /* \"contracts/StakingRewards.sol\":4127:4148  _balances[msg.sender] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":4137:4147  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":4127:4148  _balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/StakingRewards.sol\":4127:4152  _balances[msg.sender].sub */\n      tag_86\n      swap1\n        /* \"contracts/StakingRewards.sol\":4127:4160  _balances[msg.sender].sub(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_102:\n        /* \"contracts/StakingRewards.sol\":4103:4112  _balances */\n      0x0c\n        /* \"contracts/StakingRewards.sol\":4103:4124  _balances[msg.sender] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":4113:4123  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":4103:4124  _balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":4103:4160  _balances[msg.sender] = _balances[msg.sender].sub(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":4170:4215  stakingToken.safeTransfer(msg.sender, amount) */\n      tag_103\n        /* \"contracts/StakingRewards.sol\":4196:4206  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":4208:4214  amount */\n      dup5\n        /* \"contracts/StakingRewards.sol\":4170:4182  stakingToken */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakingRewards.sol\":4170:4195  stakingToken.safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_104\n      swap1\n        /* \"contracts/StakingRewards.sol\":4170:4215  stakingToken.safeTransfer(msg.sender, amount) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_103:\n        /* \"contracts/StakingRewards.sol\":4240:4250  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":4230:4259  Withdrawn(msg.sender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5\n        /* \"contracts/StakingRewards.sol\":4252:4258  amount */\n      dup5\n        /* \"contracts/StakingRewards.sol\":4230:4259  Withdrawn(msg.sender, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1375:1376  _ */\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1410:1423  _guardCounter */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1394:1406  localCounter */\n      dup2\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1394:1423  localCounter == _guardCounter */\n      eq\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1386:1459  require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\") */\n      tag_105\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_105:\n        /* \"contracts/StakingRewards.sol\":3887:4266  function withdraw(uint256 amount)... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":772:811  uint256 public rewardsDuration = 0 days */\n    tag_42:\n      sload(0x06)\n      dup2\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":4732:5861  function notifyRewardAmount(uint256 reward)... */\n    tag_45:\n        /* \"contracts/RewardsDistributionRecipient.sol\":249:268  rewardsDistribution */\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/RewardsDistributionRecipient.sol\":235:268  msg.sender == rewardsDistribution */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/RewardsDistributionRecipient.sol\":235:245  msg.sender */\n      caller\n        /* \"contracts/RewardsDistributionRecipient.sol\":235:268  msg.sender == rewardsDistribution */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/RewardsDistributionRecipient.sol\":214:336  require(... */\n      tag_107\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_d50b095422f4cbfcb4c90fbd4d55aaf0967bf1d90e94bb6a1ae9fc4ee7e733de\n      0x2a\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_107:\n        /* \"contracts/StakingRewards.sol\":4854:4855  0 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":5982:5998  rewardPerToken() */\n      tag_109\n        /* \"contracts/StakingRewards.sol\":5982:5996  rewardPerToken */\n      tag_68\n        /* \"contracts/StakingRewards.sol\":5982:5998  rewardPerToken() */\n      jump\t// in\n    tag_109:\n        /* \"contracts/StakingRewards.sol\":5959:5979  rewardPerTokenStored */\n      0x08\n        /* \"contracts/StakingRewards.sol\":5959:5998  rewardPerTokenStored = rewardPerToken() */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6025:6051  lastTimeRewardApplicable() */\n      tag_110\n        /* \"contracts/StakingRewards.sol\":6025:6049  lastTimeRewardApplicable */\n      tag_58\n        /* \"contracts/StakingRewards.sol\":6025:6051  lastTimeRewardApplicable() */\n      jump\t// in\n    tag_110:\n        /* \"contracts/StakingRewards.sol\":6008:6022  lastUpdateTime */\n      0x07\n        /* \"contracts/StakingRewards.sol\":6008:6051  lastUpdateTime = lastTimeRewardApplicable() */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6084:6085  0 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6065:6086  account != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakingRewards.sol\":6065:6072  account */\n      dup2\n        /* \"contracts/StakingRewards.sol\":6065:6086  account != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/StakingRewards.sol\":6061:6215  if (account != address(0)) {... */\n      tag_111\n      jumpi\n        /* \"contracts/StakingRewards.sol\":6121:6136  earned(account) */\n      tag_112\n        /* \"contracts/StakingRewards.sol\":6128:6135  account */\n      dup2\n        /* \"contracts/StakingRewards.sol\":6121:6127  earned */\n      tag_30\n        /* \"contracts/StakingRewards.sol\":6121:6136  earned(account) */\n      jump\t// in\n    tag_112:\n        /* \"contracts/StakingRewards.sol\":6102:6109  rewards */\n      0x0a\n        /* \"contracts/StakingRewards.sol\":6102:6118  rewards[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6110:6117  account */\n      dup4\n        /* \"contracts/StakingRewards.sol\":6102:6118  rewards[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":6102:6136  rewards[account] = earned(account) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6184:6204  rewardPerTokenStored */\n      sload(0x08)\n        /* \"contracts/StakingRewards.sol\":6150:6172  userRewardPerTokenPaid */\n      0x09\n        /* \"contracts/StakingRewards.sol\":6150:6181  userRewardPerTokenPaid[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6173:6180  account */\n      dup4\n        /* \"contracts/StakingRewards.sol\":6150:6181  userRewardPerTokenPaid[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":6150:6204  userRewardPerTokenPaid[account] = rewardPerTokenStored */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6061:6215  if (account != address(0)) {... */\n    tag_111:\n        /* \"contracts/StakingRewards.sol\":4895:4907  periodFinish */\n      sload(0x04)\n        /* \"contracts/StakingRewards.sol\":4876:4891  block.timestamp */\n      timestamp\n        /* \"contracts/StakingRewards.sol\":4876:4907  block.timestamp >= periodFinish */\n      lt\n        /* \"contracts/StakingRewards.sol\":4872:5184  if (block.timestamp >= periodFinish) {... */\n      tag_114\n      jumpi\n        /* \"contracts/StakingRewards.sol\":4936:4963  reward.div(rewardsDuration) */\n      tag_115\n        /* \"contracts/StakingRewards.sol\":4947:4962  rewardsDuration */\n      sload(0x06)\n        /* \"contracts/StakingRewards.sol\":4936:4942  reward */\n      dup4\n        /* \"contracts/StakingRewards.sol\":4936:4946  reward.div */\n      tag_88\n      swap1\n        /* \"contracts/StakingRewards.sol\":4936:4963  reward.div(rewardsDuration) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_115:\n        /* \"contracts/StakingRewards.sol\":4923:4933  rewardRate */\n      0x05\n        /* \"contracts/StakingRewards.sol\":4923:4963  rewardRate = reward.div(rewardsDuration) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":4872:5184  if (block.timestamp >= periodFinish) {... */\n      jump(tag_116)\n    tag_114:\n        /* \"contracts/StakingRewards.sol\":4994:5011  uint256 remaining */\n      0x00\n        /* \"contracts/StakingRewards.sol\":5014:5047  periodFinish.sub(block.timestamp) */\n      tag_117\n        /* \"contracts/StakingRewards.sol\":5031:5046  block.timestamp */\n      timestamp\n        /* \"contracts/StakingRewards.sol\":5014:5026  periodFinish */\n      sload(0x04)\n        /* \"contracts/StakingRewards.sol\":5014:5030  periodFinish.sub */\n      tag_86\n      swap1\n        /* \"contracts/StakingRewards.sol\":5014:5047  periodFinish.sub(block.timestamp) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_117:\n        /* \"contracts/StakingRewards.sol\":4994:5047  uint256 remaining = periodFinish.sub(block.timestamp) */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":5061:5077  uint256 leftover */\n      0x00\n        /* \"contracts/StakingRewards.sol\":5080:5105  remaining.mul(rewardRate) */\n      tag_118\n        /* \"contracts/StakingRewards.sol\":5094:5104  rewardRate */\n      sload(0x05)\n        /* \"contracts/StakingRewards.sol\":5080:5089  remaining */\n      dup4\n        /* \"contracts/StakingRewards.sol\":5080:5093  remaining.mul */\n      tag_87\n      swap1\n        /* \"contracts/StakingRewards.sol\":5080:5105  remaining.mul(rewardRate) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_118:\n        /* \"contracts/StakingRewards.sol\":5061:5105  uint256 leftover = remaining.mul(rewardRate) */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":5132:5173  reward.add(leftover).div(rewardsDuration) */\n      tag_119\n        /* \"contracts/StakingRewards.sol\":5157:5172  rewardsDuration */\n      sload(0x06)\n        /* \"contracts/StakingRewards.sol\":5132:5152  reward.add(leftover) */\n      tag_120\n        /* \"contracts/StakingRewards.sol\":5143:5151  leftover */\n      dup4\n        /* \"contracts/StakingRewards.sol\":5132:5138  reward */\n      dup8\n        /* \"contracts/StakingRewards.sol\":5132:5142  reward.add */\n      tag_89\n      swap1\n        /* \"contracts/StakingRewards.sol\":5132:5152  reward.add(leftover) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_120:\n        /* \"contracts/StakingRewards.sol\":5132:5156  reward.add(leftover).div */\n      tag_88\n      swap1\n        /* \"contracts/StakingRewards.sol\":5132:5173  reward.add(leftover).div(rewardsDuration) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_119:\n        /* \"contracts/StakingRewards.sol\":5119:5129  rewardRate */\n      0x05\n        /* \"contracts/StakingRewards.sol\":5119:5173  rewardRate = reward.add(leftover).div(rewardsDuration) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":4872:5184  if (block.timestamp >= periodFinish) {... */\n      pop\n      pop\n    tag_116:\n        /* \"contracts/StakingRewards.sol\":5538:5553  uint256 balance */\n      0x00\n        /* \"contracts/StakingRewards.sol\":5556:5568  rewardsToken */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakingRewards.sol\":5556:5578  rewardsToken.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/StakingRewards.sol\":5587:5591  this */\n      address\n        /* \"contracts/StakingRewards.sol\":5556:5593  rewardsToken.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_121\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_121:\n        /* \"contracts/StakingRewards.sol\":5556:5593  rewardsToken.balanceOf(address(this)) */\n      pop\n      gas\n      staticcall\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_122\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_122:\n        /* \"contracts/StakingRewards.sol\":5556:5593  rewardsToken.balanceOf(address(this)) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_123\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_123:\n        /* \"contracts/StakingRewards.sol\":5556:5593  rewardsToken.balanceOf(address(this)) */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/StakingRewards.sol\":5538:5593  uint256 balance = rewardsToken.balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":5638:5666  balance.div(rewardsDuration) */\n      tag_124\n        /* \"contracts/StakingRewards.sol\":5650:5665  rewardsDuration */\n      sload(0x06)\n        /* \"contracts/StakingRewards.sol\":5638:5645  balance */\n      dup3\n        /* \"contracts/StakingRewards.sol\":5638:5649  balance.div */\n      tag_88\n      swap1\n        /* \"contracts/StakingRewards.sol\":5638:5666  balance.div(rewardsDuration) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_124:\n        /* \"contracts/StakingRewards.sol\":5624:5634  rewardRate */\n      sload(0x05)\n        /* \"contracts/StakingRewards.sol\":5624:5666  rewardRate <= balance.div(rewardsDuration) */\n      gt\n      iszero\n        /* \"contracts/StakingRewards.sol\":5603:5716  require(... */\n      tag_125\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x18\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x50726f76696465642072657761726420746f6f20686967680000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_125:\n        /* \"contracts/StakingRewards.sol\":5744:5759  block.timestamp */\n      timestamp\n        /* \"contracts/StakingRewards.sol\":5727:5741  lastUpdateTime */\n      0x07\n        /* \"contracts/StakingRewards.sol\":5727:5759  lastUpdateTime = block.timestamp */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":5784:5820  block.timestamp.add(rewardsDuration) */\n      tag_126\n        /* \"contracts/StakingRewards.sol\":5804:5819  rewardsDuration */\n      sload(0x06)\n        /* \"contracts/StakingRewards.sol\":5784:5799  block.timestamp */\n      timestamp\n        /* \"contracts/StakingRewards.sol\":5784:5803  block.timestamp.add */\n      tag_89\n      swap1\n        /* \"contracts/StakingRewards.sol\":5784:5820  block.timestamp.add(rewardsDuration) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_126:\n        /* \"contracts/StakingRewards.sol\":5769:5781  periodFinish */\n      0x04\n        /* \"contracts/StakingRewards.sol\":5769:5820  periodFinish = block.timestamp.add(rewardsDuration) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":5835:5854  RewardAdded(reward) */\n      0xde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d\n        /* \"contracts/StakingRewards.sol\":5847:5853  reward */\n      dup4\n        /* \"contracts/StakingRewards.sol\":5835:5854  RewardAdded(reward) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/StakingRewards.sol\":6224:6225  _ */\n      pop\n        /* \"contracts/RewardsDistributionRecipient.sol\":346:347  _ */\n      pop\n        /* \"contracts/StakingRewards.sol\":4732:5861  function notifyRewardAmount(uint256 reward)... */\n      pop\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":4272:4572  function getReward() public nonReentrant updateReward(msg.sender) {... */\n    tag_47:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1318:1319  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1301:1314  _guardCounter */\n      dup1\n      0x00\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1301:1319  _guardCounter += 1 */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1329:1349  uint256 localCounter */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1352:1365  _guardCounter */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1329:1365  uint256 localCounter = _guardCounter */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":4326:4336  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":5982:5998  rewardPerToken() */\n      tag_129\n        /* \"contracts/StakingRewards.sol\":5982:5996  rewardPerToken */\n      tag_68\n        /* \"contracts/StakingRewards.sol\":5982:5998  rewardPerToken() */\n      jump\t// in\n    tag_129:\n        /* \"contracts/StakingRewards.sol\":5959:5979  rewardPerTokenStored */\n      0x08\n        /* \"contracts/StakingRewards.sol\":5959:5998  rewardPerTokenStored = rewardPerToken() */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6025:6051  lastTimeRewardApplicable() */\n      tag_130\n        /* \"contracts/StakingRewards.sol\":6025:6049  lastTimeRewardApplicable */\n      tag_58\n        /* \"contracts/StakingRewards.sol\":6025:6051  lastTimeRewardApplicable() */\n      jump\t// in\n    tag_130:\n        /* \"contracts/StakingRewards.sol\":6008:6022  lastUpdateTime */\n      0x07\n        /* \"contracts/StakingRewards.sol\":6008:6051  lastUpdateTime = lastTimeRewardApplicable() */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6084:6085  0 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6065:6086  account != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakingRewards.sol\":6065:6072  account */\n      dup2\n        /* \"contracts/StakingRewards.sol\":6065:6086  account != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/StakingRewards.sol\":6061:6215  if (account != address(0)) {... */\n      tag_131\n      jumpi\n        /* \"contracts/StakingRewards.sol\":6121:6136  earned(account) */\n      tag_132\n        /* \"contracts/StakingRewards.sol\":6128:6135  account */\n      dup2\n        /* \"contracts/StakingRewards.sol\":6121:6127  earned */\n      tag_30\n        /* \"contracts/StakingRewards.sol\":6121:6136  earned(account) */\n      jump\t// in\n    tag_132:\n        /* \"contracts/StakingRewards.sol\":6102:6109  rewards */\n      0x0a\n        /* \"contracts/StakingRewards.sol\":6102:6118  rewards[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6110:6117  account */\n      dup4\n        /* \"contracts/StakingRewards.sol\":6102:6118  rewards[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":6102:6136  rewards[account] = earned(account) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6184:6204  rewardPerTokenStored */\n      sload(0x08)\n        /* \"contracts/StakingRewards.sol\":6150:6172  userRewardPerTokenPaid */\n      0x09\n        /* \"contracts/StakingRewards.sol\":6150:6181  userRewardPerTokenPaid[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6173:6180  account */\n      dup4\n        /* \"contracts/StakingRewards.sol\":6150:6181  userRewardPerTokenPaid[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":6150:6204  userRewardPerTokenPaid[account] = rewardPerTokenStored */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6061:6215  if (account != address(0)) {... */\n    tag_131:\n        /* \"contracts/StakingRewards.sol\":4348:4362  uint256 reward */\n      0x00\n        /* \"contracts/StakingRewards.sol\":4365:4372  rewards */\n      0x0a\n        /* \"contracts/StakingRewards.sol\":4365:4384  rewards[msg.sender] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":4373:4383  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":4365:4384  rewards[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/StakingRewards.sol\":4348:4384  uint256 reward = rewards[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":4407:4408  0 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":4398:4404  reward */\n      dup2\n        /* \"contracts/StakingRewards.sol\":4398:4408  reward > 0 */\n      gt\n        /* \"contracts/StakingRewards.sol\":4394:4566  if (reward > 0) {... */\n      iszero\n      tag_134\n      jumpi\n        /* \"contracts/StakingRewards.sol\":4446:4447  0 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":4424:4431  rewards */\n      0x0a\n        /* \"contracts/StakingRewards.sol\":4424:4443  rewards[msg.sender] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":4432:4442  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":4424:4443  rewards[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":4424:4447  rewards[msg.sender] = 0 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":4461:4506  rewardsToken.safeTransfer(msg.sender, reward) */\n      tag_135\n        /* \"contracts/StakingRewards.sol\":4487:4497  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":4499:4505  reward */\n      dup3\n        /* \"contracts/StakingRewards.sol\":4461:4473  rewardsToken */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakingRewards.sol\":4461:4486  rewardsToken.safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_104\n      swap1\n        /* \"contracts/StakingRewards.sol\":4461:4506  rewardsToken.safeTransfer(msg.sender, reward) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_135:\n        /* \"contracts/StakingRewards.sol\":4536:4546  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":4525:4555  RewardPaid(msg.sender, reward) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486\n        /* \"contracts/StakingRewards.sol\":4548:4554  reward */\n      dup3\n        /* \"contracts/StakingRewards.sol\":4525:4555  RewardPaid(msg.sender, reward) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/StakingRewards.sol\":4394:4566  if (reward > 0) {... */\n    tag_134:\n        /* \"contracts/StakingRewards.sol\":6224:6225  _ */\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1375:1376  _ */\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1410:1423  _guardCounter */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1394:1406  localCounter */\n      dup2\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1394:1423  localCounter == _guardCounter */\n      eq\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1386:1459  require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\") */\n      tag_136\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_136:\n        /* \"contracts/StakingRewards.sol\":4272:4572  function getReward() public nonReentrant updateReward(msg.sender) {... */\n      pop\n      jump\t// out\n        /* \"contracts/RewardsDistributionRecipient.sol\":69:103  address public rewardsDistribution */\n    tag_49:\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":1688:1798  function balanceOf(address account) external view returns (uint256) {... */\n    tag_52:\n        /* \"contracts/StakingRewards.sol\":1747:1754  uint256 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":1773:1782  _balances */\n      0x0c\n        /* \"contracts/StakingRewards.sol\":1773:1791  _balances[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":1783:1790  account */\n      dup4\n        /* \"contracts/StakingRewards.sol\":1773:1791  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/StakingRewards.sol\":1766:1791  return _balances[account] */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":1688:1798  function balanceOf(address account) external view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":668:694  IERC20 public stakingToken */\n    tag_54:\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":737:766  uint256 public rewardRate = 0 */\n    tag_56:\n      sload(0x05)\n      dup2\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":1804:1933  function lastTimeRewardApplicable() public view returns (uint256) {... */\n    tag_58:\n        /* \"contracts/StakingRewards.sol\":1861:1868  uint256 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":1887:1926  Math.min(block.timestamp, periodFinish) */\n      tag_139\n        /* \"contracts/StakingRewards.sol\":1896:1911  block.timestamp */\n      timestamp\n        /* \"contracts/StakingRewards.sol\":1913:1925  periodFinish */\n      sload(0x04)\n        /* \"contracts/StakingRewards.sol\":1887:1895  Math.min */\n      tag_140\n        /* \"contracts/StakingRewards.sol\":1887:1926  Math.min(block.timestamp, periodFinish) */\n      jump\t// in\n    tag_139:\n        /* \"contracts/StakingRewards.sol\":1880:1926  return Math.min(block.timestamp, periodFinish) */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":1804:1933  function lastTimeRewardApplicable() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":894:951  mapping(address => uint256) public userRewardPerTokenPaid */\n    tag_61:\n      mstore(0x20, 0x09)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":3490:3881  function stake(uint256 amount)... */\n    tag_64:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1318:1319  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1301:1314  _guardCounter */\n      dup1\n      0x00\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1301:1319  _guardCounter += 1 */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1329:1349  uint256 localCounter */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1352:1365  _guardCounter */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1329:1365  uint256 localCounter = _guardCounter */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":3580:3590  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":5982:5998  rewardPerToken() */\n      tag_143\n        /* \"contracts/StakingRewards.sol\":5982:5996  rewardPerToken */\n      tag_68\n        /* \"contracts/StakingRewards.sol\":5982:5998  rewardPerToken() */\n      jump\t// in\n    tag_143:\n        /* \"contracts/StakingRewards.sol\":5959:5979  rewardPerTokenStored */\n      0x08\n        /* \"contracts/StakingRewards.sol\":5959:5998  rewardPerTokenStored = rewardPerToken() */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6025:6051  lastTimeRewardApplicable() */\n      tag_144\n        /* \"contracts/StakingRewards.sol\":6025:6049  lastTimeRewardApplicable */\n      tag_58\n        /* \"contracts/StakingRewards.sol\":6025:6051  lastTimeRewardApplicable() */\n      jump\t// in\n    tag_144:\n        /* \"contracts/StakingRewards.sol\":6008:6022  lastUpdateTime */\n      0x07\n        /* \"contracts/StakingRewards.sol\":6008:6051  lastUpdateTime = lastTimeRewardApplicable() */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6084:6085  0 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6065:6086  account != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakingRewards.sol\":6065:6072  account */\n      dup2\n        /* \"contracts/StakingRewards.sol\":6065:6086  account != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/StakingRewards.sol\":6061:6215  if (account != address(0)) {... */\n      tag_145\n      jumpi\n        /* \"contracts/StakingRewards.sol\":6121:6136  earned(account) */\n      tag_146\n        /* \"contracts/StakingRewards.sol\":6128:6135  account */\n      dup2\n        /* \"contracts/StakingRewards.sol\":6121:6127  earned */\n      tag_30\n        /* \"contracts/StakingRewards.sol\":6121:6136  earned(account) */\n      jump\t// in\n    tag_146:\n        /* \"contracts/StakingRewards.sol\":6102:6109  rewards */\n      0x0a\n        /* \"contracts/StakingRewards.sol\":6102:6118  rewards[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6110:6117  account */\n      dup4\n        /* \"contracts/StakingRewards.sol\":6102:6118  rewards[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":6102:6136  rewards[account] = earned(account) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6184:6204  rewardPerTokenStored */\n      sload(0x08)\n        /* \"contracts/StakingRewards.sol\":6150:6172  userRewardPerTokenPaid */\n      0x09\n        /* \"contracts/StakingRewards.sol\":6150:6181  userRewardPerTokenPaid[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6173:6180  account */\n      dup4\n        /* \"contracts/StakingRewards.sol\":6150:6181  userRewardPerTokenPaid[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":6150:6204  userRewardPerTokenPaid[account] = rewardPerTokenStored */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6061:6215  if (account != address(0)) {... */\n    tag_145:\n        /* \"contracts/StakingRewards.sol\":3623:3624  0 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":3614:3620  amount */\n      dup4\n        /* \"contracts/StakingRewards.sol\":3614:3624  amount > 0 */\n      gt\n        /* \"contracts/StakingRewards.sol\":3606:3643  require(amount > 0, \"Cannot stake 0\") */\n      tag_148\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x43616e6e6f74207374616b652030000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_148:\n        /* \"contracts/StakingRewards.sol\":3668:3692  _totalSupply.add(amount) */\n      tag_149\n        /* \"contracts/StakingRewards.sol\":3685:3691  amount */\n      dup4\n        /* \"contracts/StakingRewards.sol\":3668:3680  _totalSupply */\n      sload(0x0b)\n        /* \"contracts/StakingRewards.sol\":3668:3684  _totalSupply.add */\n      tag_89\n      swap1\n        /* \"contracts/StakingRewards.sol\":3668:3692  _totalSupply.add(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_149:\n        /* \"contracts/StakingRewards.sol\":3653:3665  _totalSupply */\n      0x0b\n        /* \"contracts/StakingRewards.sol\":3653:3692  _totalSupply = _totalSupply.add(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":3726:3759  _balances[msg.sender].add(amount) */\n      tag_150\n        /* \"contracts/StakingRewards.sol\":3752:3758  amount */\n      dup4\n        /* \"contracts/StakingRewards.sol\":3726:3735  _balances */\n      0x0c\n        /* \"contracts/StakingRewards.sol\":3726:3747  _balances[msg.sender] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":3736:3746  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":3726:3747  _balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/StakingRewards.sol\":3726:3751  _balances[msg.sender].add */\n      tag_89\n      swap1\n        /* \"contracts/StakingRewards.sol\":3726:3759  _balances[msg.sender].add(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_150:\n        /* \"contracts/StakingRewards.sol\":3702:3711  _balances */\n      0x0c\n        /* \"contracts/StakingRewards.sol\":3702:3723  _balances[msg.sender] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":3712:3722  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":3702:3723  _balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":3702:3759  _balances[msg.sender] = _balances[msg.sender].add(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":3769:3833  stakingToken.safeTransferFrom(msg.sender, address(this), amount) */\n      tag_151\n        /* \"contracts/StakingRewards.sol\":3799:3809  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":3819:3823  this */\n      address\n        /* \"contracts/StakingRewards.sol\":3826:3832  amount */\n      dup6\n        /* \"contracts/StakingRewards.sol\":3769:3781  stakingToken */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakingRewards.sol\":3769:3798  stakingToken.safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_152\n      swap1\n        /* \"contracts/StakingRewards.sol\":3769:3833  stakingToken.safeTransferFrom(msg.sender, address(this), amount) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_151:\n        /* \"contracts/StakingRewards.sol\":3855:3865  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":3848:3874  Staked(msg.sender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d\n        /* \"contracts/StakingRewards.sol\":3867:3873  amount */\n      dup5\n        /* \"contracts/StakingRewards.sol\":3848:3874  Staked(msg.sender, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1375:1376  _ */\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1410:1423  _guardCounter */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1394:1406  localCounter */\n      dup2\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1394:1423  localCounter == _guardCounter */\n      eq\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1386:1459  require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\") */\n      tag_153\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_153:\n        /* \"contracts/StakingRewards.sol\":3490:3881  function stake(uint256 amount)... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":817:846  uint256 public lastUpdateTime */\n    tag_66:\n      sload(0x07)\n      dup2\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":1939:2345  function rewardPerToken() public view returns (uint256) {... */\n    tag_68:\n        /* \"contracts/StakingRewards.sol\":1986:1993  uint256 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":2025:2026  0 */\n      dup1\n        /* \"contracts/StakingRewards.sol\":2009:2021  _totalSupply */\n      sload(0x0b)\n        /* \"contracts/StakingRewards.sol\":2009:2026  _totalSupply == 0 */\n      eq\n        /* \"contracts/StakingRewards.sol\":2005:2080  if (_totalSupply == 0) {... */\n      iszero\n      tag_155\n      jumpi\n        /* \"contracts/StakingRewards.sol\":2049:2069  rewardPerTokenStored */\n      sload(0x08)\n        /* \"contracts/StakingRewards.sol\":2042:2069  return rewardPerTokenStored */\n      swap1\n      pop\n      jump(tag_154)\n        /* \"contracts/StakingRewards.sol\":2005:2080  if (_totalSupply == 0) {... */\n    tag_155:\n        /* \"contracts/StakingRewards.sol\":2108:2338  rewardPerTokenStored.add(... */\n      tag_156\n        /* \"contracts/StakingRewards.sol\":2150:2324  lastTimeRewardApplicable()... */\n      tag_157\n        /* \"contracts/StakingRewards.sol\":2311:2323  _totalSupply */\n      sload(0x0b)\n        /* \"contracts/StakingRewards.sol\":2150:2285  lastTimeRewardApplicable()... */\n      tag_158\n        /* \"contracts/StakingRewards.sol\":2280:2284  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/StakingRewards.sol\":2150:2254  lastTimeRewardApplicable()... */\n      tag_159\n        /* \"contracts/StakingRewards.sol\":2243:2253  rewardRate */\n      sload(0x05)\n        /* \"contracts/StakingRewards.sol\":2150:2217  lastTimeRewardApplicable()... */\n      tag_160\n        /* \"contracts/StakingRewards.sol\":2202:2216  lastUpdateTime */\n      sload(0x07)\n        /* \"contracts/StakingRewards.sol\":2150:2176  lastTimeRewardApplicable() */\n      tag_161\n        /* \"contracts/StakingRewards.sol\":2150:2174  lastTimeRewardApplicable */\n      tag_58\n        /* \"contracts/StakingRewards.sol\":2150:2176  lastTimeRewardApplicable() */\n      jump\t// in\n    tag_161:\n        /* \"contracts/StakingRewards.sol\":2150:2201  lastTimeRewardApplicable()... */\n      tag_86\n      swap1\n        /* \"contracts/StakingRewards.sol\":2150:2217  lastTimeRewardApplicable()... */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_160:\n        /* \"contracts/StakingRewards.sol\":2150:2242  lastTimeRewardApplicable()... */\n      tag_87\n      swap1\n        /* \"contracts/StakingRewards.sol\":2150:2254  lastTimeRewardApplicable()... */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_159:\n        /* \"contracts/StakingRewards.sol\":2150:2279  lastTimeRewardApplicable()... */\n      tag_87\n      swap1\n        /* \"contracts/StakingRewards.sol\":2150:2285  lastTimeRewardApplicable()... */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_158:\n        /* \"contracts/StakingRewards.sol\":2150:2310  lastTimeRewardApplicable()... */\n      tag_88\n      swap1\n        /* \"contracts/StakingRewards.sol\":2150:2324  lastTimeRewardApplicable()... */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_157:\n        /* \"contracts/StakingRewards.sol\":2108:2128  rewardPerTokenStored */\n      sload(0x08)\n        /* \"contracts/StakingRewards.sol\":2108:2132  rewardPerTokenStored.add */\n      tag_89\n      swap1\n        /* \"contracts/StakingRewards.sol\":2108:2338  rewardPerTokenStored.add(... */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_156:\n        /* \"contracts/StakingRewards.sol\":2089:2338  return... */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":1939:2345  function rewardPerToken() public view returns (uint256) {... */\n    tag_154:\n      swap1\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":636:662  IERC20 public rewardsToken */\n    tag_70:\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":852:887  uint256 public rewardPerTokenStored */\n    tag_72:\n      sload(0x08)\n      dup2\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":4578:4672  function exit() external {... */\n    tag_74:\n        /* \"contracts/StakingRewards.sol\":4613:4644  withdraw(_balances[msg.sender]) */\n      tag_163\n        /* \"contracts/StakingRewards.sol\":4622:4631  _balances */\n      0x0c\n        /* \"contracts/StakingRewards.sol\":4622:4643  _balances[msg.sender] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":4632:4642  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":4622:4643  _balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/StakingRewards.sol\":4613:4621  withdraw */\n      tag_40\n        /* \"contracts/StakingRewards.sol\":4613:4644  withdraw(_balances[msg.sender]) */\n      jump\t// in\n    tag_163:\n        /* \"contracts/StakingRewards.sol\":4654:4665  getReward() */\n      tag_164\n        /* \"contracts/StakingRewards.sol\":4654:4663  getReward */\n      tag_47\n        /* \"contracts/StakingRewards.sol\":4654:4665  getReward() */\n      jump\t// in\n    tag_164:\n        /* \"contracts/StakingRewards.sol\":4578:4672  function exit() external {... */\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":700:731  uint256 public periodFinish = 0 */\n    tag_76:\n      sload(0x04)\n      dup2\n      jump\t// out\n        /* \"contracts/StakingRewards.sol\":2793:3484  function stakeWithPermit(... */\n    tag_79:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1318:1319  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1301:1314  _guardCounter */\n      dup1\n      0x00\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1301:1319  _guardCounter += 1 */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1329:1349  uint256 localCounter */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1352:1365  _guardCounter */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1329:1365  uint256 localCounter = _guardCounter */\n      swap1\n      pop\n        /* \"contracts/StakingRewards.sol\":2964:2974  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":5982:5998  rewardPerToken() */\n      tag_167\n        /* \"contracts/StakingRewards.sol\":5982:5996  rewardPerToken */\n      tag_68\n        /* \"contracts/StakingRewards.sol\":5982:5998  rewardPerToken() */\n      jump\t// in\n    tag_167:\n        /* \"contracts/StakingRewards.sol\":5959:5979  rewardPerTokenStored */\n      0x08\n        /* \"contracts/StakingRewards.sol\":5959:5998  rewardPerTokenStored = rewardPerToken() */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6025:6051  lastTimeRewardApplicable() */\n      tag_168\n        /* \"contracts/StakingRewards.sol\":6025:6049  lastTimeRewardApplicable */\n      tag_58\n        /* \"contracts/StakingRewards.sol\":6025:6051  lastTimeRewardApplicable() */\n      jump\t// in\n    tag_168:\n        /* \"contracts/StakingRewards.sol\":6008:6022  lastUpdateTime */\n      0x07\n        /* \"contracts/StakingRewards.sol\":6008:6051  lastUpdateTime = lastTimeRewardApplicable() */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6084:6085  0 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6065:6086  account != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakingRewards.sol\":6065:6072  account */\n      dup2\n        /* \"contracts/StakingRewards.sol\":6065:6086  account != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/StakingRewards.sol\":6061:6215  if (account != address(0)) {... */\n      tag_169\n      jumpi\n        /* \"contracts/StakingRewards.sol\":6121:6136  earned(account) */\n      tag_170\n        /* \"contracts/StakingRewards.sol\":6128:6135  account */\n      dup2\n        /* \"contracts/StakingRewards.sol\":6121:6127  earned */\n      tag_30\n        /* \"contracts/StakingRewards.sol\":6121:6136  earned(account) */\n      jump\t// in\n    tag_170:\n        /* \"contracts/StakingRewards.sol\":6102:6109  rewards */\n      0x0a\n        /* \"contracts/StakingRewards.sol\":6102:6118  rewards[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6110:6117  account */\n      dup4\n        /* \"contracts/StakingRewards.sol\":6102:6118  rewards[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":6102:6136  rewards[account] = earned(account) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6184:6204  rewardPerTokenStored */\n      sload(0x08)\n        /* \"contracts/StakingRewards.sol\":6150:6172  userRewardPerTokenPaid */\n      0x09\n        /* \"contracts/StakingRewards.sol\":6150:6181  userRewardPerTokenPaid[account] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":6173:6180  account */\n      dup4\n        /* \"contracts/StakingRewards.sol\":6150:6181  userRewardPerTokenPaid[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":6150:6204  userRewardPerTokenPaid[account] = rewardPerTokenStored */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":6061:6215  if (account != address(0)) {... */\n    tag_169:\n        /* \"contracts/StakingRewards.sol\":3003:3004  0 */\n      0x00\n        /* \"contracts/StakingRewards.sol\":2994:3000  amount */\n      dup8\n        /* \"contracts/StakingRewards.sol\":2994:3004  amount > 0 */\n      gt\n        /* \"contracts/StakingRewards.sol\":2986:3023  require(amount > 0, \"Cannot stake 0\") */\n      tag_172\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x43616e6e6f74207374616b652030000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_172:\n        /* \"contracts/StakingRewards.sol\":3048:3072  _totalSupply.add(amount) */\n      tag_173\n        /* \"contracts/StakingRewards.sol\":3065:3071  amount */\n      dup8\n        /* \"contracts/StakingRewards.sol\":3048:3060  _totalSupply */\n      sload(0x0b)\n        /* \"contracts/StakingRewards.sol\":3048:3064  _totalSupply.add */\n      tag_89\n      swap1\n        /* \"contracts/StakingRewards.sol\":3048:3072  _totalSupply.add(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_173:\n        /* \"contracts/StakingRewards.sol\":3033:3045  _totalSupply */\n      0x0b\n        /* \"contracts/StakingRewards.sol\":3033:3072  _totalSupply = _totalSupply.add(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":3106:3139  _balances[msg.sender].add(amount) */\n      tag_174\n        /* \"contracts/StakingRewards.sol\":3132:3138  amount */\n      dup8\n        /* \"contracts/StakingRewards.sol\":3106:3115  _balances */\n      0x0c\n        /* \"contracts/StakingRewards.sol\":3106:3127  _balances[msg.sender] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":3116:3126  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":3106:3127  _balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/StakingRewards.sol\":3106:3131  _balances[msg.sender].add */\n      tag_89\n      swap1\n        /* \"contracts/StakingRewards.sol\":3106:3139  _balances[msg.sender].add(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_174:\n        /* \"contracts/StakingRewards.sol\":3082:3091  _balances */\n      0x0c\n        /* \"contracts/StakingRewards.sol\":3082:3103  _balances[msg.sender] */\n      0x00\n        /* \"contracts/StakingRewards.sol\":3092:3102  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":3082:3103  _balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakingRewards.sol\":3082:3139  _balances[msg.sender] = _balances[msg.sender].add(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakingRewards.sol\":3192:3204  stakingToken */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakingRewards.sol\":3168:3213  IUniswapV2ERC20(address(stakingToken)).permit */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xd505accf\n        /* \"contracts/StakingRewards.sol\":3227:3237  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":3259:3263  this */\n      address\n        /* \"contracts/StakingRewards.sol\":3278:3284  amount */\n      dup11\n        /* \"contracts/StakingRewards.sol\":3298:3306  deadline */\n      dup11\n        /* \"contracts/StakingRewards.sol\":3320:3321  v */\n      dup11\n        /* \"contracts/StakingRewards.sol\":3335:3336  r */\n      dup11\n        /* \"contracts/StakingRewards.sol\":3350:3351  s */\n      dup11\n        /* \"contracts/StakingRewards.sol\":3168:3361  IUniswapV2ERC20(address(stakingToken)).permit(... */\n      mload(0x40)\n      dup9\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup9\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup8\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup7\n      dup2\n      mstore\n      0x20\n      add\n      dup6\n      dup2\n      mstore\n      0x20\n      add\n      dup5\n      0xff\n      and\n      0xff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_175\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_175:\n        /* \"contracts/StakingRewards.sol\":3168:3361  IUniswapV2ERC20(address(stakingToken)).permit(... */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_176\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_176:\n        /* \"contracts/StakingRewards.sol\":3168:3361  IUniswapV2ERC20(address(stakingToken)).permit(... */\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/StakingRewards.sol\":3372:3436  stakingToken.safeTransferFrom(msg.sender, address(this), amount) */\n      tag_177\n        /* \"contracts/StakingRewards.sol\":3402:3412  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":3422:3426  this */\n      address\n        /* \"contracts/StakingRewards.sol\":3429:3435  amount */\n      dup10\n        /* \"contracts/StakingRewards.sol\":3372:3384  stakingToken */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakingRewards.sol\":3372:3401  stakingToken.safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_152\n      swap1\n        /* \"contracts/StakingRewards.sol\":3372:3436  stakingToken.safeTransferFrom(msg.sender, address(this), amount) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_177:\n        /* \"contracts/StakingRewards.sol\":3458:3468  msg.sender */\n      caller\n        /* \"contracts/StakingRewards.sol\":3451:3477  Staked(msg.sender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d\n        /* \"contracts/StakingRewards.sol\":3470:3476  amount */\n      dup9\n        /* \"contracts/StakingRewards.sol\":3451:3477  Staked(msg.sender, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1375:1376  _ */\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1410:1423  _guardCounter */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1394:1406  localCounter */\n      dup2\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1394:1423  localCounter == _guardCounter */\n      eq\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1386:1459  require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\") */\n      tag_178\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_178:\n        /* \"contracts/StakingRewards.sol\":2793:3484  function stakeWithPermit(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1274:1453  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_86:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1332:1339  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1364:1365  a */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1359:1360  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1359:1365  b <= a */\n      gt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1351:1400  require(b <= a, \"SafeMath: subtraction overflow\") */\n      tag_180\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_180:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1410:1419  uint256 c */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1426:1427  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1422:1423  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1422:1427  a - b */\n      sub\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1410:1427  uint256 c = a - b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1445:1446  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1438:1446  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1274:1453  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1693:2152  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_87:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1751:1758  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1997:1998  0 */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1992:1993  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1992:1998  a == 0 */\n      eq\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1988:2033  if (a == 0) {... */\n      iszero\n      tag_182\n      jumpi\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2021:2022  0 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2014:2022  return 0 */\n      swap1\n      pop\n      jump(tag_181)\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1988:2033  if (a == 0) {... */\n    tag_182:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2043:2052  uint256 c */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2059:2060  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2055:2056  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2055:2060  a * b */\n      mul\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2043:2060  uint256 c = a * b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2087:2088  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2082:2083  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2078:2079  c */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2078:2083  c / a */\n      dup2\n      tag_183\n      jumpi\n      invalid\n    tag_183:\n      div\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2078:2088  c / a == b */\n      eq\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2070:2126  require(c / a == b, \"SafeMath: multiplication overflow\") */\n      tag_184\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x21\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3\n      0x21\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_184:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2144:2145  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2137:2145  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1693:2152  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_181:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2607:2933  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_88:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2665:2672  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2762:2763  0 */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2758:2759  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2758:2763  b > 0 */\n      gt\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2750:2794  require(b > 0, \"SafeMath: division by zero\") */\n      tag_186\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206469766973696f6e206279207a65726f000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_186:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2804:2813  uint256 c */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2820:2821  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2816:2817  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2816:2821  a / b */\n      dup2\n      tag_187\n      jumpi\n      invalid\n    tag_187:\n      div\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2804:2821  uint256 c = a / b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2925:2926  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2918:2926  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2607:2933  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":834:1010  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_89:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":892:899  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":911:920  uint256 c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":927:928  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":923:924  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":923:928  a + b */\n      add\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":911:928  uint256 c = a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":951:952  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":946:947  c */\n      dup2\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":946:952  c >= a */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":938:984  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_189\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_189:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":1002:1003  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":995:1003  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":834:1010  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":662:836  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_104:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":744:829  callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_191\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":763:768  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":793:798  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":793:807  token.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":793:816  token.transfer.selector */\n      swap1\n      pop\n      0xe0\n      shl\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":818:820  to */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":822:827  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":770:828  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      dup1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":49:53   */\n      0x20\n        /* \"--CODEGEN--\":39:46   */\n      dup2\n        /* \"--CODEGEN--\":30:37   */\n      dup4\n        /* \"--CODEGEN--\":26:47   */\n      sub\n        /* \"--CODEGEN--\":22:54   */\n      sub\n        /* \"--CODEGEN--\":13:20   */\n      dup2\n        /* \"--CODEGEN--\":6:55   */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":770:828  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"--CODEGEN--\":38:42   */\n      0x20\n        /* \"--CODEGEN--\":29:36   */\n      dup3\n        /* \"--CODEGEN--\":25:43   */\n      add\n        /* \"--CODEGEN--\":67:77   */\n      dup1\n        /* \"--CODEGEN--\":61:78   */\n      mload\n        /* \"--CODEGEN--\":96:154   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"--CODEGEN--\":199:207   */\n      dup4\n        /* \"--CODEGEN--\":192:196   */\n      dup2\n        /* \"--CODEGEN--\":186:190   */\n      dup4\n        /* \"--CODEGEN--\":182:197   */\n      and\n        /* \"--CODEGEN--\":179:208   */\n      or\n        /* \"--CODEGEN--\":167:177   */\n      dup4\n        /* \"--CODEGEN--\":160:209   */\n      mstore\n        /* \"--CODEGEN--\":0:215   */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":770:828  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":744:762  callOptionalReturn */\n      tag_192\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":744:829  callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_191:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":662:836  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/Math.sol\":358:462  function min(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_140:\n        /* \"@openzeppelin/contracts/math/Math.sol\":416:423  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/Math.sol\":446:447  b */\n      dup2\n        /* \"@openzeppelin/contracts/math/Math.sol\":442:443  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/Math.sol\":442:447  a < b */\n      lt\n        /* \"@openzeppelin/contracts/math/Math.sol\":442:455  a < b ? a : b */\n      tag_194\n      jumpi\n        /* \"@openzeppelin/contracts/math/Math.sol\":454:455  b */\n      dup2\n        /* \"@openzeppelin/contracts/math/Math.sol\":442:455  a < b ? a : b */\n      jump(tag_195)\n    tag_194:\n        /* \"@openzeppelin/contracts/math/Math.sol\":450:451  a */\n      dup3\n        /* \"@openzeppelin/contracts/math/Math.sol\":442:455  a < b ? a : b */\n    tag_195:\n        /* \"@openzeppelin/contracts/math/Math.sol\":435:455  return a < b ? a : b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/Math.sol\":358:462  function min(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":842:1044  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_152:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":942:1037  callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_197\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":961:966  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":991:996  token */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":991:1009  token.transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":991:1018  token.transferFrom.selector */\n      swap1\n      pop\n      0xe0\n      shl\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1020:1024  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1026:1028  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1030:1035  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":968:1036  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      dup1\n      dup5\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n        /* \"--CODEGEN--\":49:53   */\n      0x20\n        /* \"--CODEGEN--\":39:46   */\n      dup2\n        /* \"--CODEGEN--\":30:37   */\n      dup4\n        /* \"--CODEGEN--\":26:47   */\n      sub\n        /* \"--CODEGEN--\":22:54   */\n      sub\n        /* \"--CODEGEN--\":13:20   */\n      dup2\n        /* \"--CODEGEN--\":6:55   */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":968:1036  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"--CODEGEN--\":38:42   */\n      0x20\n        /* \"--CODEGEN--\":29:36   */\n      dup3\n        /* \"--CODEGEN--\":25:43   */\n      add\n        /* \"--CODEGEN--\":67:77   */\n      dup1\n        /* \"--CODEGEN--\":61:78   */\n      mload\n        /* \"--CODEGEN--\":96:154   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"--CODEGEN--\":199:207   */\n      dup4\n        /* \"--CODEGEN--\":192:196   */\n      dup2\n        /* \"--CODEGEN--\":186:190   */\n      dup4\n        /* \"--CODEGEN--\":182:197   */\n      and\n        /* \"--CODEGEN--\":179:208   */\n      or\n        /* \"--CODEGEN--\":167:177   */\n      dup4\n        /* \"--CODEGEN--\":160:209   */\n      mstore\n        /* \"--CODEGEN--\":0:215   */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":968:1036  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":942:960  callOptionalReturn */\n      tag_192\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":942:1037  callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_197:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":842:1044  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2621:3716  function callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_192:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3216:3243  address(token).isContract() */\n      tag_199\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3224:3229  token */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3216:3241  address(token).isContract */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_200\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3216:3243  address(token).isContract() */\n      jump\t// in\n    tag_199:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3208:3279  require(address(token).isContract(), \"SafeERC20: call to non-contract\") */\n      tag_201\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_201:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3350:3362  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3364:3387  bytes memory returndata */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3399:3404  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3391:3410  address(token).call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3411:3415  data */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3391:3416  address(token).call(data) */\n      mload(0x40)\n      dup1\n      dup3\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":36:189   */\n    tag_202:\n        /* \"--CODEGEN--\":66:68   */\n      0x20\n        /* \"--CODEGEN--\":61:64   */\n      dup4\n        /* \"--CODEGEN--\":58:69   */\n      lt\n        /* \"--CODEGEN--\":36:189   */\n      tag_204\n      jumpi\n        /* \"--CODEGEN--\":182:185   */\n      dup1\n        /* \"--CODEGEN--\":176:186   */\n      mload\n        /* \"--CODEGEN--\":171:174   */\n      dup3\n        /* \"--CODEGEN--\":164:187   */\n      mstore\n        /* \"--CODEGEN--\":98:100   */\n      0x20\n        /* \"--CODEGEN--\":93:96   */\n      dup3\n        /* \"--CODEGEN--\":89:101   */\n      add\n        /* \"--CODEGEN--\":82:101   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":123:125   */\n      0x20\n        /* \"--CODEGEN--\":118:121   */\n      dup2\n        /* \"--CODEGEN--\":114:126   */\n      add\n        /* \"--CODEGEN--\":107:126   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":148:150   */\n      0x20\n        /* \"--CODEGEN--\":143:146   */\n      dup4\n        /* \"--CODEGEN--\":139:151   */\n      sub\n        /* \"--CODEGEN--\":132:151   */\n      swap3\n      pop\n        /* \"--CODEGEN--\":36:189   */\n      jump(tag_202)\n    tag_204:\n        /* \"--CODEGEN--\":274:275   */\n      0x01\n        /* \"--CODEGEN--\":267:270   */\n      dup4\n        /* \"--CODEGEN--\":263:265   */\n      0x20\n        /* \"--CODEGEN--\":259:271   */\n      sub\n        /* \"--CODEGEN--\":254:257   */\n      0x0100\n        /* \"--CODEGEN--\":250:272   */\n      exp\n        /* \"--CODEGEN--\":246:276   */\n      sub\n        /* \"--CODEGEN--\":315:319   */\n      dup1\n        /* \"--CODEGEN--\":311:320   */\n      not\n        /* \"--CODEGEN--\":305:308   */\n      dup3\n        /* \"--CODEGEN--\":299:309   */\n      mload\n        /* \"--CODEGEN--\":295:321   */\n      and\n        /* \"--CODEGEN--\":356:360   */\n      dup2\n        /* \"--CODEGEN--\":350:353   */\n      dup5\n        /* \"--CODEGEN--\":344:354   */\n      mload\n        /* \"--CODEGEN--\":340:361   */\n      and\n        /* \"--CODEGEN--\":389:396   */\n      dup1\n        /* \"--CODEGEN--\":380:387   */\n      dup3\n        /* \"--CODEGEN--\":377:397   */\n      or\n        /* \"--CODEGEN--\":372:375   */\n      dup6\n        /* \"--CODEGEN--\":365:398   */\n      mstore\n        /* \"--CODEGEN--\":3:402   */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3391:3416  address(token).call(data) */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n        /* \"--CODEGEN--\":14:15   */\n      dup1\n        /* \"--CODEGEN--\":21:22   */\n      0x00\n        /* \"--CODEGEN--\":16:47   */\n      dup2\n      eq\n      tag_206\n      jumpi\n        /* \"--CODEGEN--\":75:79   */\n      0x40\n        /* \"--CODEGEN--\":69:80   */\n      mload\n        /* \"--CODEGEN--\":64:80   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":144:148   */\n      0x1f\n        /* \"--CODEGEN--\":140:149   */\n      not\n        /* \"--CODEGEN--\":133:137   */\n      0x3f\n        /* \"--CODEGEN--\":115:131   */\n      returndatasize\n        /* \"--CODEGEN--\":111:138   */\n      add\n        /* \"--CODEGEN--\":107:150   */\n      and\n        /* \"--CODEGEN--\":104:105   */\n      dup3\n        /* \"--CODEGEN--\":100:151   */\n      add\n        /* \"--CODEGEN--\":94:98   */\n      0x40\n        /* \"--CODEGEN--\":87:152   */\n      mstore\n        /* \"--CODEGEN--\":169:185   */\n      returndatasize\n        /* \"--CODEGEN--\":166:167   */\n      dup3\n        /* \"--CODEGEN--\":159:186   */\n      mstore\n        /* \"--CODEGEN--\":225:241   */\n      returndatasize\n        /* \"--CODEGEN--\":222:223   */\n      0x00\n        /* \"--CODEGEN--\":215:219   */\n      0x20\n        /* \"--CODEGEN--\":212:213   */\n      dup5\n        /* \"--CODEGEN--\":208:220   */\n      add\n        /* \"--CODEGEN--\":193:242   */\n      returndatacopy\n        /* \"--CODEGEN--\":7:249   */\n      jump(tag_205)\n        /* \"--CODEGEN--\":16:47   */\n    tag_206:\n        /* \"--CODEGEN--\":36:40   */\n      0x60\n        /* \"--CODEGEN--\":31:40   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":7:249   */\n    tag_205:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3349:3416  (bool success, bytes memory returndata) = address(token).call(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3434:3441  success */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3426:3478  require(success, \"SafeERC20: low-level call failed\") */\n      tag_207\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_207:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3513:3514  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3493:3503  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3493:3510  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3493:3514  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3489:3710  if (returndata.length > 0) { // Return data is optional... */\n      iszero\n      tag_208\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3633:3643  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3622:3652  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_209\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_209:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3622:3652  abi.decode(returndata, (bool)) */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3614:3699  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_210\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd\n      0x2a\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_210:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3489:3710  if (returndata.length > 0) { // Return data is optional... */\n    tag_208:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2621:3716  function callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":542:955  function isContract(address account) internal view returns (bool) {... */\n    tag_200:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":602:606  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":805:817  uint256 size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":914:921  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":902:922  extcodesize(account) */\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":894:922  size := extcodesize(account) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":947:948  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":940:944  size */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":940:948  size > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":933:948  return size > 0 */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":542:955  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n    stop\n    data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3 536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77\n    data_d50b095422f4cbfcb4c90fbd4d55aaf0967bf1d90e94bb6a1ae9fc4ee7e733de 43616c6c6572206973206e6f742052657761726473446973747269627574696f6e20636f6e7472616374\n    data_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd 5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564\n\n    auxdata: 0xa265627a7a72315820790d3c5fd2c31612d031e4c8aab3004d236b64a0e45c836b8f8e71536f54eea764736f6c63430005100032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405260006004556000600555600060065534801561001f57600080fd5b5060405161228e38038061228e8339818101604052608081101561004257600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050506001808190555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620151808202600681905550836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050612135806101596000396000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c80637b0a47ee116100b8578063cd3daf9d1161007c578063cd3daf9d14610482578063d1af0c7d146104a0578063df136d65146104ea578063e9fad8ee14610508578063ebe2b12b14610512578063ecd9ba821461053057610141565b80637b0a47ee146103a257806380faa57d146103c05780638b876347146103de578063a694fc3a14610436578063c8f33c911461046457610141565b8063386a95251161010a578063386a9525146102605780633c6b16ab1461027e5780633d18b912146102ac5780633fc6df6e146102b657806370a082311461030057806372f702f31461035857610141565b80628cc262146101465780630700037d1461019e57806318160ddd146101f65780631c1f78eb146102145780632e1a7d4d14610232575b600080fd5b6101886004803603602081101561015c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610589565b6040518082815260200191505060405180910390f35b6101e0600480360360208110156101b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106a7565b6040518082815260200191505060405180910390f35b6101fe6106bf565b6040518082815260200191505060405180910390f35b61021c6106c9565b6040518082815260200191505060405180910390f35b61025e6004803603602081101561024857600080fd5b81019080803590602001909291905050506106e7565b005b610268610a1f565b6040518082815260200191505060405180910390f35b6102aa6004803603602081101561029457600080fd5b8101908080359060200190929190505050610a25565b005b6102b4610e02565b005b6102be6110a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103426004803603602081101561031657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110cc565b6040518082815260200191505060405180910390f35b610360611115565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103aa61113b565b6040518082815260200191505060405180910390f35b6103c8611141565b6040518082815260200191505060405180910390f35b610420600480360360208110156103f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611154565b6040518082815260200191505060405180910390f35b6104626004803603602081101561044c57600080fd5b810190808035906020019092919050505061116c565b005b61046c6114a6565b6040518082815260200191505060405180910390f35b61048a6114ac565b6040518082815260200191505060405180910390f35b6104a861153a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104f2611560565b6040518082815260200191505060405180910390f35b610510611566565b005b61051a6115b8565b6040518082815260200191505060405180910390f35b610587600480360360a081101561054657600080fd5b810190808035906020019092919080359060200190929190803560ff16906020019092919080359060200190929190803590602001909291905050506115be565b005b60006106a0600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610692670de0b6b3a7640000610684610636600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106286114ac565b611a1790919063ffffffff16565b600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aa090919063ffffffff16565b611b2690919063ffffffff16565b611bb590919063ffffffff16565b9050919050565b600a6020528060005260406000206000915090505481565b6000600b54905090565b60006106e2600654600554611aa090919063ffffffff16565b905090565b6001806000828254019250508190555060006001549050336107076114ac565b600881905550610715611141565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107e25761075881610589565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008311610858576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f43616e6e6f74207769746864726177203000000000000000000000000000000081525060200191505060405180910390fd5b61086d83600b54611a1790919063ffffffff16565b600b819055506108c583600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1790919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109553384600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c3d9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5846040518082815260200191505060405180910390a2506001548114610a1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b5050565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806120ad602a913960400191505060405180910390fd5b6000610ad46114ac565b600881905550610ae2611141565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610baf57610b2581610589565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6004544210610bd857610bcd60065483611b2690919063ffffffff16565b600581905550610c3a565b6000610bef42600454611a1790919063ffffffff16565b90506000610c0860055483611aa090919063ffffffff16565b9050610c31600654610c238387611bb590919063ffffffff16565b611b2690919063ffffffff16565b60058190555050505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610cdb57600080fd5b505afa158015610cef573d6000803e3d6000fd5b505050506040513d6020811015610d0557600080fd5b81019080805190602001909291905050509050610d2d60065482611b2690919063ffffffff16565b6005541115610da4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f50726f76696465642072657761726420746f6f2068696768000000000000000081525060200191505060405180910390fd5b42600781905550610dc060065442611bb590919063ffffffff16565b6004819055507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d836040518082815260200191505060405180910390a1505050565b600180600082825401925050819055506000600154905033610e226114ac565b600881905550610e30611141565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610efd57610e7381610589565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561102b576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fdc3382600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c3d9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040518082815260200191505060405180910390a25b505060015481146110a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600061114f42600454611d0e565b905090565b60096020528060005260406000206000915090505481565b60018060008282540192505081905550600060015490503361118c6114ac565b60088190555061119a611141565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611267576111dd81610589565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600083116112dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f43616e6e6f74207374616b65203000000000000000000000000000000000000081525060200191505060405180910390fd5b6112f283600b54611bb590919063ffffffff16565b600b8190555061134a83600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bb590919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113dc333085600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611d27909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d846040518082815260200191505060405180910390a25060015481146114a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b5050565b60075481565b600080600b5414156114c2576008549050611537565b611534611523600b54611515670de0b6b3a76400006115076005546114f96007546114eb611141565b611a1790919063ffffffff16565b611aa090919063ffffffff16565b611aa090919063ffffffff16565b611b2690919063ffffffff16565b600854611bb590919063ffffffff16565b90505b90565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b6115ae600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106e7565b6115b6610e02565b565b60045481565b6001806000828254019250508190555060006001549050336115de6114ac565b6008819055506115ec611141565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146116b95761162f81610589565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000871161172f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f43616e6e6f74207374616b65203000000000000000000000000000000000000081525060200191505060405180910390fd5b61174487600b54611bb590919063ffffffff16565b600b8190555061179c87600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bb590919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf33308a8a8a8a8a6040518863ffffffff1660e01b8152600401808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018460ff1660ff168152602001838152602001828152602001975050505050505050600060405180830381600087803b1580156118e257600080fd5b505af11580156118f6573d6000803e3d6000fd5b50505050611949333089600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611d27909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d886040518082815260200191505060405180910390a2506001548114611a0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b505050505050565b600082821115611a8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b600080831415611ab35760009050611b20565b6000828402905082848281611ac457fe5b0414611b1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061208c6021913960400191505060405180910390fd5b809150505b92915050565b6000808211611b9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b6000828481611ba857fe5b0490508091505092915050565b600080828401905083811015611c33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b611d09838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e2d565b505050565b6000818310611d1d5781611d1f565b825b905092915050565b611e27848573ffffffffffffffffffffffffffffffffffffffff166323b872dd905060e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e2d565b50505050565b611e4c8273ffffffffffffffffffffffffffffffffffffffff16612078565b611ebe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b60208310611f0d5780518252602082019150602081019050602083039250611eea565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611f6f576040519150601f19603f3d011682016040523d82523d6000602084013e611f74565b606091505b509150915081611fec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b6000815111156120725780806020019051602081101561200b57600080fd5b8101908080519060200190929190505050612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806120d7602a913960400191505060405180910390fd5b5b50505050565b600080823b90506000811191505091905056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743616c6c6572206973206e6f742052657761726473446973747269627574696f6e20636f6e74726163745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a72315820790d3c5fd2c31612d031e4c8aab3004d236b64a0e45c836b8f8e71536f54eea764736f6c63430005100032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x4 SSTORE PUSH1 0x0 PUSH1 0x5 SSTORE PUSH1 0x0 PUSH1 0x6 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x228E CODESIZE SUB DUP1 PUSH2 0x228E DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH3 0x15180 DUP3 MUL PUSH1 0x6 DUP2 SWAP1 SSTORE POP DUP4 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP PUSH2 0x2135 DUP1 PUSH2 0x159 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x141 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B0A47EE GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xCD3DAF9D GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xCD3DAF9D EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0xD1AF0C7D EQ PUSH2 0x4A0 JUMPI DUP1 PUSH4 0xDF136D65 EQ PUSH2 0x4EA JUMPI DUP1 PUSH4 0xE9FAD8EE EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0xEBE2B12B EQ PUSH2 0x512 JUMPI DUP1 PUSH4 0xECD9BA82 EQ PUSH2 0x530 JUMPI PUSH2 0x141 JUMP JUMPDEST DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x3C0 JUMPI DUP1 PUSH4 0x8B876347 EQ PUSH2 0x3DE JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0xC8F33C91 EQ PUSH2 0x464 JUMPI PUSH2 0x141 JUMP JUMPDEST DUP1 PUSH4 0x386A9525 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x386A9525 EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0x3C6B16AB EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x3D18B912 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x3FC6DF6E EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x358 JUMPI PUSH2 0x141 JUMP JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x1C1F78EB EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x232 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FE PUSH2 0x6BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21C PUSH2 0x6C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6E7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x268 PUSH2 0xA1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA25 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B4 PUSH2 0xE02 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BE PUSH2 0x10A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x342 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x360 PUSH2 0x1115 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AA PUSH2 0x113B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C8 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x420 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1154 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x462 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x116C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x46C PUSH2 0x14A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x48A PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A8 PUSH2 0x153A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F2 PUSH2 0x1560 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x510 PUSH2 0x1566 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x51A PUSH2 0x15B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x587 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x15BE JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x6A0 PUSH1 0xA PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x692 PUSH8 0xDE0B6B3A7640000 PUSH2 0x684 PUSH2 0x636 PUSH1 0x9 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x628 PUSH2 0x14AC JUMP JUMPDEST PUSH2 0x1A17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1AA0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1B26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E2 PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH2 0x1AA0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP CALLER PUSH2 0x707 PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0x715 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7E2 JUMPI PUSH2 0x758 DUP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 SLOAD PUSH1 0x9 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x858 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F742077697468647261772030000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x86D DUP4 PUSH1 0xB SLOAD PUSH2 0x1A17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB DUP2 SWAP1 SSTORE POP PUSH2 0x8C5 DUP4 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1A17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x955 CALLER DUP5 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C3D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 SLOAD DUP2 EQ PUSH2 0xA1B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xACA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20AD PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAD4 PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0xAE2 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBAF JUMPI PUSH2 0xB25 DUP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 SLOAD PUSH1 0x9 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x4 SLOAD TIMESTAMP LT PUSH2 0xBD8 JUMPI PUSH2 0xBCD PUSH1 0x6 SLOAD DUP4 PUSH2 0x1B26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 DUP2 SWAP1 SSTORE POP PUSH2 0xC3A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBEF TIMESTAMP PUSH1 0x4 SLOAD PUSH2 0x1A17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC08 PUSH1 0x5 SLOAD DUP4 PUSH2 0x1AA0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0xC31 PUSH1 0x6 SLOAD PUSH2 0xC23 DUP4 DUP8 PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1B26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 DUP2 SWAP1 SSTORE POP POP POP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCEF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH2 0xD2D PUSH1 0x6 SLOAD DUP3 PUSH2 0x1B26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 SLOAD GT ISZERO PUSH2 0xDA4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x50726F76696465642072657761726420746F6F20686967680000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH2 0xDC0 PUSH1 0x6 SLOAD TIMESTAMP PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0xDE88A922E0D3B88B24E9623EFEB464919C6BF9F66857A65E2BFCF2CE87A9433D DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP CALLER PUSH2 0xE22 PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0xE30 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEFD JUMPI PUSH2 0xE73 DUP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 SLOAD PUSH1 0x9 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x102B JUMPI PUSH1 0x0 PUSH1 0xA PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xFDC CALLER DUP3 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C3D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE2403640BA68FED3A2F88B7557551D1993F84B99BB10FF833F0CF8DB0C5E0486 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP PUSH1 0x1 SLOAD DUP2 EQ PUSH2 0x10A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114F TIMESTAMP PUSH1 0x4 SLOAD PUSH2 0x1D0E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP CALLER PUSH2 0x118C PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0x119A PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1267 JUMPI PUSH2 0x11DD DUP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 SLOAD PUSH1 0x9 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x12DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F74207374616B652030000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12F2 DUP4 PUSH1 0xB SLOAD PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB DUP2 SWAP1 SSTORE POP PUSH2 0x134A DUP4 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x13DC CALLER ADDRESS DUP6 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1D27 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 SLOAD DUP2 EQ PUSH2 0x14A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xB SLOAD EQ ISZERO PUSH2 0x14C2 JUMPI PUSH1 0x8 SLOAD SWAP1 POP PUSH2 0x1537 JUMP JUMPDEST PUSH2 0x1534 PUSH2 0x1523 PUSH1 0xB SLOAD PUSH2 0x1515 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1507 PUSH1 0x5 SLOAD PUSH2 0x14F9 PUSH1 0x7 SLOAD PUSH2 0x14EB PUSH2 0x1141 JUMP JUMPDEST PUSH2 0x1A17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1AA0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1AA0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1B26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15AE PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x6E7 JUMP JUMPDEST PUSH2 0x15B6 PUSH2 0xE02 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP CALLER PUSH2 0x15DE PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0x15EC PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16B9 JUMPI PUSH2 0x162F DUP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 SLOAD PUSH1 0x9 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 DUP8 GT PUSH2 0x172F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F74207374616B652030000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1744 DUP8 PUSH1 0xB SLOAD PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB DUP2 SWAP1 SSTORE POP PUSH2 0x179C DUP8 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF CALLER ADDRESS DUP11 DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP8 POP POP POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1949 CALLER ADDRESS DUP10 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1D27 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D DUP9 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 SLOAD DUP2 EQ PUSH2 0x1A0F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1A8F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x1AB3 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1B20 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x1AC4 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1B1B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x208C PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1B9D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x1BA8 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1C33 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1D09 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB SWAP1 POP PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1E2D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1D1D JUMPI DUP2 PUSH2 0x1D1F JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1E27 DUP5 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD SWAP1 POP PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1E2D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1E4C DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2078 JUMP JUMPDEST PUSH2 0x1EBE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5361666545524332303A2063616C6C20746F206E6F6E2D636F6E747261637400 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1F0D JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x1EEA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F6F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F74 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1FEC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x2072 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x200B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2071 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20D7 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP INVALID MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F7743616C6C6572206973 KECCAK256 PUSH15 0x6F7420526577617264734469737472 PUSH10 0x627574696F6E20636F6E PUSH21 0x726163745361666545524332303A20455243323020 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A265627A7A72315820790D3C5FD2 0xC3 AND SLT 0xD0 BALANCE 0xE4 0xC8 0xAA 0xB3 STOP 0x4D 0x23 PUSH12 0x64A0E45C836B8F8E71536F54 0xEE 0xA7 PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
							"sourceMap": "414:6075:8:-;;;730:1;700:31;;765:1;737:29;;805:6;772:39;;1137:409;8:9:-1;5:2;;;30:1;27;20:12;5:2;1137:409:8;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1137:409:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;884:1:6;868:13;:17;;;;1349:13:8;1327:12;;:36;;;;;;;;;;;;;;;;;;1395:13;1373:12;;:36;;;;;;;;;;;;;;;;;;1456:6;1437:16;:25;1419:15;:43;;;;1519:20;1497:19;;:42;;;;;;;;;;;;;;;;;;1137:409;;;;414:6075;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101415760003560e01c80637b0a47ee116100b8578063cd3daf9d1161007c578063cd3daf9d14610482578063d1af0c7d146104a0578063df136d65146104ea578063e9fad8ee14610508578063ebe2b12b14610512578063ecd9ba821461053057610141565b80637b0a47ee146103a257806380faa57d146103c05780638b876347146103de578063a694fc3a14610436578063c8f33c911461046457610141565b8063386a95251161010a578063386a9525146102605780633c6b16ab1461027e5780633d18b912146102ac5780633fc6df6e146102b657806370a082311461030057806372f702f31461035857610141565b80628cc262146101465780630700037d1461019e57806318160ddd146101f65780631c1f78eb146102145780632e1a7d4d14610232575b600080fd5b6101886004803603602081101561015c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610589565b6040518082815260200191505060405180910390f35b6101e0600480360360208110156101b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106a7565b6040518082815260200191505060405180910390f35b6101fe6106bf565b6040518082815260200191505060405180910390f35b61021c6106c9565b6040518082815260200191505060405180910390f35b61025e6004803603602081101561024857600080fd5b81019080803590602001909291905050506106e7565b005b610268610a1f565b6040518082815260200191505060405180910390f35b6102aa6004803603602081101561029457600080fd5b8101908080359060200190929190505050610a25565b005b6102b4610e02565b005b6102be6110a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103426004803603602081101561031657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110cc565b6040518082815260200191505060405180910390f35b610360611115565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103aa61113b565b6040518082815260200191505060405180910390f35b6103c8611141565b6040518082815260200191505060405180910390f35b610420600480360360208110156103f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611154565b6040518082815260200191505060405180910390f35b6104626004803603602081101561044c57600080fd5b810190808035906020019092919050505061116c565b005b61046c6114a6565b6040518082815260200191505060405180910390f35b61048a6114ac565b6040518082815260200191505060405180910390f35b6104a861153a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104f2611560565b6040518082815260200191505060405180910390f35b610510611566565b005b61051a6115b8565b6040518082815260200191505060405180910390f35b610587600480360360a081101561054657600080fd5b810190808035906020019092919080359060200190929190803560ff16906020019092919080359060200190929190803590602001909291905050506115be565b005b60006106a0600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610692670de0b6b3a7640000610684610636600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106286114ac565b611a1790919063ffffffff16565b600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aa090919063ffffffff16565b611b2690919063ffffffff16565b611bb590919063ffffffff16565b9050919050565b600a6020528060005260406000206000915090505481565b6000600b54905090565b60006106e2600654600554611aa090919063ffffffff16565b905090565b6001806000828254019250508190555060006001549050336107076114ac565b600881905550610715611141565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107e25761075881610589565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008311610858576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f43616e6e6f74207769746864726177203000000000000000000000000000000081525060200191505060405180910390fd5b61086d83600b54611a1790919063ffffffff16565b600b819055506108c583600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1790919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109553384600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c3d9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5846040518082815260200191505060405180910390a2506001548114610a1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b5050565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806120ad602a913960400191505060405180910390fd5b6000610ad46114ac565b600881905550610ae2611141565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610baf57610b2581610589565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6004544210610bd857610bcd60065483611b2690919063ffffffff16565b600581905550610c3a565b6000610bef42600454611a1790919063ffffffff16565b90506000610c0860055483611aa090919063ffffffff16565b9050610c31600654610c238387611bb590919063ffffffff16565b611b2690919063ffffffff16565b60058190555050505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610cdb57600080fd5b505afa158015610cef573d6000803e3d6000fd5b505050506040513d6020811015610d0557600080fd5b81019080805190602001909291905050509050610d2d60065482611b2690919063ffffffff16565b6005541115610da4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f50726f76696465642072657761726420746f6f2068696768000000000000000081525060200191505060405180910390fd5b42600781905550610dc060065442611bb590919063ffffffff16565b6004819055507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d836040518082815260200191505060405180910390a1505050565b600180600082825401925050819055506000600154905033610e226114ac565b600881905550610e30611141565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610efd57610e7381610589565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561102b576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fdc3382600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c3d9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040518082815260200191505060405180910390a25b505060015481146110a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600061114f42600454611d0e565b905090565b60096020528060005260406000206000915090505481565b60018060008282540192505081905550600060015490503361118c6114ac565b60088190555061119a611141565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611267576111dd81610589565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600083116112dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f43616e6e6f74207374616b65203000000000000000000000000000000000000081525060200191505060405180910390fd5b6112f283600b54611bb590919063ffffffff16565b600b8190555061134a83600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bb590919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113dc333085600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611d27909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d846040518082815260200191505060405180910390a25060015481146114a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b5050565b60075481565b600080600b5414156114c2576008549050611537565b611534611523600b54611515670de0b6b3a76400006115076005546114f96007546114eb611141565b611a1790919063ffffffff16565b611aa090919063ffffffff16565b611aa090919063ffffffff16565b611b2690919063ffffffff16565b600854611bb590919063ffffffff16565b90505b90565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b6115ae600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106e7565b6115b6610e02565b565b60045481565b6001806000828254019250508190555060006001549050336115de6114ac565b6008819055506115ec611141565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146116b95761162f81610589565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000871161172f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f43616e6e6f74207374616b65203000000000000000000000000000000000000081525060200191505060405180910390fd5b61174487600b54611bb590919063ffffffff16565b600b8190555061179c87600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bb590919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf33308a8a8a8a8a6040518863ffffffff1660e01b8152600401808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018460ff1660ff168152602001838152602001828152602001975050505050505050600060405180830381600087803b1580156118e257600080fd5b505af11580156118f6573d6000803e3d6000fd5b50505050611949333089600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611d27909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d886040518082815260200191505060405180910390a2506001548114611a0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b505050505050565b600082821115611a8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b600080831415611ab35760009050611b20565b6000828402905082848281611ac457fe5b0414611b1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061208c6021913960400191505060405180910390fd5b809150505b92915050565b6000808211611b9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b6000828481611ba857fe5b0490508091505092915050565b600080828401905083811015611c33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b611d09838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e2d565b505050565b6000818310611d1d5781611d1f565b825b905092915050565b611e27848573ffffffffffffffffffffffffffffffffffffffff166323b872dd905060e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e2d565b50505050565b611e4c8273ffffffffffffffffffffffffffffffffffffffff16612078565b611ebe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b60208310611f0d5780518252602082019150602081019050602083039250611eea565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611f6f576040519150601f19603f3d011682016040523d82523d6000602084013e611f74565b606091505b509150915081611fec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b6000815111156120725780806020019051602081101561200b57600080fd5b8101908080519060200190929190505050612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806120d7602a913960400191505060405180910390fd5b5b50505050565b600080823b90506000811191505091905056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743616c6c6572206973206e6f742052657761726473446973747269627574696f6e20636f6e74726163745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a72315820790d3c5fd2c31612d031e4c8aab3004d236b64a0e45c836b8f8e71536f54eea764736f6c63430005100032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x141 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B0A47EE GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xCD3DAF9D GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xCD3DAF9D EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0xD1AF0C7D EQ PUSH2 0x4A0 JUMPI DUP1 PUSH4 0xDF136D65 EQ PUSH2 0x4EA JUMPI DUP1 PUSH4 0xE9FAD8EE EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0xEBE2B12B EQ PUSH2 0x512 JUMPI DUP1 PUSH4 0xECD9BA82 EQ PUSH2 0x530 JUMPI PUSH2 0x141 JUMP JUMPDEST DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x3C0 JUMPI DUP1 PUSH4 0x8B876347 EQ PUSH2 0x3DE JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0xC8F33C91 EQ PUSH2 0x464 JUMPI PUSH2 0x141 JUMP JUMPDEST DUP1 PUSH4 0x386A9525 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x386A9525 EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0x3C6B16AB EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x3D18B912 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x3FC6DF6E EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x358 JUMPI PUSH2 0x141 JUMP JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x1C1F78EB EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x232 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FE PUSH2 0x6BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21C PUSH2 0x6C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6E7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x268 PUSH2 0xA1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA25 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B4 PUSH2 0xE02 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BE PUSH2 0x10A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x342 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x360 PUSH2 0x1115 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AA PUSH2 0x113B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C8 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x420 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1154 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x462 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x116C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x46C PUSH2 0x14A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x48A PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A8 PUSH2 0x153A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F2 PUSH2 0x1560 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x510 PUSH2 0x1566 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x51A PUSH2 0x15B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x587 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x15BE JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x6A0 PUSH1 0xA PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x692 PUSH8 0xDE0B6B3A7640000 PUSH2 0x684 PUSH2 0x636 PUSH1 0x9 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x628 PUSH2 0x14AC JUMP JUMPDEST PUSH2 0x1A17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1AA0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1B26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E2 PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH2 0x1AA0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP CALLER PUSH2 0x707 PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0x715 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7E2 JUMPI PUSH2 0x758 DUP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 SLOAD PUSH1 0x9 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x858 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F742077697468647261772030000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x86D DUP4 PUSH1 0xB SLOAD PUSH2 0x1A17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB DUP2 SWAP1 SSTORE POP PUSH2 0x8C5 DUP4 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1A17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x955 CALLER DUP5 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C3D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 SLOAD DUP2 EQ PUSH2 0xA1B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xACA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20AD PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAD4 PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0xAE2 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBAF JUMPI PUSH2 0xB25 DUP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 SLOAD PUSH1 0x9 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x4 SLOAD TIMESTAMP LT PUSH2 0xBD8 JUMPI PUSH2 0xBCD PUSH1 0x6 SLOAD DUP4 PUSH2 0x1B26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 DUP2 SWAP1 SSTORE POP PUSH2 0xC3A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBEF TIMESTAMP PUSH1 0x4 SLOAD PUSH2 0x1A17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC08 PUSH1 0x5 SLOAD DUP4 PUSH2 0x1AA0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0xC31 PUSH1 0x6 SLOAD PUSH2 0xC23 DUP4 DUP8 PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1B26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 DUP2 SWAP1 SSTORE POP POP POP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCEF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH2 0xD2D PUSH1 0x6 SLOAD DUP3 PUSH2 0x1B26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 SLOAD GT ISZERO PUSH2 0xDA4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x50726F76696465642072657761726420746F6F20686967680000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH2 0xDC0 PUSH1 0x6 SLOAD TIMESTAMP PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0xDE88A922E0D3B88B24E9623EFEB464919C6BF9F66857A65E2BFCF2CE87A9433D DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP CALLER PUSH2 0xE22 PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0xE30 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEFD JUMPI PUSH2 0xE73 DUP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 SLOAD PUSH1 0x9 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x102B JUMPI PUSH1 0x0 PUSH1 0xA PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xFDC CALLER DUP3 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C3D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE2403640BA68FED3A2F88B7557551D1993F84B99BB10FF833F0CF8DB0C5E0486 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP PUSH1 0x1 SLOAD DUP2 EQ PUSH2 0x10A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114F TIMESTAMP PUSH1 0x4 SLOAD PUSH2 0x1D0E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP CALLER PUSH2 0x118C PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0x119A PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1267 JUMPI PUSH2 0x11DD DUP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 SLOAD PUSH1 0x9 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x12DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F74207374616B652030000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12F2 DUP4 PUSH1 0xB SLOAD PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB DUP2 SWAP1 SSTORE POP PUSH2 0x134A DUP4 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x13DC CALLER ADDRESS DUP6 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1D27 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 SLOAD DUP2 EQ PUSH2 0x14A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xB SLOAD EQ ISZERO PUSH2 0x14C2 JUMPI PUSH1 0x8 SLOAD SWAP1 POP PUSH2 0x1537 JUMP JUMPDEST PUSH2 0x1534 PUSH2 0x1523 PUSH1 0xB SLOAD PUSH2 0x1515 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1507 PUSH1 0x5 SLOAD PUSH2 0x14F9 PUSH1 0x7 SLOAD PUSH2 0x14EB PUSH2 0x1141 JUMP JUMPDEST PUSH2 0x1A17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1AA0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1AA0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1B26 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15AE PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x6E7 JUMP JUMPDEST PUSH2 0x15B6 PUSH2 0xE02 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP CALLER PUSH2 0x15DE PUSH2 0x14AC JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0x15EC PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16B9 JUMPI PUSH2 0x162F DUP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 SLOAD PUSH1 0x9 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 DUP8 GT PUSH2 0x172F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F74207374616B652030000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1744 DUP8 PUSH1 0xB SLOAD PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB DUP2 SWAP1 SSTORE POP PUSH2 0x179C DUP8 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1BB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF CALLER ADDRESS DUP11 DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP8 POP POP POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1949 CALLER ADDRESS DUP10 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1D27 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D DUP9 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 SLOAD DUP2 EQ PUSH2 0x1A0F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1A8F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x1AB3 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1B20 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x1AC4 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1B1B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x208C PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1B9D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x1BA8 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1C33 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1D09 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB SWAP1 POP PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1E2D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1D1D JUMPI DUP2 PUSH2 0x1D1F JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1E27 DUP5 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD SWAP1 POP PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1E2D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1E4C DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2078 JUMP JUMPDEST PUSH2 0x1EBE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5361666545524332303A2063616C6C20746F206E6F6E2D636F6E747261637400 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1F0D JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x1EEA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F6F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F74 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1FEC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x2072 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x200B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2071 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20D7 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP INVALID MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F7743616C6C6572206973 KECCAK256 PUSH15 0x6F7420526577617264734469737472 PUSH10 0x627574696F6E20636F6E PUSH21 0x726163745361666545524332303A20455243323020 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A265627A7A72315820790D3C5FD2 0xC3 AND SLT 0xD0 BALANCE 0xE4 0xC8 0xAA 0xB3 STOP 0x4D 0x23 PUSH12 0x64A0E45C836B8F8E71536F54 0xEE 0xA7 PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
							"sourceMap": "414:6075:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;414:6075:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2351:259;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2351:259:8;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;957:42;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;957:42:8;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1591:91;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2616:119;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3887:379;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3887:379:8;;;;;;;;;;;;;;;;;:::i;:::-;;772:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4732:1129;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4732:1129:8;;;;;;;;;;;;;;;;;:::i;:::-;;4272:300;;;:::i;:::-;;69:34:7;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1688:110:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1688:110:8;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;668:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;737:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1804:129;;;:::i;:::-;;;;;;;;;;;;;;;;;;;894:57;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;894:57:8;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3490:391;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3490:391:8;;;;;;;;;;;;;;;;;:::i;:::-;;817:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1939:406;;;:::i;:::-;;;;;;;;;;;;;;;;;;;636:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;852:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4578:94;;;:::i;:::-;;700:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2793:691;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;2793:691:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2351:259;2405:7;2443:160;2586:7;:16;2594:7;2586:16;;;;;;;;;;;;;;;;2443:121;2559:4;2443:94;2483:53;2504:22;:31;2527:7;2504:31;;;;;;;;;;;;;;;;2483:16;:14;:16::i;:::-;:20;;:53;;;;:::i;:::-;2443:9;:18;2453:7;2443:18;;;;;;;;;;;;;;;;:39;;:94;;;;:::i;:::-;:115;;:121;;;;:::i;:::-;:142;;:160;;;;:::i;:::-;2424:179;;2351:259;;;:::o;957:42::-;;;;;;;;;;;;;;;;;:::o;1591:91::-;1637:7;1663:12;;1656:19;;1591:91;:::o;2616:119::-;2671:7;2697:31;2712:15;;2697:10;;:14;;:31;;;;:::i;:::-;2690:38;;2616:119;:::o;3887:379::-;1318:1:6;1301:13;;:18;;;;;;;;;;;1329:20;1352:13;;1329:36;;3978:10:8;5982:16;:14;:16::i;:::-;5959:20;:39;;;;6025:26;:24;:26::i;:::-;6008:14;:43;;;;6084:1;6065:21;;:7;:21;;;6061:154;;6121:15;6128:7;6121:6;:15::i;:::-;6102:7;:16;6110:7;6102:16;;;;;;;;;;;;;;;:34;;;;6184:20;;6150:22;:31;6173:7;6150:31;;;;;;;;;;;;;;;:54;;;;6061:154;4021:1;4012:6;:10;4004:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4069:24;4086:6;4069:12;;:16;;:24;;;;:::i;:::-;4054:12;:39;;;;4127:33;4153:6;4127:9;:21;4137:10;4127:21;;;;;;;;;;;;;;;;:25;;:33;;;;:::i;:::-;4103:9;:21;4113:10;4103:21;;;;;;;;;;;;;;;:57;;;;4170:45;4196:10;4208:6;4170:12;;;;;;;;;;;:25;;;;:45;;;;;:::i;:::-;4240:10;4230:29;;;4252:6;4230:29;;;;;;;;;;;;;;;;;;1375:1:6;1410:13;;1394:12;:29;1386:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3887:379:8;;:::o;772:39::-;;;;:::o;4732:1129::-;249:19:7;;;;;;;;;;;235:33;;:10;:33;;;214:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4854:1:8;5982:16;:14;:16::i;:::-;5959:20;:39;;;;6025:26;:24;:26::i;:::-;6008:14;:43;;;;6084:1;6065:21;;:7;:21;;;6061:154;;6121:15;6128:7;6121:6;:15::i;:::-;6102:7;:16;6110:7;6102:16;;;;;;;;;;;;;;;:34;;;;6184:20;;6150:22;:31;6173:7;6150:31;;;;;;;;;;;;;;;:54;;;;6061:154;4895:12;;4876:15;:31;4872:312;;4936:27;4947:15;;4936:6;:10;;:27;;;;:::i;:::-;4923:10;:40;;;;4872:312;;;4994:17;5014:33;5031:15;5014:12;;:16;;:33;;;;:::i;:::-;4994:53;;5061:16;5080:25;5094:10;;5080:9;:13;;:25;;;;:::i;:::-;5061:44;;5132:41;5157:15;;5132:20;5143:8;5132:6;:10;;:20;;;;:::i;:::-;:24;;:41;;;;:::i;:::-;5119:10;:54;;;;4872:312;;;5538:15;5556:12;;;;;;;;;;;:22;;;5587:4;5556:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5556:37:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5556:37:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5556:37:8;;;;;;;;;;;;;;;;5538:55;;5638:28;5650:15;;5638:7;:11;;:28;;;;:::i;:::-;5624:10;;:42;;5603:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5744:15;5727:14;:32;;;;5784:36;5804:15;;5784;:19;;:36;;;;:::i;:::-;5769:12;:51;;;;5835:19;5847:6;5835:19;;;;;;;;;;;;;;;;;;6224:1;346::7;4732:1129:8;:::o;4272:300::-;1318:1:6;1301:13;;:18;;;;;;;;;;;1329:20;1352:13;;1329:36;;4326:10:8;5982:16;:14;:16::i;:::-;5959:20;:39;;;;6025:26;:24;:26::i;:::-;6008:14;:43;;;;6084:1;6065:21;;:7;:21;;;6061:154;;6121:15;6128:7;6121:6;:15::i;:::-;6102:7;:16;6110:7;6102:16;;;;;;;;;;;;;;;:34;;;;6184:20;;6150:22;:31;6173:7;6150:31;;;;;;;;;;;;;;;:54;;;;6061:154;4348:14;4365:7;:19;4373:10;4365:19;;;;;;;;;;;;;;;;4348:36;;4407:1;4398:6;:10;4394:172;;;4446:1;4424:7;:19;4432:10;4424:19;;;;;;;;;;;;;;;:23;;;;4461:45;4487:10;4499:6;4461:12;;;;;;;;;;;:25;;;;:45;;;;;:::i;:::-;4536:10;4525:30;;;4548:6;4525:30;;;;;;;;;;;;;;;;;;4394:172;6224:1;1375::6;1410:13;;1394:12;:29;1386:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4272:300:8;:::o;69:34:7:-;;;;;;;;;;;;;:::o;1688:110:8:-;1747:7;1773:9;:18;1783:7;1773:18;;;;;;;;;;;;;;;;1766:25;;1688:110;;;:::o;668:26::-;;;;;;;;;;;;;:::o;737:29::-;;;;:::o;1804:129::-;1861:7;1887:39;1896:15;1913:12;;1887:8;:39::i;:::-;1880:46;;1804:129;:::o;894:57::-;;;;;;;;;;;;;;;;;:::o;3490:391::-;1318:1:6;1301:13;;:18;;;;;;;;;;;1329:20;1352:13;;1329:36;;3580:10:8;5982:16;:14;:16::i;:::-;5959:20;:39;;;;6025:26;:24;:26::i;:::-;6008:14;:43;;;;6084:1;6065:21;;:7;:21;;;6061:154;;6121:15;6128:7;6121:6;:15::i;:::-;6102:7;:16;6110:7;6102:16;;;;;;;;;;;;;;;:34;;;;6184:20;;6150:22;:31;6173:7;6150:31;;;;;;;;;;;;;;;:54;;;;6061:154;3623:1;3614:6;:10;3606:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3668:24;3685:6;3668:12;;:16;;:24;;;;:::i;:::-;3653:12;:39;;;;3726:33;3752:6;3726:9;:21;3736:10;3726:21;;;;;;;;;;;;;;;;:25;;:33;;;;:::i;:::-;3702:9;:21;3712:10;3702:21;;;;;;;;;;;;;;;:57;;;;3769:64;3799:10;3819:4;3826:6;3769:12;;;;;;;;;;;:29;;;;:64;;;;;;:::i;:::-;3855:10;3848:26;;;3867:6;3848:26;;;;;;;;;;;;;;;;;;1375:1:6;1410:13;;1394:12;:29;1386:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3490:391:8;;:::o;817:29::-;;;;:::o;1939:406::-;1986:7;2025:1;2009:12;;:17;2005:75;;;2049:20;;2042:27;;;;2005:75;2108:230;2150:174;2311:12;;2150:135;2280:4;2150:104;2243:10;;2150:67;2202:14;;2150:26;:24;:26::i;:::-;:51;;:67;;;;:::i;:::-;:92;;:104;;;;:::i;:::-;:129;;:135;;;;:::i;:::-;:160;;:174;;;;:::i;:::-;2108:20;;:24;;:230;;;;:::i;:::-;2089:249;;1939:406;;:::o;636:26::-;;;;;;;;;;;;;:::o;852:35::-;;;;:::o;4578:94::-;4613:31;4622:9;:21;4632:10;4622:21;;;;;;;;;;;;;;;;4613:8;:31::i;:::-;4654:11;:9;:11::i;:::-;4578:94::o;700:31::-;;;;:::o;2793:691::-;1318:1:6;1301:13;;:18;;;;;;;;;;;1329:20;1352:13;;1329:36;;2964:10:8;5982:16;:14;:16::i;:::-;5959:20;:39;;;;6025:26;:24;:26::i;:::-;6008:14;:43;;;;6084:1;6065:21;;:7;:21;;;6061:154;;6121:15;6128:7;6121:6;:15::i;:::-;6102:7;:16;6110:7;6102:16;;;;;;;;;;;;;;;:34;;;;6184:20;;6150:22;:31;6173:7;6150:31;;;;;;;;;;;;;;;:54;;;;6061:154;3003:1;2994:6;:10;2986:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3048:24;3065:6;3048:12;;:16;;:24;;;;:::i;:::-;3033:12;:39;;;;3106:33;3132:6;3106:9;:21;3116:10;3106:21;;;;;;;;;;;;;;;;:25;;:33;;;;:::i;:::-;3082:9;:21;3092:10;3082:21;;;;;;;;;;;;;;;:57;;;;3192:12;;;;;;;;;;;3168:45;;;3227:10;3259:4;3278:6;3298:8;3320:1;3335;3350;3168:193;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3168:193:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3168:193:8;;;;3372:64;3402:10;3422:4;3429:6;3372:12;;;;;;;;;;;:29;;;;:64;;;;;;:::i;:::-;3458:10;3451:26;;;3470:6;3451:26;;;;;;;;;;;;;;;;;;1375:1:6;1410:13;;1394:12;:29;1386:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2793:691:8;;;;;;:::o;1274:179:1:-;1332:7;1364:1;1359;:6;;1351:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1410:9;1426:1;1422;:5;1410:17;;1445:1;1438:8;;;1274:179;;;;:::o;1693:459::-;1751:7;1997:1;1992;:6;1988:45;;;2021:1;2014:8;;;;1988:45;2043:9;2059:1;2055;:5;2043:17;;2087:1;2082;2078;:5;;;;;;:10;2070:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2144:1;2137:8;;;1693:459;;;;;:::o;2607:326::-;2665:7;2762:1;2758;:5;2750:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2804:9;2820:1;2816;:5;;;;;;2804:17;;2925:1;2918:8;;;2607:326;;;;:::o;834:176::-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;662:174:4:-;744:85;763:5;793;:14;;;:23;;;;818:2;822:5;770:58;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;770:58:4;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;770:58:4;744:18;:85::i;:::-;662:174;;;:::o;358:104:0:-;416:7;446:1;442;:5;:13;;454:1;442:13;;;450:1;442:13;435:20;;358:104;;;;:::o;842:202:4:-;942:95;961:5;991;:18;;;:27;;;;1020:4;1026:2;1030:5;968:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;968:68:4;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;968:68:4;942:18;:95::i;:::-;842:202;;;;:::o;2621:1095::-;3216:27;3224:5;3216:25;;;:27::i;:::-;3208:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3350:12;3364:23;3399:5;3391:19;;3411:4;3391:25;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3391:25:4;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3349:67:4;;;;3434:7;3426:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3513:1;3493:10;:17;:21;3489:221;;;3633:10;3622:30;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3622:30:4;;;;;;;;;;;;;;;;3614:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3489:221;2621:1095;;;;:::o;542:413:5:-;602:4;805:12;914:7;902:20;894:28;;947:1;940:4;:8;933:15;;;542:413;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1700200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"balanceOf(address)": "1307",
								"earned(address)": "infinite",
								"exit()": "infinite",
								"getReward()": "infinite",
								"getRewardForDuration()": "infinite",
								"lastTimeRewardApplicable()": "1139",
								"lastUpdateTime()": "1116",
								"notifyRewardAmount(uint256)": "infinite",
								"periodFinish()": "1115",
								"rewardPerToken()": "infinite",
								"rewardPerTokenStored()": "1071",
								"rewardRate()": "1028",
								"rewards(address)": "1215",
								"rewardsDistribution()": "1142",
								"rewardsDuration()": "1028",
								"rewardsToken()": "1097",
								"stake(uint256)": "infinite",
								"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"stakingToken()": "1186",
								"totalSupply()": "1081",
								"userRewardPerTokenPaid(address)": "1236",
								"withdraw(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 414,
									"end": 6489,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 414,
									"end": 6489,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 414,
									"end": 6489,
									"name": "MSTORE"
								},
								{
									"begin": 730,
									"end": 731,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 700,
									"end": 731,
									"name": "PUSH",
									"value": "4"
								},
								{
									"begin": 700,
									"end": 731,
									"name": "SSTORE"
								},
								{
									"begin": 765,
									"end": 766,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 737,
									"end": 766,
									"name": "PUSH",
									"value": "5"
								},
								{
									"begin": 737,
									"end": 766,
									"name": "SSTORE"
								},
								{
									"begin": 805,
									"end": 811,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 772,
									"end": 811,
									"name": "PUSH",
									"value": "6"
								},
								{
									"begin": 772,
									"end": 811,
									"name": "SSTORE"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "POP"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "MLOAD"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "PUSHSIZE"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "CODESIZE"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SUB"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "DUP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "PUSHSIZE"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "DUP4"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "CODECOPY"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "DUP2"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "DUP2"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "ADD"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "MSTORE"
								},
								{
									"begin": 13,
									"end": 16,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 8,
									"end": 11,
									"name": "DUP2"
								},
								{
									"begin": 5,
									"end": 17,
									"name": "LT"
								},
								{
									"begin": 2,
									"end": 4,
									"name": "ISZERO"
								},
								{
									"begin": 2,
									"end": 4,
									"name": "PUSH [tag]",
									"value": "2"
								},
								{
									"begin": 2,
									"end": 4,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 2,
									"end": 4,
									"name": "tag",
									"value": "2"
								},
								{
									"begin": 2,
									"end": 4,
									"name": "JUMPDEST"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "DUP2"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "ADD"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "DUP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "DUP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "MLOAD"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "ADD"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP3"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP2"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "DUP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "MLOAD"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "ADD"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP3"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP2"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "DUP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "MLOAD"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "ADD"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP3"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP2"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "DUP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "MLOAD"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "ADD"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP3"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP2"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "SWAP1"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "POP"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "POP"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "POP"
								},
								{
									"begin": 884,
									"end": 885,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 868,
									"end": 881,
									"name": "DUP1"
								},
								{
									"begin": 868,
									"end": 885,
									"name": "DUP2"
								},
								{
									"begin": 868,
									"end": 885,
									"name": "SWAP1"
								},
								{
									"begin": 868,
									"end": 885,
									"name": "SSTORE"
								},
								{
									"begin": 868,
									"end": 885,
									"name": "POP"
								},
								{
									"begin": 1349,
									"end": 1362,
									"name": "DUP3"
								},
								{
									"begin": 1327,
									"end": 1339,
									"name": "PUSH",
									"value": "2"
								},
								{
									"begin": 1327,
									"end": 1339,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "EXP"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "DUP2"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "SLOAD"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "DUP2"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "MUL"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "NOT"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "AND"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "SWAP1"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "DUP4"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "AND"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "MUL"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "OR"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "SWAP1"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "SSTORE"
								},
								{
									"begin": 1327,
									"end": 1363,
									"name": "POP"
								},
								{
									"begin": 1395,
									"end": 1408,
									"name": "DUP1"
								},
								{
									"begin": 1373,
									"end": 1385,
									"name": "PUSH",
									"value": "3"
								},
								{
									"begin": 1373,
									"end": 1385,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "EXP"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "DUP2"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "SLOAD"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "DUP2"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "MUL"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "NOT"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "AND"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "SWAP1"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "DUP4"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "AND"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "MUL"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "OR"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "SWAP1"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "SSTORE"
								},
								{
									"begin": 1373,
									"end": 1409,
									"name": "POP"
								},
								{
									"begin": 1456,
									"end": 1462,
									"name": "PUSH",
									"value": "15180"
								},
								{
									"begin": 1437,
									"end": 1453,
									"name": "DUP3"
								},
								{
									"begin": 1437,
									"end": 1462,
									"name": "MUL"
								},
								{
									"begin": 1419,
									"end": 1434,
									"name": "PUSH",
									"value": "6"
								},
								{
									"begin": 1419,
									"end": 1462,
									"name": "DUP2"
								},
								{
									"begin": 1419,
									"end": 1462,
									"name": "SWAP1"
								},
								{
									"begin": 1419,
									"end": 1462,
									"name": "SSTORE"
								},
								{
									"begin": 1419,
									"end": 1462,
									"name": "POP"
								},
								{
									"begin": 1519,
									"end": 1539,
									"name": "DUP4"
								},
								{
									"begin": 1497,
									"end": 1516,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 1497,
									"end": 1516,
									"name": "DUP1"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "EXP"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "DUP2"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "SLOAD"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "DUP2"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "MUL"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "NOT"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "AND"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "SWAP1"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "DUP4"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "AND"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "MUL"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "OR"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "SWAP1"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "SSTORE"
								},
								{
									"begin": 1497,
									"end": 1539,
									"name": "POP"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "POP"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "POP"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "POP"
								},
								{
									"begin": 1137,
									"end": 1546,
									"name": "POP"
								},
								{
									"begin": 414,
									"end": 6489,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 414,
									"end": 6489,
									"name": "DUP1"
								},
								{
									"begin": 414,
									"end": 6489,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 414,
									"end": 6489,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 414,
									"end": 6489,
									"name": "CODECOPY"
								},
								{
									"begin": 414,
									"end": 6489,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 414,
									"end": 6489,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a72315820790d3c5fd2c31612d031e4c8aab3004d236b64a0e45c836b8f8e71536f54eea764736f6c63430005100032",
									".code": [
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "MSTORE"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "POP"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "LT"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "SHR"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "7B0A47EE"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "GT"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "CD3DAF9D"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "GT"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "26"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "CD3DAF9D"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "D1AF0C7D"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "DF136D65"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "E9FAD8EE"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "EBE2B12B"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "ECD9BA82"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMP"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "tag",
											"value": "26"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPDEST"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "7B0A47EE"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "80FAA57D"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "8B876347"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "A694FC3A"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "C8F33C91"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMP"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "tag",
											"value": "25"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPDEST"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "386A9525"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "GT"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "27"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "386A9525"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "3C6B16AB"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "3D18B912"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "3FC6DF6E"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "70A08231"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "72F702F3"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMP"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "tag",
											"value": "27"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPDEST"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "8CC262"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "700037D"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "18160DDD"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "1C1F78EB"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "2E1A7D4D"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "EQ"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPI"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "JUMPDEST"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "DUP1"
										},
										{
											"begin": 414,
											"end": 6489,
											"name": "REVERT"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "JUMPDEST"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "DUP1"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "29"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "29"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "DUP2"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "ADD"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SWAP1"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "DUP1"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "DUP1"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "AND"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SWAP1"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "ADD"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SWAP1"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SWAP3"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SWAP2"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SWAP1"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "POP"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "POP"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "POP"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "tag",
											"value": "28"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "JUMPDEST"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "MLOAD"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "DUP1"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "DUP3"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "DUP2"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "MSTORE"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "ADD"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SWAP2"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "POP"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "POP"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "MLOAD"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "DUP1"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SWAP2"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SUB"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SWAP1"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "RETURN"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "JUMPDEST"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "DUP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "32"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "32"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "DUP2"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "ADD"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SWAP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "DUP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "DUP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "AND"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SWAP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "ADD"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SWAP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SWAP3"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SWAP2"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SWAP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "POP"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "POP"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "POP"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH [tag]",
											"value": "33"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "tag",
											"value": "31"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "JUMPDEST"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "MLOAD"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "DUP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "DUP3"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "DUP2"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "MSTORE"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "ADD"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SWAP2"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "POP"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "POP"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "MLOAD"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "DUP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SWAP2"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SUB"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SWAP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "RETURN"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "JUMPDEST"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "PUSH [tag]",
											"value": "34"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "PUSH [tag]",
											"value": "35"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "tag",
											"value": "34"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "JUMPDEST"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "MLOAD"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "DUP1"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "DUP3"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "DUP2"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "MSTORE"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "ADD"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "SWAP2"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "POP"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "POP"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "MLOAD"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "DUP1"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "SWAP2"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "SUB"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "SWAP1"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "RETURN"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "JUMPDEST"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "PUSH [tag]",
											"value": "36"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "PUSH [tag]",
											"value": "37"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "tag",
											"value": "36"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "JUMPDEST"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "MLOAD"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "DUP1"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "DUP3"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "DUP2"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "MSTORE"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "ADD"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "SWAP2"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "POP"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "POP"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "MLOAD"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "DUP1"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "SWAP2"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "SUB"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "SWAP1"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "RETURN"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "JUMPDEST"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "PUSH [tag]",
											"value": "38"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "DUP1"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "39"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "39"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "DUP2"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "ADD"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "SWAP1"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "DUP1"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "DUP1"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "SWAP1"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "ADD"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "SWAP1"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "SWAP3"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "SWAP2"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "SWAP1"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "POP"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "POP"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "POP"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "PUSH [tag]",
											"value": "40"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "tag",
											"value": "38"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "JUMPDEST"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "STOP"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "JUMPDEST"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "PUSH [tag]",
											"value": "41"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "tag",
											"value": "41"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "JUMPDEST"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "MLOAD"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "DUP1"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "DUP3"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "DUP2"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "MSTORE"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "ADD"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "SWAP2"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "POP"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "POP"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "MLOAD"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "DUP1"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "SWAP2"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "SUB"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "SWAP1"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "RETURN"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "JUMPDEST"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "PUSH [tag]",
											"value": "43"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "DUP1"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "44"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "44"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "DUP2"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "ADD"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "SWAP1"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "DUP1"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "DUP1"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "SWAP1"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "ADD"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "SWAP1"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "SWAP3"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "SWAP2"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "SWAP1"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "POP"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "POP"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "POP"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "PUSH [tag]",
											"value": "45"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "tag",
											"value": "43"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "JUMPDEST"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "STOP"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "JUMPDEST"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "PUSH [tag]",
											"value": "46"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "PUSH [tag]",
											"value": "47"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "tag",
											"value": "46"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "JUMPDEST"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "STOP"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "JUMPDEST"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "PUSH [tag]",
											"value": "48"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "PUSH [tag]",
											"value": "49"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "tag",
											"value": "48"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "JUMPDEST"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "MLOAD"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "DUP1"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "DUP3"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "AND"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "AND"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "DUP2"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "ADD"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "SWAP2"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "POP"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "POP"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "MLOAD"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "DUP1"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "SWAP2"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "SUB"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "SWAP1"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "RETURN"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "JUMPDEST"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "PUSH [tag]",
											"value": "50"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "DUP1"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "51"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "51"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "DUP2"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "ADD"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SWAP1"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "DUP1"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "DUP1"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "AND"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SWAP1"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "ADD"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SWAP1"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SWAP3"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SWAP2"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SWAP1"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "POP"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "POP"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "POP"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "PUSH [tag]",
											"value": "52"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "tag",
											"value": "50"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "JUMPDEST"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "MLOAD"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "DUP1"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "DUP3"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "DUP2"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "MSTORE"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "ADD"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SWAP2"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "POP"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "POP"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "MLOAD"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "DUP1"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SWAP2"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SUB"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SWAP1"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "RETURN"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "JUMPDEST"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "PUSH [tag]",
											"value": "53"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "PUSH [tag]",
											"value": "54"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "tag",
											"value": "53"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "JUMPDEST"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "MLOAD"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "DUP1"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "DUP3"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "AND"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "AND"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "DUP2"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "MSTORE"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "ADD"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "SWAP2"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "POP"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "POP"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "MLOAD"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "DUP1"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "SWAP2"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "SUB"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "SWAP1"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "RETURN"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "JUMPDEST"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "PUSH [tag]",
											"value": "55"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "PUSH [tag]",
											"value": "56"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "tag",
											"value": "55"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "JUMPDEST"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "MLOAD"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "DUP1"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "DUP3"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "DUP2"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "MSTORE"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "ADD"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "SWAP2"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "POP"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "POP"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "MLOAD"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "DUP1"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "SWAP2"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "SUB"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "SWAP1"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "RETURN"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "JUMPDEST"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "PUSH [tag]",
											"value": "57"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "PUSH [tag]",
											"value": "58"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "tag",
											"value": "57"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "JUMPDEST"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "MLOAD"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "DUP1"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "DUP3"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "DUP2"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "MSTORE"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "ADD"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "SWAP2"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "POP"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "POP"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "MLOAD"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "DUP1"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "SWAP2"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "SUB"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "SWAP1"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "RETURN"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "JUMPDEST"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH [tag]",
											"value": "59"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "DUP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "60"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "60"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "DUP2"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "ADD"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SWAP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "DUP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "DUP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "AND"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SWAP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "ADD"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SWAP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SWAP3"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SWAP2"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SWAP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "POP"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "POP"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "POP"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH [tag]",
											"value": "61"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "tag",
											"value": "59"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "JUMPDEST"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "MLOAD"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "DUP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "DUP3"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "DUP2"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "MSTORE"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "ADD"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SWAP2"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "POP"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "POP"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "MLOAD"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "DUP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SWAP2"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SUB"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SWAP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "RETURN"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "JUMPDEST"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "PUSH [tag]",
											"value": "62"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "DUP1"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "63"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "63"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "DUP2"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "ADD"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "SWAP1"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "DUP1"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "DUP1"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "SWAP1"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "ADD"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "SWAP1"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "SWAP3"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "SWAP2"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "SWAP1"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "POP"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "POP"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "POP"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "PUSH [tag]",
											"value": "64"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "tag",
											"value": "62"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "JUMPDEST"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "STOP"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "JUMPDEST"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "PUSH [tag]",
											"value": "65"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "PUSH [tag]",
											"value": "66"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "tag",
											"value": "65"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "JUMPDEST"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "MLOAD"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "DUP1"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "DUP3"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "DUP2"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "MSTORE"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "ADD"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "SWAP2"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "POP"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "POP"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "MLOAD"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "DUP1"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "SWAP2"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "SUB"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "SWAP1"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "RETURN"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "JUMPDEST"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "PUSH [tag]",
											"value": "67"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "tag",
											"value": "67"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "JUMPDEST"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "MLOAD"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "DUP1"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "DUP3"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "DUP2"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "MSTORE"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "ADD"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "SWAP2"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "POP"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "POP"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "MLOAD"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "DUP1"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "SWAP2"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "SUB"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "SWAP1"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "RETURN"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "JUMPDEST"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "PUSH [tag]",
											"value": "69"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "PUSH [tag]",
											"value": "70"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "tag",
											"value": "69"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "JUMPDEST"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "MLOAD"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "DUP1"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "DUP3"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "AND"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "AND"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "DUP2"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "MSTORE"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "ADD"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "SWAP2"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "POP"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "POP"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "MLOAD"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "DUP1"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "SWAP2"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "SUB"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "SWAP1"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "RETURN"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "JUMPDEST"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "PUSH [tag]",
											"value": "71"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "PUSH [tag]",
											"value": "72"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "tag",
											"value": "71"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "JUMPDEST"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "MLOAD"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "DUP1"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "DUP3"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "DUP2"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "MSTORE"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "ADD"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "SWAP2"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "POP"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "POP"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "MLOAD"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "DUP1"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "SWAP2"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "SUB"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "SWAP1"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "RETURN"
										},
										{
											"begin": 4578,
											"end": 4672,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 4578,
											"end": 4672,
											"name": "JUMPDEST"
										},
										{
											"begin": 4578,
											"end": 4672,
											"name": "PUSH [tag]",
											"value": "73"
										},
										{
											"begin": 4578,
											"end": 4672,
											"name": "PUSH [tag]",
											"value": "74"
										},
										{
											"begin": 4578,
											"end": 4672,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4578,
											"end": 4672,
											"name": "tag",
											"value": "73"
										},
										{
											"begin": 4578,
											"end": 4672,
											"name": "JUMPDEST"
										},
										{
											"begin": 4578,
											"end": 4672,
											"name": "STOP"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "JUMPDEST"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "PUSH [tag]",
											"value": "75"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "PUSH [tag]",
											"value": "76"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "tag",
											"value": "75"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "JUMPDEST"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "MLOAD"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "DUP1"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "DUP3"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "DUP2"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "MSTORE"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "ADD"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "SWAP2"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "POP"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "POP"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "MLOAD"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "DUP1"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "SWAP2"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "SUB"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "SWAP1"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "RETURN"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "tag",
											"value": "24"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "JUMPDEST"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "PUSH [tag]",
											"value": "77"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "DUP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 16,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 17,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "78"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "DUP2"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "ADD"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "DUP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "DUP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "ADD"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP3"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP2"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "DUP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "ADD"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP3"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP2"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "DUP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "AND"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "ADD"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP3"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP2"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "DUP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "ADD"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP3"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP2"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "DUP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "ADD"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP3"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP2"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "SWAP1"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "POP"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "POP"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "POP"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "PUSH [tag]",
											"value": "79"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "tag",
											"value": "77"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "JUMPDEST"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "STOP"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "tag",
											"value": "30"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "JUMPDEST"
										},
										{
											"begin": 2405,
											"end": 2412,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2443,
											"end": 2603,
											"name": "PUSH [tag]",
											"value": "81"
										},
										{
											"begin": 2586,
											"end": 2593,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2594,
											"end": 2601,
											"name": "DUP5"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "AND"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "AND"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "DUP2"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "MSTORE"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "ADD"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "SWAP1"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "DUP2"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "MSTORE"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "ADD"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "KECCAK256"
										},
										{
											"begin": 2586,
											"end": 2602,
											"name": "SLOAD"
										},
										{
											"begin": 2443,
											"end": 2564,
											"name": "PUSH [tag]",
											"value": "82"
										},
										{
											"begin": 2559,
											"end": 2563,
											"name": "PUSH",
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 2443,
											"end": 2537,
											"name": "PUSH [tag]",
											"value": "83"
										},
										{
											"begin": 2483,
											"end": 2536,
											"name": "PUSH [tag]",
											"value": "84"
										},
										{
											"begin": 2504,
											"end": 2526,
											"name": "PUSH",
											"value": "9"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2527,
											"end": 2534,
											"name": "DUP10"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "AND"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "AND"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "DUP2"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "MSTORE"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "ADD"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "SWAP1"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "DUP2"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "MSTORE"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "ADD"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "KECCAK256"
										},
										{
											"begin": 2504,
											"end": 2535,
											"name": "SLOAD"
										},
										{
											"begin": 2483,
											"end": 2499,
											"name": "PUSH [tag]",
											"value": "85"
										},
										{
											"begin": 2483,
											"end": 2497,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 2483,
											"end": 2499,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2483,
											"end": 2499,
											"name": "tag",
											"value": "85"
										},
										{
											"begin": 2483,
											"end": 2499,
											"name": "JUMPDEST"
										},
										{
											"begin": 2483,
											"end": 2503,
											"name": "PUSH [tag]",
											"value": "86"
										},
										{
											"begin": 2483,
											"end": 2503,
											"name": "SWAP1"
										},
										{
											"begin": 2483,
											"end": 2536,
											"name": "SWAP2"
										},
										{
											"begin": 2483,
											"end": 2536,
											"name": "SWAP1"
										},
										{
											"begin": 2483,
											"end": 2536,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 2483,
											"end": 2536,
											"name": "AND"
										},
										{
											"begin": 2483,
											"end": 2536,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2483,
											"end": 2536,
											"name": "tag",
											"value": "84"
										},
										{
											"begin": 2483,
											"end": 2536,
											"name": "JUMPDEST"
										},
										{
											"begin": 2443,
											"end": 2452,
											"name": "PUSH",
											"value": "C"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2453,
											"end": 2460,
											"name": "DUP10"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "AND"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "AND"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "DUP2"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "MSTORE"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "ADD"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "SWAP1"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "DUP2"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "MSTORE"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "ADD"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "KECCAK256"
										},
										{
											"begin": 2443,
											"end": 2461,
											"name": "SLOAD"
										},
										{
											"begin": 2443,
											"end": 2482,
											"name": "PUSH [tag]",
											"value": "87"
										},
										{
											"begin": 2443,
											"end": 2482,
											"name": "SWAP1"
										},
										{
											"begin": 2443,
											"end": 2537,
											"name": "SWAP2"
										},
										{
											"begin": 2443,
											"end": 2537,
											"name": "SWAP1"
										},
										{
											"begin": 2443,
											"end": 2537,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 2443,
											"end": 2537,
											"name": "AND"
										},
										{
											"begin": 2443,
											"end": 2537,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2443,
											"end": 2537,
											"name": "tag",
											"value": "83"
										},
										{
											"begin": 2443,
											"end": 2537,
											"name": "JUMPDEST"
										},
										{
											"begin": 2443,
											"end": 2558,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 2443,
											"end": 2558,
											"name": "SWAP1"
										},
										{
											"begin": 2443,
											"end": 2564,
											"name": "SWAP2"
										},
										{
											"begin": 2443,
											"end": 2564,
											"name": "SWAP1"
										},
										{
											"begin": 2443,
											"end": 2564,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 2443,
											"end": 2564,
											"name": "AND"
										},
										{
											"begin": 2443,
											"end": 2564,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2443,
											"end": 2564,
											"name": "tag",
											"value": "82"
										},
										{
											"begin": 2443,
											"end": 2564,
											"name": "JUMPDEST"
										},
										{
											"begin": 2443,
											"end": 2585,
											"name": "PUSH [tag]",
											"value": "89"
										},
										{
											"begin": 2443,
											"end": 2585,
											"name": "SWAP1"
										},
										{
											"begin": 2443,
											"end": 2603,
											"name": "SWAP2"
										},
										{
											"begin": 2443,
											"end": 2603,
											"name": "SWAP1"
										},
										{
											"begin": 2443,
											"end": 2603,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 2443,
											"end": 2603,
											"name": "AND"
										},
										{
											"begin": 2443,
											"end": 2603,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2443,
											"end": 2603,
											"name": "tag",
											"value": "81"
										},
										{
											"begin": 2443,
											"end": 2603,
											"name": "JUMPDEST"
										},
										{
											"begin": 2424,
											"end": 2603,
											"name": "SWAP1"
										},
										{
											"begin": 2424,
											"end": 2603,
											"name": "POP"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SWAP2"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "SWAP1"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "POP"
										},
										{
											"begin": 2351,
											"end": 2610,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "tag",
											"value": "33"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "JUMPDEST"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "MSTORE"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "DUP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "MSTORE"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "KECCAK256"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SWAP2"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "POP"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SWAP1"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "POP"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "SLOAD"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "DUP2"
										},
										{
											"begin": 957,
											"end": 999,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "tag",
											"value": "35"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "JUMPDEST"
										},
										{
											"begin": 1637,
											"end": 1644,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1663,
											"end": 1675,
											"name": "PUSH",
											"value": "B"
										},
										{
											"begin": 1663,
											"end": 1675,
											"name": "SLOAD"
										},
										{
											"begin": 1656,
											"end": 1675,
											"name": "SWAP1"
										},
										{
											"begin": 1656,
											"end": 1675,
											"name": "POP"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "SWAP1"
										},
										{
											"begin": 1591,
											"end": 1682,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "tag",
											"value": "37"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "JUMPDEST"
										},
										{
											"begin": 2671,
											"end": 2678,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2697,
											"end": 2728,
											"name": "PUSH [tag]",
											"value": "92"
										},
										{
											"begin": 2712,
											"end": 2727,
											"name": "PUSH",
											"value": "6"
										},
										{
											"begin": 2712,
											"end": 2727,
											"name": "SLOAD"
										},
										{
											"begin": 2697,
											"end": 2707,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 2697,
											"end": 2707,
											"name": "SLOAD"
										},
										{
											"begin": 2697,
											"end": 2711,
											"name": "PUSH [tag]",
											"value": "87"
										},
										{
											"begin": 2697,
											"end": 2711,
											"name": "SWAP1"
										},
										{
											"begin": 2697,
											"end": 2728,
											"name": "SWAP2"
										},
										{
											"begin": 2697,
											"end": 2728,
											"name": "SWAP1"
										},
										{
											"begin": 2697,
											"end": 2728,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 2697,
											"end": 2728,
											"name": "AND"
										},
										{
											"begin": 2697,
											"end": 2728,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2697,
											"end": 2728,
											"name": "tag",
											"value": "92"
										},
										{
											"begin": 2697,
											"end": 2728,
											"name": "JUMPDEST"
										},
										{
											"begin": 2690,
											"end": 2728,
											"name": "SWAP1"
										},
										{
											"begin": 2690,
											"end": 2728,
											"name": "POP"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "SWAP1"
										},
										{
											"begin": 2616,
											"end": 2735,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "tag",
											"value": "40"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "JUMPDEST"
										},
										{
											"begin": 1318,
											"end": 1319,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1301,
											"end": 1314,
											"name": "DUP1"
										},
										{
											"begin": 1301,
											"end": 1314,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SLOAD"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "ADD"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SWAP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP2"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SWAP1"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SSTORE"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1329,
											"end": 1349,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1352,
											"end": 1365,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1352,
											"end": 1365,
											"name": "SLOAD"
										},
										{
											"begin": 1329,
											"end": 1365,
											"name": "SWAP1"
										},
										{
											"begin": 1329,
											"end": 1365,
											"name": "POP"
										},
										{
											"begin": 3978,
											"end": 3988,
											"name": "CALLER"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "PUSH [tag]",
											"value": "95"
										},
										{
											"begin": 5982,
											"end": 5996,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "tag",
											"value": "95"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "JUMPDEST"
										},
										{
											"begin": 5959,
											"end": 5979,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "DUP2"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "SWAP1"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "SSTORE"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "POP"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "PUSH [tag]",
											"value": "96"
										},
										{
											"begin": 6025,
											"end": 6049,
											"name": "PUSH [tag]",
											"value": "58"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "tag",
											"value": "96"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "JUMPDEST"
										},
										{
											"begin": 6008,
											"end": 6022,
											"name": "PUSH",
											"value": "7"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "DUP2"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "SWAP1"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "SSTORE"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "POP"
										},
										{
											"begin": 6084,
											"end": 6085,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "AND"
										},
										{
											"begin": 6065,
											"end": 6072,
											"name": "DUP2"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "AND"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "EQ"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "PUSH [tag]",
											"value": "97"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "JUMPI"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "PUSH [tag]",
											"value": "98"
										},
										{
											"begin": 6128,
											"end": 6135,
											"name": "DUP2"
										},
										{
											"begin": 6121,
											"end": 6127,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "tag",
											"value": "98"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "JUMPDEST"
										},
										{
											"begin": 6102,
											"end": 6109,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6110,
											"end": 6117,
											"name": "DUP4"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "AND"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "AND"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "MSTORE"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "ADD"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "SWAP1"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "MSTORE"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "ADD"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "KECCAK256"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "SWAP1"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "SSTORE"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "POP"
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "SLOAD"
										},
										{
											"begin": 6150,
											"end": 6172,
											"name": "PUSH",
											"value": "9"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6173,
											"end": 6180,
											"name": "DUP4"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "AND"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "AND"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "MSTORE"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "ADD"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "SWAP1"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "MSTORE"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "ADD"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "KECCAK256"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "SWAP1"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "SSTORE"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "POP"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "tag",
											"value": "97"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "JUMPDEST"
										},
										{
											"begin": 4021,
											"end": 4022,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4012,
											"end": 4018,
											"name": "DUP4"
										},
										{
											"begin": 4012,
											"end": 4022,
											"name": "GT"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "PUSH [tag]",
											"value": "100"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "JUMPI"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "MLOAD"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "DUP2"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "MSTORE"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "ADD"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "DUP1"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "DUP1"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "ADD"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "DUP3"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "DUP2"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "SUB"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "DUP3"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "MSTORE"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "PUSH",
											"value": "11"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "DUP2"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "MSTORE"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "ADD"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "DUP1"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "PUSH",
											"value": "43616E6E6F742077697468647261772030000000000000000000000000000000"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "DUP2"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "MSTORE"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "POP"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "ADD"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "SWAP2"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "POP"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "POP"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "MLOAD"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "DUP1"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "SWAP2"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "SUB"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "SWAP1"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "REVERT"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "tag",
											"value": "100"
										},
										{
											"begin": 4004,
											"end": 4044,
											"name": "JUMPDEST"
										},
										{
											"begin": 4069,
											"end": 4093,
											"name": "PUSH [tag]",
											"value": "101"
										},
										{
											"begin": 4086,
											"end": 4092,
											"name": "DUP4"
										},
										{
											"begin": 4069,
											"end": 4081,
											"name": "PUSH",
											"value": "B"
										},
										{
											"begin": 4069,
											"end": 4081,
											"name": "SLOAD"
										},
										{
											"begin": 4069,
											"end": 4085,
											"name": "PUSH [tag]",
											"value": "86"
										},
										{
											"begin": 4069,
											"end": 4085,
											"name": "SWAP1"
										},
										{
											"begin": 4069,
											"end": 4093,
											"name": "SWAP2"
										},
										{
											"begin": 4069,
											"end": 4093,
											"name": "SWAP1"
										},
										{
											"begin": 4069,
											"end": 4093,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4069,
											"end": 4093,
											"name": "AND"
										},
										{
											"begin": 4069,
											"end": 4093,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4069,
											"end": 4093,
											"name": "tag",
											"value": "101"
										},
										{
											"begin": 4069,
											"end": 4093,
											"name": "JUMPDEST"
										},
										{
											"begin": 4054,
											"end": 4066,
											"name": "PUSH",
											"value": "B"
										},
										{
											"begin": 4054,
											"end": 4093,
											"name": "DUP2"
										},
										{
											"begin": 4054,
											"end": 4093,
											"name": "SWAP1"
										},
										{
											"begin": 4054,
											"end": 4093,
											"name": "SSTORE"
										},
										{
											"begin": 4054,
											"end": 4093,
											"name": "POP"
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "PUSH [tag]",
											"value": "102"
										},
										{
											"begin": 4153,
											"end": 4159,
											"name": "DUP4"
										},
										{
											"begin": 4127,
											"end": 4136,
											"name": "PUSH",
											"value": "C"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4137,
											"end": 4147,
											"name": "CALLER"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "AND"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "AND"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "DUP2"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "MSTORE"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "ADD"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "SWAP1"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "DUP2"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "MSTORE"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "ADD"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "KECCAK256"
										},
										{
											"begin": 4127,
											"end": 4148,
											"name": "SLOAD"
										},
										{
											"begin": 4127,
											"end": 4152,
											"name": "PUSH [tag]",
											"value": "86"
										},
										{
											"begin": 4127,
											"end": 4152,
											"name": "SWAP1"
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "SWAP2"
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "SWAP1"
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "AND"
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "tag",
											"value": "102"
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "JUMPDEST"
										},
										{
											"begin": 4103,
											"end": 4112,
											"name": "PUSH",
											"value": "C"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4113,
											"end": 4123,
											"name": "CALLER"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "AND"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "AND"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "DUP2"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "MSTORE"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "ADD"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "SWAP1"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "DUP2"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "MSTORE"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "ADD"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4103,
											"end": 4124,
											"name": "KECCAK256"
										},
										{
											"begin": 4103,
											"end": 4160,
											"name": "DUP2"
										},
										{
											"begin": 4103,
											"end": 4160,
											"name": "SWAP1"
										},
										{
											"begin": 4103,
											"end": 4160,
											"name": "SSTORE"
										},
										{
											"begin": 4103,
											"end": 4160,
											"name": "POP"
										},
										{
											"begin": 4170,
											"end": 4215,
											"name": "PUSH [tag]",
											"value": "103"
										},
										{
											"begin": 4196,
											"end": 4206,
											"name": "CALLER"
										},
										{
											"begin": 4208,
											"end": 4214,
											"name": "DUP5"
										},
										{
											"begin": 4170,
											"end": 4182,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4170,
											"end": 4182,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4170,
											"end": 4182,
											"name": "SWAP1"
										},
										{
											"begin": 4170,
											"end": 4182,
											"name": "SLOAD"
										},
										{
											"begin": 4170,
											"end": 4182,
											"name": "SWAP1"
										},
										{
											"begin": 4170,
											"end": 4182,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 4170,
											"end": 4182,
											"name": "EXP"
										},
										{
											"begin": 4170,
											"end": 4182,
											"name": "SWAP1"
										},
										{
											"begin": 4170,
											"end": 4182,
											"name": "DIV"
										},
										{
											"begin": 4170,
											"end": 4182,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4170,
											"end": 4182,
											"name": "AND"
										},
										{
											"begin": 4170,
											"end": 4195,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4170,
											"end": 4195,
											"name": "AND"
										},
										{
											"begin": 4170,
											"end": 4195,
											"name": "PUSH [tag]",
											"value": "104"
										},
										{
											"begin": 4170,
											"end": 4195,
											"name": "SWAP1"
										},
										{
											"begin": 4170,
											"end": 4215,
											"name": "SWAP3"
										},
										{
											"begin": 4170,
											"end": 4215,
											"name": "SWAP2"
										},
										{
											"begin": 4170,
											"end": 4215,
											"name": "SWAP1"
										},
										{
											"begin": 4170,
											"end": 4215,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4170,
											"end": 4215,
											"name": "AND"
										},
										{
											"begin": 4170,
											"end": 4215,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4170,
											"end": 4215,
											"name": "tag",
											"value": "103"
										},
										{
											"begin": 4170,
											"end": 4215,
											"name": "JUMPDEST"
										},
										{
											"begin": 4240,
											"end": 4250,
											"name": "CALLER"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "AND"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "PUSH",
											"value": "7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5"
										},
										{
											"begin": 4252,
											"end": 4258,
											"name": "DUP5"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "MLOAD"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "DUP1"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "DUP3"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "DUP2"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "MSTORE"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "ADD"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "SWAP2"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "POP"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "POP"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "MLOAD"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "DUP1"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "SWAP2"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "SUB"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "SWAP1"
										},
										{
											"begin": 4230,
											"end": 4259,
											"name": "LOG2"
										},
										{
											"begin": 1375,
											"end": 1376,
											"name": "POP"
										},
										{
											"begin": 1410,
											"end": 1423,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1410,
											"end": 1423,
											"name": "SLOAD"
										},
										{
											"begin": 1394,
											"end": 1406,
											"name": "DUP2"
										},
										{
											"begin": 1394,
											"end": 1423,
											"name": "EQ"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH [tag]",
											"value": "105"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "JUMPI"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MLOAD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP3"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SUB"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP3"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MLOAD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SUB"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "REVERT"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "tag",
											"value": "105"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "JUMPDEST"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "POP"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "POP"
										},
										{
											"begin": 3887,
											"end": 4266,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "tag",
											"value": "42"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "JUMPDEST"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "PUSH",
											"value": "6"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "SLOAD"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "DUP2"
										},
										{
											"begin": 772,
											"end": 811,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "tag",
											"value": "45"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "JUMPDEST"
										},
										{
											"begin": 249,
											"end": 268,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 249,
											"end": 268,
											"name": "DUP1"
										},
										{
											"begin": 249,
											"end": 268,
											"name": "SWAP1"
										},
										{
											"begin": 249,
											"end": 268,
											"name": "SLOAD"
										},
										{
											"begin": 249,
											"end": 268,
											"name": "SWAP1"
										},
										{
											"begin": 249,
											"end": 268,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 249,
											"end": 268,
											"name": "EXP"
										},
										{
											"begin": 249,
											"end": 268,
											"name": "SWAP1"
										},
										{
											"begin": 249,
											"end": 268,
											"name": "DIV"
										},
										{
											"begin": 249,
											"end": 268,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 249,
											"end": 268,
											"name": "AND"
										},
										{
											"begin": 235,
											"end": 268,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 235,
											"end": 268,
											"name": "AND"
										},
										{
											"begin": 235,
											"end": 245,
											"name": "CALLER"
										},
										{
											"begin": 235,
											"end": 268,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 235,
											"end": 268,
											"name": "AND"
										},
										{
											"begin": 235,
											"end": 268,
											"name": "EQ"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "PUSH [tag]",
											"value": "107"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "JUMPI"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "MLOAD"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "DUP2"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "MSTORE"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "ADD"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "ADD"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "DUP3"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "DUP2"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "SUB"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "DUP3"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "MSTORE"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "PUSH",
											"value": "2A"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "DUP2"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "MSTORE"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "ADD"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "PUSH data",
											"value": "D50B095422F4CBFCB4C90FBD4D55AAF0967BF1D90E94BB6A1AE9FC4EE7E733DE"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "PUSH",
											"value": "2A"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "SWAP2"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "CODECOPY"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "ADD"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "SWAP2"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "POP"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "POP"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "MLOAD"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "SWAP2"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "SUB"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "SWAP1"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "REVERT"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "tag",
											"value": "107"
										},
										{
											"begin": 214,
											"end": 336,
											"name": "JUMPDEST"
										},
										{
											"begin": 4854,
											"end": 4855,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "PUSH [tag]",
											"value": "109"
										},
										{
											"begin": 5982,
											"end": 5996,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "tag",
											"value": "109"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "JUMPDEST"
										},
										{
											"begin": 5959,
											"end": 5979,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "DUP2"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "SWAP1"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "SSTORE"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "POP"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "PUSH [tag]",
											"value": "110"
										},
										{
											"begin": 6025,
											"end": 6049,
											"name": "PUSH [tag]",
											"value": "58"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "tag",
											"value": "110"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "JUMPDEST"
										},
										{
											"begin": 6008,
											"end": 6022,
											"name": "PUSH",
											"value": "7"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "DUP2"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "SWAP1"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "SSTORE"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "POP"
										},
										{
											"begin": 6084,
											"end": 6085,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "AND"
										},
										{
											"begin": 6065,
											"end": 6072,
											"name": "DUP2"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "AND"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "EQ"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "PUSH [tag]",
											"value": "111"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "JUMPI"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "PUSH [tag]",
											"value": "112"
										},
										{
											"begin": 6128,
											"end": 6135,
											"name": "DUP2"
										},
										{
											"begin": 6121,
											"end": 6127,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "tag",
											"value": "112"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "JUMPDEST"
										},
										{
											"begin": 6102,
											"end": 6109,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6110,
											"end": 6117,
											"name": "DUP4"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "AND"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "AND"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "MSTORE"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "ADD"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "SWAP1"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "MSTORE"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "ADD"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "KECCAK256"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "SWAP1"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "SSTORE"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "POP"
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "SLOAD"
										},
										{
											"begin": 6150,
											"end": 6172,
											"name": "PUSH",
											"value": "9"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6173,
											"end": 6180,
											"name": "DUP4"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "AND"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "AND"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "MSTORE"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "ADD"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "SWAP1"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "MSTORE"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "ADD"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "KECCAK256"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "SWAP1"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "SSTORE"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "POP"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "tag",
											"value": "111"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "JUMPDEST"
										},
										{
											"begin": 4895,
											"end": 4907,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4895,
											"end": 4907,
											"name": "SLOAD"
										},
										{
											"begin": 4876,
											"end": 4891,
											"name": "TIMESTAMP"
										},
										{
											"begin": 4876,
											"end": 4907,
											"name": "LT"
										},
										{
											"begin": 4872,
											"end": 5184,
											"name": "PUSH [tag]",
											"value": "114"
										},
										{
											"begin": 4872,
											"end": 5184,
											"name": "JUMPI"
										},
										{
											"begin": 4936,
											"end": 4963,
											"name": "PUSH [tag]",
											"value": "115"
										},
										{
											"begin": 4947,
											"end": 4962,
											"name": "PUSH",
											"value": "6"
										},
										{
											"begin": 4947,
											"end": 4962,
											"name": "SLOAD"
										},
										{
											"begin": 4936,
											"end": 4942,
											"name": "DUP4"
										},
										{
											"begin": 4936,
											"end": 4946,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 4936,
											"end": 4946,
											"name": "SWAP1"
										},
										{
											"begin": 4936,
											"end": 4963,
											"name": "SWAP2"
										},
										{
											"begin": 4936,
											"end": 4963,
											"name": "SWAP1"
										},
										{
											"begin": 4936,
											"end": 4963,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4936,
											"end": 4963,
											"name": "AND"
										},
										{
											"begin": 4936,
											"end": 4963,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4936,
											"end": 4963,
											"name": "tag",
											"value": "115"
										},
										{
											"begin": 4936,
											"end": 4963,
											"name": "JUMPDEST"
										},
										{
											"begin": 4923,
											"end": 4933,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 4923,
											"end": 4963,
											"name": "DUP2"
										},
										{
											"begin": 4923,
											"end": 4963,
											"name": "SWAP1"
										},
										{
											"begin": 4923,
											"end": 4963,
											"name": "SSTORE"
										},
										{
											"begin": 4923,
											"end": 4963,
											"name": "POP"
										},
										{
											"begin": 4872,
											"end": 5184,
											"name": "PUSH [tag]",
											"value": "116"
										},
										{
											"begin": 4872,
											"end": 5184,
											"name": "JUMP"
										},
										{
											"begin": 4872,
											"end": 5184,
											"name": "tag",
											"value": "114"
										},
										{
											"begin": 4872,
											"end": 5184,
											"name": "JUMPDEST"
										},
										{
											"begin": 4994,
											"end": 5011,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH [tag]",
											"value": "117"
										},
										{
											"begin": 5031,
											"end": 5046,
											"name": "TIMESTAMP"
										},
										{
											"begin": 5014,
											"end": 5026,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5014,
											"end": 5026,
											"name": "SLOAD"
										},
										{
											"begin": 5014,
											"end": 5030,
											"name": "PUSH [tag]",
											"value": "86"
										},
										{
											"begin": 5014,
											"end": 5030,
											"name": "SWAP1"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP2"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP1"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "AND"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "tag",
											"value": "117"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "JUMPDEST"
										},
										{
											"begin": 4994,
											"end": 5047,
											"name": "SWAP1"
										},
										{
											"begin": 4994,
											"end": 5047,
											"name": "POP"
										},
										{
											"begin": 5061,
											"end": 5077,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5080,
											"end": 5105,
											"name": "PUSH [tag]",
											"value": "118"
										},
										{
											"begin": 5094,
											"end": 5104,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 5094,
											"end": 5104,
											"name": "SLOAD"
										},
										{
											"begin": 5080,
											"end": 5089,
											"name": "DUP4"
										},
										{
											"begin": 5080,
											"end": 5093,
											"name": "PUSH [tag]",
											"value": "87"
										},
										{
											"begin": 5080,
											"end": 5093,
											"name": "SWAP1"
										},
										{
											"begin": 5080,
											"end": 5105,
											"name": "SWAP2"
										},
										{
											"begin": 5080,
											"end": 5105,
											"name": "SWAP1"
										},
										{
											"begin": 5080,
											"end": 5105,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 5080,
											"end": 5105,
											"name": "AND"
										},
										{
											"begin": 5080,
											"end": 5105,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5080,
											"end": 5105,
											"name": "tag",
											"value": "118"
										},
										{
											"begin": 5080,
											"end": 5105,
											"name": "JUMPDEST"
										},
										{
											"begin": 5061,
											"end": 5105,
											"name": "SWAP1"
										},
										{
											"begin": 5061,
											"end": 5105,
											"name": "POP"
										},
										{
											"begin": 5132,
											"end": 5173,
											"name": "PUSH [tag]",
											"value": "119"
										},
										{
											"begin": 5157,
											"end": 5172,
											"name": "PUSH",
											"value": "6"
										},
										{
											"begin": 5157,
											"end": 5172,
											"name": "SLOAD"
										},
										{
											"begin": 5132,
											"end": 5152,
											"name": "PUSH [tag]",
											"value": "120"
										},
										{
											"begin": 5143,
											"end": 5151,
											"name": "DUP4"
										},
										{
											"begin": 5132,
											"end": 5138,
											"name": "DUP8"
										},
										{
											"begin": 5132,
											"end": 5142,
											"name": "PUSH [tag]",
											"value": "89"
										},
										{
											"begin": 5132,
											"end": 5142,
											"name": "SWAP1"
										},
										{
											"begin": 5132,
											"end": 5152,
											"name": "SWAP2"
										},
										{
											"begin": 5132,
											"end": 5152,
											"name": "SWAP1"
										},
										{
											"begin": 5132,
											"end": 5152,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 5132,
											"end": 5152,
											"name": "AND"
										},
										{
											"begin": 5132,
											"end": 5152,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5132,
											"end": 5152,
											"name": "tag",
											"value": "120"
										},
										{
											"begin": 5132,
											"end": 5152,
											"name": "JUMPDEST"
										},
										{
											"begin": 5132,
											"end": 5156,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 5132,
											"end": 5156,
											"name": "SWAP1"
										},
										{
											"begin": 5132,
											"end": 5173,
											"name": "SWAP2"
										},
										{
											"begin": 5132,
											"end": 5173,
											"name": "SWAP1"
										},
										{
											"begin": 5132,
											"end": 5173,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 5132,
											"end": 5173,
											"name": "AND"
										},
										{
											"begin": 5132,
											"end": 5173,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5132,
											"end": 5173,
											"name": "tag",
											"value": "119"
										},
										{
											"begin": 5132,
											"end": 5173,
											"name": "JUMPDEST"
										},
										{
											"begin": 5119,
											"end": 5129,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 5119,
											"end": 5173,
											"name": "DUP2"
										},
										{
											"begin": 5119,
											"end": 5173,
											"name": "SWAP1"
										},
										{
											"begin": 5119,
											"end": 5173,
											"name": "SSTORE"
										},
										{
											"begin": 5119,
											"end": 5173,
											"name": "POP"
										},
										{
											"begin": 4872,
											"end": 5184,
											"name": "POP"
										},
										{
											"begin": 4872,
											"end": 5184,
											"name": "POP"
										},
										{
											"begin": 4872,
											"end": 5184,
											"name": "tag",
											"value": "116"
										},
										{
											"begin": 4872,
											"end": 5184,
											"name": "JUMPDEST"
										},
										{
											"begin": 5538,
											"end": 5553,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5556,
											"end": 5568,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 5556,
											"end": 5568,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5556,
											"end": 5568,
											"name": "SWAP1"
										},
										{
											"begin": 5556,
											"end": 5568,
											"name": "SLOAD"
										},
										{
											"begin": 5556,
											"end": 5568,
											"name": "SWAP1"
										},
										{
											"begin": 5556,
											"end": 5568,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 5556,
											"end": 5568,
											"name": "EXP"
										},
										{
											"begin": 5556,
											"end": 5568,
											"name": "SWAP1"
										},
										{
											"begin": 5556,
											"end": 5568,
											"name": "DIV"
										},
										{
											"begin": 5556,
											"end": 5568,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5556,
											"end": 5568,
											"name": "AND"
										},
										{
											"begin": 5556,
											"end": 5578,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5556,
											"end": 5578,
											"name": "AND"
										},
										{
											"begin": 5556,
											"end": 5578,
											"name": "PUSH",
											"value": "70A08231"
										},
										{
											"begin": 5587,
											"end": 5591,
											"name": "ADDRESS"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "MLOAD"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP3"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "AND"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "SHL"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP2"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "MSTORE"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "ADD"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP1"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP3"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "AND"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "AND"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP2"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "MSTORE"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "ADD"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "SWAP2"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "POP"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "POP"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "MLOAD"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP1"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP4"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "SUB"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP2"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP7"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP1"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "EXTCODESIZE"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "121"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "121"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "POP"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "GAS"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "STATICCALL"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "122"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "122"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "POP"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "POP"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "POP"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "POP"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "MLOAD"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "123"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "123"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP2"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "ADD"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "SWAP1"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP1"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "DUP1"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "MLOAD"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "SWAP1"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "ADD"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "SWAP1"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "SWAP3"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "SWAP2"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "SWAP1"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "POP"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "POP"
										},
										{
											"begin": 5556,
											"end": 5593,
											"name": "POP"
										},
										{
											"begin": 5538,
											"end": 5593,
											"name": "SWAP1"
										},
										{
											"begin": 5538,
											"end": 5593,
											"name": "POP"
										},
										{
											"begin": 5638,
											"end": 5666,
											"name": "PUSH [tag]",
											"value": "124"
										},
										{
											"begin": 5650,
											"end": 5665,
											"name": "PUSH",
											"value": "6"
										},
										{
											"begin": 5650,
											"end": 5665,
											"name": "SLOAD"
										},
										{
											"begin": 5638,
											"end": 5645,
											"name": "DUP3"
										},
										{
											"begin": 5638,
											"end": 5649,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 5638,
											"end": 5649,
											"name": "SWAP1"
										},
										{
											"begin": 5638,
											"end": 5666,
											"name": "SWAP2"
										},
										{
											"begin": 5638,
											"end": 5666,
											"name": "SWAP1"
										},
										{
											"begin": 5638,
											"end": 5666,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 5638,
											"end": 5666,
											"name": "AND"
										},
										{
											"begin": 5638,
											"end": 5666,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5638,
											"end": 5666,
											"name": "tag",
											"value": "124"
										},
										{
											"begin": 5638,
											"end": 5666,
											"name": "JUMPDEST"
										},
										{
											"begin": 5624,
											"end": 5634,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 5624,
											"end": 5634,
											"name": "SLOAD"
										},
										{
											"begin": 5624,
											"end": 5666,
											"name": "GT"
										},
										{
											"begin": 5624,
											"end": 5666,
											"name": "ISZERO"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "PUSH [tag]",
											"value": "125"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "JUMPI"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "MLOAD"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "DUP2"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "MSTORE"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "ADD"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "DUP1"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "DUP1"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "ADD"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "DUP3"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "DUP2"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "SUB"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "DUP3"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "MSTORE"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "PUSH",
											"value": "18"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "DUP2"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "MSTORE"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "ADD"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "DUP1"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "PUSH",
											"value": "50726F76696465642072657761726420746F6F20686967680000000000000000"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "DUP2"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "MSTORE"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "POP"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "ADD"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "SWAP2"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "POP"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "POP"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "MLOAD"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "DUP1"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "SWAP2"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "SUB"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "SWAP1"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "REVERT"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "tag",
											"value": "125"
										},
										{
											"begin": 5603,
											"end": 5716,
											"name": "JUMPDEST"
										},
										{
											"begin": 5744,
											"end": 5759,
											"name": "TIMESTAMP"
										},
										{
											"begin": 5727,
											"end": 5741,
											"name": "PUSH",
											"value": "7"
										},
										{
											"begin": 5727,
											"end": 5759,
											"name": "DUP2"
										},
										{
											"begin": 5727,
											"end": 5759,
											"name": "SWAP1"
										},
										{
											"begin": 5727,
											"end": 5759,
											"name": "SSTORE"
										},
										{
											"begin": 5727,
											"end": 5759,
											"name": "POP"
										},
										{
											"begin": 5784,
											"end": 5820,
											"name": "PUSH [tag]",
											"value": "126"
										},
										{
											"begin": 5804,
											"end": 5819,
											"name": "PUSH",
											"value": "6"
										},
										{
											"begin": 5804,
											"end": 5819,
											"name": "SLOAD"
										},
										{
											"begin": 5784,
											"end": 5799,
											"name": "TIMESTAMP"
										},
										{
											"begin": 5784,
											"end": 5803,
											"name": "PUSH [tag]",
											"value": "89"
										},
										{
											"begin": 5784,
											"end": 5803,
											"name": "SWAP1"
										},
										{
											"begin": 5784,
											"end": 5820,
											"name": "SWAP2"
										},
										{
											"begin": 5784,
											"end": 5820,
											"name": "SWAP1"
										},
										{
											"begin": 5784,
											"end": 5820,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 5784,
											"end": 5820,
											"name": "AND"
										},
										{
											"begin": 5784,
											"end": 5820,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5784,
											"end": 5820,
											"name": "tag",
											"value": "126"
										},
										{
											"begin": 5784,
											"end": 5820,
											"name": "JUMPDEST"
										},
										{
											"begin": 5769,
											"end": 5781,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5769,
											"end": 5820,
											"name": "DUP2"
										},
										{
											"begin": 5769,
											"end": 5820,
											"name": "SWAP1"
										},
										{
											"begin": 5769,
											"end": 5820,
											"name": "SSTORE"
										},
										{
											"begin": 5769,
											"end": 5820,
											"name": "POP"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "PUSH",
											"value": "DE88A922E0D3B88B24E9623EFEB464919C6BF9F66857A65E2BFCF2CE87A9433D"
										},
										{
											"begin": 5847,
											"end": 5853,
											"name": "DUP4"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "MLOAD"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "DUP1"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "DUP3"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "DUP2"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "MSTORE"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "ADD"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "SWAP2"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "POP"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "POP"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "MLOAD"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "DUP1"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "SWAP2"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "SUB"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "SWAP1"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "LOG1"
										},
										{
											"begin": 6224,
											"end": 6225,
											"name": "POP"
										},
										{
											"begin": 346,
											"end": 347,
											"name": "POP"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "POP"
										},
										{
											"begin": 4732,
											"end": 5861,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "tag",
											"value": "47"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "JUMPDEST"
										},
										{
											"begin": 1318,
											"end": 1319,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1301,
											"end": 1314,
											"name": "DUP1"
										},
										{
											"begin": 1301,
											"end": 1314,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SLOAD"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "ADD"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SWAP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP2"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SWAP1"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SSTORE"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1329,
											"end": 1349,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1352,
											"end": 1365,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1352,
											"end": 1365,
											"name": "SLOAD"
										},
										{
											"begin": 1329,
											"end": 1365,
											"name": "SWAP1"
										},
										{
											"begin": 1329,
											"end": 1365,
											"name": "POP"
										},
										{
											"begin": 4326,
											"end": 4336,
											"name": "CALLER"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "PUSH [tag]",
											"value": "129"
										},
										{
											"begin": 5982,
											"end": 5996,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "tag",
											"value": "129"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "JUMPDEST"
										},
										{
											"begin": 5959,
											"end": 5979,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "DUP2"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "SWAP1"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "SSTORE"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "POP"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "PUSH [tag]",
											"value": "130"
										},
										{
											"begin": 6025,
											"end": 6049,
											"name": "PUSH [tag]",
											"value": "58"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "tag",
											"value": "130"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "JUMPDEST"
										},
										{
											"begin": 6008,
											"end": 6022,
											"name": "PUSH",
											"value": "7"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "DUP2"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "SWAP1"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "SSTORE"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "POP"
										},
										{
											"begin": 6084,
											"end": 6085,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "AND"
										},
										{
											"begin": 6065,
											"end": 6072,
											"name": "DUP2"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "AND"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "EQ"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "PUSH [tag]",
											"value": "131"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "JUMPI"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "PUSH [tag]",
											"value": "132"
										},
										{
											"begin": 6128,
											"end": 6135,
											"name": "DUP2"
										},
										{
											"begin": 6121,
											"end": 6127,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "tag",
											"value": "132"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "JUMPDEST"
										},
										{
											"begin": 6102,
											"end": 6109,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6110,
											"end": 6117,
											"name": "DUP4"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "AND"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "AND"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "MSTORE"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "ADD"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "SWAP1"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "MSTORE"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "ADD"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "KECCAK256"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "SWAP1"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "SSTORE"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "POP"
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "SLOAD"
										},
										{
											"begin": 6150,
											"end": 6172,
											"name": "PUSH",
											"value": "9"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6173,
											"end": 6180,
											"name": "DUP4"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "AND"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "AND"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "MSTORE"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "ADD"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "SWAP1"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "MSTORE"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "ADD"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "KECCAK256"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "SWAP1"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "SSTORE"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "POP"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "tag",
											"value": "131"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "JUMPDEST"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4365,
											"end": 4372,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4373,
											"end": 4383,
											"name": "CALLER"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "AND"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "AND"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "DUP2"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "MSTORE"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "ADD"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "SWAP1"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "DUP2"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "MSTORE"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "ADD"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "KECCAK256"
										},
										{
											"begin": 4365,
											"end": 4384,
											"name": "SLOAD"
										},
										{
											"begin": 4348,
											"end": 4384,
											"name": "SWAP1"
										},
										{
											"begin": 4348,
											"end": 4384,
											"name": "POP"
										},
										{
											"begin": 4407,
											"end": 4408,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4398,
											"end": 4404,
											"name": "DUP2"
										},
										{
											"begin": 4398,
											"end": 4408,
											"name": "GT"
										},
										{
											"begin": 4394,
											"end": 4566,
											"name": "ISZERO"
										},
										{
											"begin": 4394,
											"end": 4566,
											"name": "PUSH [tag]",
											"value": "134"
										},
										{
											"begin": 4394,
											"end": 4566,
											"name": "JUMPI"
										},
										{
											"begin": 4446,
											"end": 4447,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4424,
											"end": 4431,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4432,
											"end": 4442,
											"name": "CALLER"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "AND"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "AND"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "DUP2"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "MSTORE"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "ADD"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "SWAP1"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "DUP2"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "MSTORE"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "ADD"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "KECCAK256"
										},
										{
											"begin": 4424,
											"end": 4447,
											"name": "DUP2"
										},
										{
											"begin": 4424,
											"end": 4447,
											"name": "SWAP1"
										},
										{
											"begin": 4424,
											"end": 4447,
											"name": "SSTORE"
										},
										{
											"begin": 4424,
											"end": 4447,
											"name": "POP"
										},
										{
											"begin": 4461,
											"end": 4506,
											"name": "PUSH [tag]",
											"value": "135"
										},
										{
											"begin": 4487,
											"end": 4497,
											"name": "CALLER"
										},
										{
											"begin": 4499,
											"end": 4505,
											"name": "DUP3"
										},
										{
											"begin": 4461,
											"end": 4473,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 4461,
											"end": 4473,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4461,
											"end": 4473,
											"name": "SWAP1"
										},
										{
											"begin": 4461,
											"end": 4473,
											"name": "SLOAD"
										},
										{
											"begin": 4461,
											"end": 4473,
											"name": "SWAP1"
										},
										{
											"begin": 4461,
											"end": 4473,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 4461,
											"end": 4473,
											"name": "EXP"
										},
										{
											"begin": 4461,
											"end": 4473,
											"name": "SWAP1"
										},
										{
											"begin": 4461,
											"end": 4473,
											"name": "DIV"
										},
										{
											"begin": 4461,
											"end": 4473,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4461,
											"end": 4473,
											"name": "AND"
										},
										{
											"begin": 4461,
											"end": 4486,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4461,
											"end": 4486,
											"name": "AND"
										},
										{
											"begin": 4461,
											"end": 4486,
											"name": "PUSH [tag]",
											"value": "104"
										},
										{
											"begin": 4461,
											"end": 4486,
											"name": "SWAP1"
										},
										{
											"begin": 4461,
											"end": 4506,
											"name": "SWAP3"
										},
										{
											"begin": 4461,
											"end": 4506,
											"name": "SWAP2"
										},
										{
											"begin": 4461,
											"end": 4506,
											"name": "SWAP1"
										},
										{
											"begin": 4461,
											"end": 4506,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4461,
											"end": 4506,
											"name": "AND"
										},
										{
											"begin": 4461,
											"end": 4506,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4461,
											"end": 4506,
											"name": "tag",
											"value": "135"
										},
										{
											"begin": 4461,
											"end": 4506,
											"name": "JUMPDEST"
										},
										{
											"begin": 4536,
											"end": 4546,
											"name": "CALLER"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "AND"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "PUSH",
											"value": "E2403640BA68FED3A2F88B7557551D1993F84B99BB10FF833F0CF8DB0C5E0486"
										},
										{
											"begin": 4548,
											"end": 4554,
											"name": "DUP3"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "MLOAD"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "DUP1"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "DUP3"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "DUP2"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "MSTORE"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "ADD"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "SWAP2"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "POP"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "POP"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "MLOAD"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "DUP1"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "SWAP2"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "SUB"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "SWAP1"
										},
										{
											"begin": 4525,
											"end": 4555,
											"name": "LOG2"
										},
										{
											"begin": 4394,
											"end": 4566,
											"name": "tag",
											"value": "134"
										},
										{
											"begin": 4394,
											"end": 4566,
											"name": "JUMPDEST"
										},
										{
											"begin": 6224,
											"end": 6225,
											"name": "POP"
										},
										{
											"begin": 1375,
											"end": 1376,
											"name": "POP"
										},
										{
											"begin": 1410,
											"end": 1423,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1410,
											"end": 1423,
											"name": "SLOAD"
										},
										{
											"begin": 1394,
											"end": 1406,
											"name": "DUP2"
										},
										{
											"begin": 1394,
											"end": 1423,
											"name": "EQ"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH [tag]",
											"value": "136"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "JUMPI"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MLOAD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP3"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SUB"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP3"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MLOAD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SUB"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "REVERT"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "tag",
											"value": "136"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "JUMPDEST"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "POP"
										},
										{
											"begin": 4272,
											"end": 4572,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "tag",
											"value": "49"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "JUMPDEST"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "DUP1"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "SWAP1"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "SLOAD"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "SWAP1"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "EXP"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "SWAP1"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "DIV"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "AND"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "DUP2"
										},
										{
											"begin": 69,
											"end": 103,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "tag",
											"value": "52"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "JUMPDEST"
										},
										{
											"begin": 1747,
											"end": 1754,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1773,
											"end": 1782,
											"name": "PUSH",
											"value": "C"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1783,
											"end": 1790,
											"name": "DUP4"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "AND"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "AND"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "DUP2"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "MSTORE"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "ADD"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "SWAP1"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "DUP2"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "MSTORE"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "ADD"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "KECCAK256"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "SLOAD"
										},
										{
											"begin": 1766,
											"end": 1791,
											"name": "SWAP1"
										},
										{
											"begin": 1766,
											"end": 1791,
											"name": "POP"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SWAP2"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "SWAP1"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "POP"
										},
										{
											"begin": 1688,
											"end": 1798,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "tag",
											"value": "54"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "JUMPDEST"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "SWAP1"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "SLOAD"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "SWAP1"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "EXP"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "SWAP1"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "DIV"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "AND"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "DUP2"
										},
										{
											"begin": 668,
											"end": 694,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "tag",
											"value": "56"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "JUMPDEST"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "SLOAD"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "DUP2"
										},
										{
											"begin": 737,
											"end": 766,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "tag",
											"value": "58"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "JUMPDEST"
										},
										{
											"begin": 1861,
											"end": 1868,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1887,
											"end": 1926,
											"name": "PUSH [tag]",
											"value": "139"
										},
										{
											"begin": 1896,
											"end": 1911,
											"name": "TIMESTAMP"
										},
										{
											"begin": 1913,
											"end": 1925,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1913,
											"end": 1925,
											"name": "SLOAD"
										},
										{
											"begin": 1887,
											"end": 1895,
											"name": "PUSH [tag]",
											"value": "140"
										},
										{
											"begin": 1887,
											"end": 1926,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1887,
											"end": 1926,
											"name": "tag",
											"value": "139"
										},
										{
											"begin": 1887,
											"end": 1926,
											"name": "JUMPDEST"
										},
										{
											"begin": 1880,
											"end": 1926,
											"name": "SWAP1"
										},
										{
											"begin": 1880,
											"end": 1926,
											"name": "POP"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "SWAP1"
										},
										{
											"begin": 1804,
											"end": 1933,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "tag",
											"value": "61"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "JUMPDEST"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "9"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "MSTORE"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "DUP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "MSTORE"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "KECCAK256"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SWAP2"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "POP"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SWAP1"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "POP"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "SLOAD"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "DUP2"
										},
										{
											"begin": 894,
											"end": 951,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "tag",
											"value": "64"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "JUMPDEST"
										},
										{
											"begin": 1318,
											"end": 1319,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1301,
											"end": 1314,
											"name": "DUP1"
										},
										{
											"begin": 1301,
											"end": 1314,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SLOAD"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "ADD"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SWAP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP2"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SWAP1"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SSTORE"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1329,
											"end": 1349,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1352,
											"end": 1365,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1352,
											"end": 1365,
											"name": "SLOAD"
										},
										{
											"begin": 1329,
											"end": 1365,
											"name": "SWAP1"
										},
										{
											"begin": 1329,
											"end": 1365,
											"name": "POP"
										},
										{
											"begin": 3580,
											"end": 3590,
											"name": "CALLER"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "PUSH [tag]",
											"value": "143"
										},
										{
											"begin": 5982,
											"end": 5996,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "tag",
											"value": "143"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "JUMPDEST"
										},
										{
											"begin": 5959,
											"end": 5979,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "DUP2"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "SWAP1"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "SSTORE"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "POP"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "PUSH [tag]",
											"value": "144"
										},
										{
											"begin": 6025,
											"end": 6049,
											"name": "PUSH [tag]",
											"value": "58"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "tag",
											"value": "144"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "JUMPDEST"
										},
										{
											"begin": 6008,
											"end": 6022,
											"name": "PUSH",
											"value": "7"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "DUP2"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "SWAP1"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "SSTORE"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "POP"
										},
										{
											"begin": 6084,
											"end": 6085,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "AND"
										},
										{
											"begin": 6065,
											"end": 6072,
											"name": "DUP2"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "AND"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "EQ"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "PUSH [tag]",
											"value": "145"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "JUMPI"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "PUSH [tag]",
											"value": "146"
										},
										{
											"begin": 6128,
											"end": 6135,
											"name": "DUP2"
										},
										{
											"begin": 6121,
											"end": 6127,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "tag",
											"value": "146"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "JUMPDEST"
										},
										{
											"begin": 6102,
											"end": 6109,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6110,
											"end": 6117,
											"name": "DUP4"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "AND"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "AND"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "MSTORE"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "ADD"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "SWAP1"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "MSTORE"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "ADD"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "KECCAK256"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "SWAP1"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "SSTORE"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "POP"
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "SLOAD"
										},
										{
											"begin": 6150,
											"end": 6172,
											"name": "PUSH",
											"value": "9"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6173,
											"end": 6180,
											"name": "DUP4"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "AND"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "AND"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "MSTORE"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "ADD"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "SWAP1"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "MSTORE"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "ADD"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "KECCAK256"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "SWAP1"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "SSTORE"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "POP"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "tag",
											"value": "145"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "JUMPDEST"
										},
										{
											"begin": 3623,
											"end": 3624,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3614,
											"end": 3620,
											"name": "DUP4"
										},
										{
											"begin": 3614,
											"end": 3624,
											"name": "GT"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH [tag]",
											"value": "148"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "JUMPI"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "MLOAD"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP2"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "MSTORE"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "ADD"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP1"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP1"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "ADD"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP3"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP2"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "SUB"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP3"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "MSTORE"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"value": "E"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP2"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "MSTORE"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "ADD"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP1"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"value": "43616E6E6F74207374616B652030000000000000000000000000000000000000"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP2"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "MSTORE"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "POP"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "ADD"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "SWAP2"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "POP"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "POP"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "MLOAD"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP1"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "SWAP2"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "SUB"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "SWAP1"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "REVERT"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "tag",
											"value": "148"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "JUMPDEST"
										},
										{
											"begin": 3668,
											"end": 3692,
											"name": "PUSH [tag]",
											"value": "149"
										},
										{
											"begin": 3685,
											"end": 3691,
											"name": "DUP4"
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "PUSH",
											"value": "B"
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "SLOAD"
										},
										{
											"begin": 3668,
											"end": 3684,
											"name": "PUSH [tag]",
											"value": "89"
										},
										{
											"begin": 3668,
											"end": 3684,
											"name": "SWAP1"
										},
										{
											"begin": 3668,
											"end": 3692,
											"name": "SWAP2"
										},
										{
											"begin": 3668,
											"end": 3692,
											"name": "SWAP1"
										},
										{
											"begin": 3668,
											"end": 3692,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 3668,
											"end": 3692,
											"name": "AND"
										},
										{
											"begin": 3668,
											"end": 3692,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3668,
											"end": 3692,
											"name": "tag",
											"value": "149"
										},
										{
											"begin": 3668,
											"end": 3692,
											"name": "JUMPDEST"
										},
										{
											"begin": 3653,
											"end": 3665,
											"name": "PUSH",
											"value": "B"
										},
										{
											"begin": 3653,
											"end": 3692,
											"name": "DUP2"
										},
										{
											"begin": 3653,
											"end": 3692,
											"name": "SWAP1"
										},
										{
											"begin": 3653,
											"end": 3692,
											"name": "SSTORE"
										},
										{
											"begin": 3653,
											"end": 3692,
											"name": "POP"
										},
										{
											"begin": 3726,
											"end": 3759,
											"name": "PUSH [tag]",
											"value": "150"
										},
										{
											"begin": 3752,
											"end": 3758,
											"name": "DUP4"
										},
										{
											"begin": 3726,
											"end": 3735,
											"name": "PUSH",
											"value": "C"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3736,
											"end": 3746,
											"name": "CALLER"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "AND"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "AND"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "DUP2"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "MSTORE"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "ADD"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "SWAP1"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "DUP2"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "MSTORE"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "ADD"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "KECCAK256"
										},
										{
											"begin": 3726,
											"end": 3747,
											"name": "SLOAD"
										},
										{
											"begin": 3726,
											"end": 3751,
											"name": "PUSH [tag]",
											"value": "89"
										},
										{
											"begin": 3726,
											"end": 3751,
											"name": "SWAP1"
										},
										{
											"begin": 3726,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 3726,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3726,
											"end": 3759,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 3726,
											"end": 3759,
											"name": "AND"
										},
										{
											"begin": 3726,
											"end": 3759,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3726,
											"end": 3759,
											"name": "tag",
											"value": "150"
										},
										{
											"begin": 3726,
											"end": 3759,
											"name": "JUMPDEST"
										},
										{
											"begin": 3702,
											"end": 3711,
											"name": "PUSH",
											"value": "C"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3712,
											"end": 3722,
											"name": "CALLER"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "AND"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "AND"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "DUP2"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "MSTORE"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "ADD"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "SWAP1"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "DUP2"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "MSTORE"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "ADD"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3702,
											"end": 3723,
											"name": "KECCAK256"
										},
										{
											"begin": 3702,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3702,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3702,
											"end": 3759,
											"name": "SSTORE"
										},
										{
											"begin": 3702,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3769,
											"end": 3833,
											"name": "PUSH [tag]",
											"value": "151"
										},
										{
											"begin": 3799,
											"end": 3809,
											"name": "CALLER"
										},
										{
											"begin": 3819,
											"end": 3823,
											"name": "ADDRESS"
										},
										{
											"begin": 3826,
											"end": 3832,
											"name": "DUP6"
										},
										{
											"begin": 3769,
											"end": 3781,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 3769,
											"end": 3781,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3769,
											"end": 3781,
											"name": "SWAP1"
										},
										{
											"begin": 3769,
											"end": 3781,
											"name": "SLOAD"
										},
										{
											"begin": 3769,
											"end": 3781,
											"name": "SWAP1"
										},
										{
											"begin": 3769,
											"end": 3781,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 3769,
											"end": 3781,
											"name": "EXP"
										},
										{
											"begin": 3769,
											"end": 3781,
											"name": "SWAP1"
										},
										{
											"begin": 3769,
											"end": 3781,
											"name": "DIV"
										},
										{
											"begin": 3769,
											"end": 3781,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3769,
											"end": 3781,
											"name": "AND"
										},
										{
											"begin": 3769,
											"end": 3798,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3769,
											"end": 3798,
											"name": "AND"
										},
										{
											"begin": 3769,
											"end": 3798,
											"name": "PUSH [tag]",
											"value": "152"
										},
										{
											"begin": 3769,
											"end": 3798,
											"name": "SWAP1"
										},
										{
											"begin": 3769,
											"end": 3833,
											"name": "SWAP4"
										},
										{
											"begin": 3769,
											"end": 3833,
											"name": "SWAP3"
										},
										{
											"begin": 3769,
											"end": 3833,
											"name": "SWAP2"
										},
										{
											"begin": 3769,
											"end": 3833,
											"name": "SWAP1"
										},
										{
											"begin": 3769,
											"end": 3833,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 3769,
											"end": 3833,
											"name": "AND"
										},
										{
											"begin": 3769,
											"end": 3833,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3769,
											"end": 3833,
											"name": "tag",
											"value": "151"
										},
										{
											"begin": 3769,
											"end": 3833,
											"name": "JUMPDEST"
										},
										{
											"begin": 3855,
											"end": 3865,
											"name": "CALLER"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "AND"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "PUSH",
											"value": "9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D"
										},
										{
											"begin": 3867,
											"end": 3873,
											"name": "DUP5"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "MLOAD"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "DUP1"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "DUP3"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "DUP2"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "MSTORE"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "ADD"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "SWAP2"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "POP"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "POP"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "MLOAD"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "DUP1"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "SWAP2"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "SUB"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "SWAP1"
										},
										{
											"begin": 3848,
											"end": 3874,
											"name": "LOG2"
										},
										{
											"begin": 1375,
											"end": 1376,
											"name": "POP"
										},
										{
											"begin": 1410,
											"end": 1423,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1410,
											"end": 1423,
											"name": "SLOAD"
										},
										{
											"begin": 1394,
											"end": 1406,
											"name": "DUP2"
										},
										{
											"begin": 1394,
											"end": 1423,
											"name": "EQ"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH [tag]",
											"value": "153"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "JUMPI"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MLOAD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP3"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SUB"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP3"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MLOAD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SUB"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "REVERT"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "tag",
											"value": "153"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "JUMPDEST"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "POP"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "POP"
										},
										{
											"begin": 3490,
											"end": 3881,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "tag",
											"value": "66"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "JUMPDEST"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "PUSH",
											"value": "7"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "SLOAD"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "DUP2"
										},
										{
											"begin": 817,
											"end": 846,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "tag",
											"value": "68"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "JUMPDEST"
										},
										{
											"begin": 1986,
											"end": 1993,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2025,
											"end": 2026,
											"name": "DUP1"
										},
										{
											"begin": 2009,
											"end": 2021,
											"name": "PUSH",
											"value": "B"
										},
										{
											"begin": 2009,
											"end": 2021,
											"name": "SLOAD"
										},
										{
											"begin": 2009,
											"end": 2026,
											"name": "EQ"
										},
										{
											"begin": 2005,
											"end": 2080,
											"name": "ISZERO"
										},
										{
											"begin": 2005,
											"end": 2080,
											"name": "PUSH [tag]",
											"value": "155"
										},
										{
											"begin": 2005,
											"end": 2080,
											"name": "JUMPI"
										},
										{
											"begin": 2049,
											"end": 2069,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 2049,
											"end": 2069,
											"name": "SLOAD"
										},
										{
											"begin": 2042,
											"end": 2069,
											"name": "SWAP1"
										},
										{
											"begin": 2042,
											"end": 2069,
											"name": "POP"
										},
										{
											"begin": 2042,
											"end": 2069,
											"name": "PUSH [tag]",
											"value": "154"
										},
										{
											"begin": 2042,
											"end": 2069,
											"name": "JUMP"
										},
										{
											"begin": 2005,
											"end": 2080,
											"name": "tag",
											"value": "155"
										},
										{
											"begin": 2005,
											"end": 2080,
											"name": "JUMPDEST"
										},
										{
											"begin": 2108,
											"end": 2338,
											"name": "PUSH [tag]",
											"value": "156"
										},
										{
											"begin": 2150,
											"end": 2324,
											"name": "PUSH [tag]",
											"value": "157"
										},
										{
											"begin": 2311,
											"end": 2323,
											"name": "PUSH",
											"value": "B"
										},
										{
											"begin": 2311,
											"end": 2323,
											"name": "SLOAD"
										},
										{
											"begin": 2150,
											"end": 2285,
											"name": "PUSH [tag]",
											"value": "158"
										},
										{
											"begin": 2280,
											"end": 2284,
											"name": "PUSH",
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 2150,
											"end": 2254,
											"name": "PUSH [tag]",
											"value": "159"
										},
										{
											"begin": 2243,
											"end": 2253,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 2243,
											"end": 2253,
											"name": "SLOAD"
										},
										{
											"begin": 2150,
											"end": 2217,
											"name": "PUSH [tag]",
											"value": "160"
										},
										{
											"begin": 2202,
											"end": 2216,
											"name": "PUSH",
											"value": "7"
										},
										{
											"begin": 2202,
											"end": 2216,
											"name": "SLOAD"
										},
										{
											"begin": 2150,
											"end": 2176,
											"name": "PUSH [tag]",
											"value": "161"
										},
										{
											"begin": 2150,
											"end": 2174,
											"name": "PUSH [tag]",
											"value": "58"
										},
										{
											"begin": 2150,
											"end": 2176,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2150,
											"end": 2176,
											"name": "tag",
											"value": "161"
										},
										{
											"begin": 2150,
											"end": 2176,
											"name": "JUMPDEST"
										},
										{
											"begin": 2150,
											"end": 2201,
											"name": "PUSH [tag]",
											"value": "86"
										},
										{
											"begin": 2150,
											"end": 2201,
											"name": "SWAP1"
										},
										{
											"begin": 2150,
											"end": 2217,
											"name": "SWAP2"
										},
										{
											"begin": 2150,
											"end": 2217,
											"name": "SWAP1"
										},
										{
											"begin": 2150,
											"end": 2217,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 2150,
											"end": 2217,
											"name": "AND"
										},
										{
											"begin": 2150,
											"end": 2217,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2150,
											"end": 2217,
											"name": "tag",
											"value": "160"
										},
										{
											"begin": 2150,
											"end": 2217,
											"name": "JUMPDEST"
										},
										{
											"begin": 2150,
											"end": 2242,
											"name": "PUSH [tag]",
											"value": "87"
										},
										{
											"begin": 2150,
											"end": 2242,
											"name": "SWAP1"
										},
										{
											"begin": 2150,
											"end": 2254,
											"name": "SWAP2"
										},
										{
											"begin": 2150,
											"end": 2254,
											"name": "SWAP1"
										},
										{
											"begin": 2150,
											"end": 2254,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 2150,
											"end": 2254,
											"name": "AND"
										},
										{
											"begin": 2150,
											"end": 2254,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2150,
											"end": 2254,
											"name": "tag",
											"value": "159"
										},
										{
											"begin": 2150,
											"end": 2254,
											"name": "JUMPDEST"
										},
										{
											"begin": 2150,
											"end": 2279,
											"name": "PUSH [tag]",
											"value": "87"
										},
										{
											"begin": 2150,
											"end": 2279,
											"name": "SWAP1"
										},
										{
											"begin": 2150,
											"end": 2285,
											"name": "SWAP2"
										},
										{
											"begin": 2150,
											"end": 2285,
											"name": "SWAP1"
										},
										{
											"begin": 2150,
											"end": 2285,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 2150,
											"end": 2285,
											"name": "AND"
										},
										{
											"begin": 2150,
											"end": 2285,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2150,
											"end": 2285,
											"name": "tag",
											"value": "158"
										},
										{
											"begin": 2150,
											"end": 2285,
											"name": "JUMPDEST"
										},
										{
											"begin": 2150,
											"end": 2310,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 2150,
											"end": 2310,
											"name": "SWAP1"
										},
										{
											"begin": 2150,
											"end": 2324,
											"name": "SWAP2"
										},
										{
											"begin": 2150,
											"end": 2324,
											"name": "SWAP1"
										},
										{
											"begin": 2150,
											"end": 2324,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 2150,
											"end": 2324,
											"name": "AND"
										},
										{
											"begin": 2150,
											"end": 2324,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2150,
											"end": 2324,
											"name": "tag",
											"value": "157"
										},
										{
											"begin": 2150,
											"end": 2324,
											"name": "JUMPDEST"
										},
										{
											"begin": 2108,
											"end": 2128,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 2108,
											"end": 2128,
											"name": "SLOAD"
										},
										{
											"begin": 2108,
											"end": 2132,
											"name": "PUSH [tag]",
											"value": "89"
										},
										{
											"begin": 2108,
											"end": 2132,
											"name": "SWAP1"
										},
										{
											"begin": 2108,
											"end": 2338,
											"name": "SWAP2"
										},
										{
											"begin": 2108,
											"end": 2338,
											"name": "SWAP1"
										},
										{
											"begin": 2108,
											"end": 2338,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 2108,
											"end": 2338,
											"name": "AND"
										},
										{
											"begin": 2108,
											"end": 2338,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2108,
											"end": 2338,
											"name": "tag",
											"value": "156"
										},
										{
											"begin": 2108,
											"end": 2338,
											"name": "JUMPDEST"
										},
										{
											"begin": 2089,
											"end": 2338,
											"name": "SWAP1"
										},
										{
											"begin": 2089,
											"end": 2338,
											"name": "POP"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "tag",
											"value": "154"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "JUMPDEST"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "SWAP1"
										},
										{
											"begin": 1939,
											"end": 2345,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "tag",
											"value": "70"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "JUMPDEST"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "SWAP1"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "SLOAD"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "SWAP1"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "EXP"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "SWAP1"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "DIV"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "AND"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "DUP2"
										},
										{
											"begin": 636,
											"end": 662,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "tag",
											"value": "72"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "JUMPDEST"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "SLOAD"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "DUP2"
										},
										{
											"begin": 852,
											"end": 887,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4578,
											"end": 4672,
											"name": "tag",
											"value": "74"
										},
										{
											"begin": 4578,
											"end": 4672,
											"name": "JUMPDEST"
										},
										{
											"begin": 4613,
											"end": 4644,
											"name": "PUSH [tag]",
											"value": "163"
										},
										{
											"begin": 4622,
											"end": 4631,
											"name": "PUSH",
											"value": "C"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4632,
											"end": 4642,
											"name": "CALLER"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "AND"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "AND"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "DUP2"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "MSTORE"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "ADD"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "SWAP1"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "DUP2"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "MSTORE"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "ADD"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "KECCAK256"
										},
										{
											"begin": 4622,
											"end": 4643,
											"name": "SLOAD"
										},
										{
											"begin": 4613,
											"end": 4621,
											"name": "PUSH [tag]",
											"value": "40"
										},
										{
											"begin": 4613,
											"end": 4644,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4613,
											"end": 4644,
											"name": "tag",
											"value": "163"
										},
										{
											"begin": 4613,
											"end": 4644,
											"name": "JUMPDEST"
										},
										{
											"begin": 4654,
											"end": 4665,
											"name": "PUSH [tag]",
											"value": "164"
										},
										{
											"begin": 4654,
											"end": 4663,
											"name": "PUSH [tag]",
											"value": "47"
										},
										{
											"begin": 4654,
											"end": 4665,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4654,
											"end": 4665,
											"name": "tag",
											"value": "164"
										},
										{
											"begin": 4654,
											"end": 4665,
											"name": "JUMPDEST"
										},
										{
											"begin": 4578,
											"end": 4672,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "tag",
											"value": "76"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "JUMPDEST"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "SLOAD"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "DUP2"
										},
										{
											"begin": 700,
											"end": 731,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "tag",
											"value": "79"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "JUMPDEST"
										},
										{
											"begin": 1318,
											"end": 1319,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1301,
											"end": 1314,
											"name": "DUP1"
										},
										{
											"begin": 1301,
											"end": 1314,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SLOAD"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "ADD"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SWAP3"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "DUP2"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SWAP1"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "SSTORE"
										},
										{
											"begin": 1301,
											"end": 1319,
											"name": "POP"
										},
										{
											"begin": 1329,
											"end": 1349,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1352,
											"end": 1365,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1352,
											"end": 1365,
											"name": "SLOAD"
										},
										{
											"begin": 1329,
											"end": 1365,
											"name": "SWAP1"
										},
										{
											"begin": 1329,
											"end": 1365,
											"name": "POP"
										},
										{
											"begin": 2964,
											"end": 2974,
											"name": "CALLER"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "PUSH [tag]",
											"value": "167"
										},
										{
											"begin": 5982,
											"end": 5996,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "tag",
											"value": "167"
										},
										{
											"begin": 5982,
											"end": 5998,
											"name": "JUMPDEST"
										},
										{
											"begin": 5959,
											"end": 5979,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "DUP2"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "SWAP1"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "SSTORE"
										},
										{
											"begin": 5959,
											"end": 5998,
											"name": "POP"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "PUSH [tag]",
											"value": "168"
										},
										{
											"begin": 6025,
											"end": 6049,
											"name": "PUSH [tag]",
											"value": "58"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "tag",
											"value": "168"
										},
										{
											"begin": 6025,
											"end": 6051,
											"name": "JUMPDEST"
										},
										{
											"begin": 6008,
											"end": 6022,
											"name": "PUSH",
											"value": "7"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "DUP2"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "SWAP1"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "SSTORE"
										},
										{
											"begin": 6008,
											"end": 6051,
											"name": "POP"
										},
										{
											"begin": 6084,
											"end": 6085,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "AND"
										},
										{
											"begin": 6065,
											"end": 6072,
											"name": "DUP2"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "AND"
										},
										{
											"begin": 6065,
											"end": 6086,
											"name": "EQ"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "PUSH [tag]",
											"value": "169"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "JUMPI"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "PUSH [tag]",
											"value": "170"
										},
										{
											"begin": 6128,
											"end": 6135,
											"name": "DUP2"
										},
										{
											"begin": 6121,
											"end": 6127,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "tag",
											"value": "170"
										},
										{
											"begin": 6121,
											"end": 6136,
											"name": "JUMPDEST"
										},
										{
											"begin": 6102,
											"end": 6109,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6110,
											"end": 6117,
											"name": "DUP4"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "AND"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "AND"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "MSTORE"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "ADD"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "SWAP1"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "MSTORE"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "ADD"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6102,
											"end": 6118,
											"name": "KECCAK256"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "DUP2"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "SWAP1"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "SSTORE"
										},
										{
											"begin": 6102,
											"end": 6136,
											"name": "POP"
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "SLOAD"
										},
										{
											"begin": 6150,
											"end": 6172,
											"name": "PUSH",
											"value": "9"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6173,
											"end": 6180,
											"name": "DUP4"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "AND"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "AND"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "MSTORE"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "ADD"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "SWAP1"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "MSTORE"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "ADD"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6150,
											"end": 6181,
											"name": "KECCAK256"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "DUP2"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "SWAP1"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "SSTORE"
										},
										{
											"begin": 6150,
											"end": 6204,
											"name": "POP"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "tag",
											"value": "169"
										},
										{
											"begin": 6061,
											"end": 6215,
											"name": "JUMPDEST"
										},
										{
											"begin": 3003,
											"end": 3004,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2994,
											"end": 3000,
											"name": "DUP8"
										},
										{
											"begin": 2994,
											"end": 3004,
											"name": "GT"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "PUSH [tag]",
											"value": "172"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "JUMPI"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "MLOAD"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "DUP2"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "MSTORE"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "ADD"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "DUP1"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "DUP1"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "ADD"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "DUP3"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "DUP2"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "SUB"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "DUP3"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "MSTORE"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "PUSH",
											"value": "E"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "DUP2"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "MSTORE"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "ADD"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "DUP1"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "PUSH",
											"value": "43616E6E6F74207374616B652030000000000000000000000000000000000000"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "DUP2"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "MSTORE"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "POP"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "ADD"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "SWAP2"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "POP"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "POP"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "MLOAD"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "DUP1"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "SWAP2"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "SUB"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "SWAP1"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "REVERT"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "tag",
											"value": "172"
										},
										{
											"begin": 2986,
											"end": 3023,
											"name": "JUMPDEST"
										},
										{
											"begin": 3048,
											"end": 3072,
											"name": "PUSH [tag]",
											"value": "173"
										},
										{
											"begin": 3065,
											"end": 3071,
											"name": "DUP8"
										},
										{
											"begin": 3048,
											"end": 3060,
											"name": "PUSH",
											"value": "B"
										},
										{
											"begin": 3048,
											"end": 3060,
											"name": "SLOAD"
										},
										{
											"begin": 3048,
											"end": 3064,
											"name": "PUSH [tag]",
											"value": "89"
										},
										{
											"begin": 3048,
											"end": 3064,
											"name": "SWAP1"
										},
										{
											"begin": 3048,
											"end": 3072,
											"name": "SWAP2"
										},
										{
											"begin": 3048,
											"end": 3072,
											"name": "SWAP1"
										},
										{
											"begin": 3048,
											"end": 3072,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 3048,
											"end": 3072,
											"name": "AND"
										},
										{
											"begin": 3048,
											"end": 3072,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3048,
											"end": 3072,
											"name": "tag",
											"value": "173"
										},
										{
											"begin": 3048,
											"end": 3072,
											"name": "JUMPDEST"
										},
										{
											"begin": 3033,
											"end": 3045,
											"name": "PUSH",
											"value": "B"
										},
										{
											"begin": 3033,
											"end": 3072,
											"name": "DUP2"
										},
										{
											"begin": 3033,
											"end": 3072,
											"name": "SWAP1"
										},
										{
											"begin": 3033,
											"end": 3072,
											"name": "SSTORE"
										},
										{
											"begin": 3033,
											"end": 3072,
											"name": "POP"
										},
										{
											"begin": 3106,
											"end": 3139,
											"name": "PUSH [tag]",
											"value": "174"
										},
										{
											"begin": 3132,
											"end": 3138,
											"name": "DUP8"
										},
										{
											"begin": 3106,
											"end": 3115,
											"name": "PUSH",
											"value": "C"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3116,
											"end": 3126,
											"name": "CALLER"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "AND"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "AND"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "DUP2"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "MSTORE"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "ADD"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "SWAP1"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "DUP2"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "MSTORE"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "ADD"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "KECCAK256"
										},
										{
											"begin": 3106,
											"end": 3127,
											"name": "SLOAD"
										},
										{
											"begin": 3106,
											"end": 3131,
											"name": "PUSH [tag]",
											"value": "89"
										},
										{
											"begin": 3106,
											"end": 3131,
											"name": "SWAP1"
										},
										{
											"begin": 3106,
											"end": 3139,
											"name": "SWAP2"
										},
										{
											"begin": 3106,
											"end": 3139,
											"name": "SWAP1"
										},
										{
											"begin": 3106,
											"end": 3139,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 3106,
											"end": 3139,
											"name": "AND"
										},
										{
											"begin": 3106,
											"end": 3139,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3106,
											"end": 3139,
											"name": "tag",
											"value": "174"
										},
										{
											"begin": 3106,
											"end": 3139,
											"name": "JUMPDEST"
										},
										{
											"begin": 3082,
											"end": 3091,
											"name": "PUSH",
											"value": "C"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3092,
											"end": 3102,
											"name": "CALLER"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "AND"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "AND"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "DUP2"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "MSTORE"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "ADD"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "SWAP1"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "DUP2"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "MSTORE"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "ADD"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "KECCAK256"
										},
										{
											"begin": 3082,
											"end": 3139,
											"name": "DUP2"
										},
										{
											"begin": 3082,
											"end": 3139,
											"name": "SWAP1"
										},
										{
											"begin": 3082,
											"end": 3139,
											"name": "SSTORE"
										},
										{
											"begin": 3082,
											"end": 3139,
											"name": "POP"
										},
										{
											"begin": 3192,
											"end": 3204,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 3192,
											"end": 3204,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3192,
											"end": 3204,
											"name": "SWAP1"
										},
										{
											"begin": 3192,
											"end": 3204,
											"name": "SLOAD"
										},
										{
											"begin": 3192,
											"end": 3204,
											"name": "SWAP1"
										},
										{
											"begin": 3192,
											"end": 3204,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 3192,
											"end": 3204,
											"name": "EXP"
										},
										{
											"begin": 3192,
											"end": 3204,
											"name": "SWAP1"
										},
										{
											"begin": 3192,
											"end": 3204,
											"name": "DIV"
										},
										{
											"begin": 3192,
											"end": 3204,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3192,
											"end": 3204,
											"name": "AND"
										},
										{
											"begin": 3168,
											"end": 3213,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3168,
											"end": 3213,
											"name": "AND"
										},
										{
											"begin": 3168,
											"end": 3213,
											"name": "PUSH",
											"value": "D505ACCF"
										},
										{
											"begin": 3227,
											"end": 3237,
											"name": "CALLER"
										},
										{
											"begin": 3259,
											"end": 3263,
											"name": "ADDRESS"
										},
										{
											"begin": 3278,
											"end": 3284,
											"name": "DUP11"
										},
										{
											"begin": 3298,
											"end": 3306,
											"name": "DUP11"
										},
										{
											"begin": 3320,
											"end": 3321,
											"name": "DUP11"
										},
										{
											"begin": 3335,
											"end": 3336,
											"name": "DUP11"
										},
										{
											"begin": 3350,
											"end": 3351,
											"name": "DUP11"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "MLOAD"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP9"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "AND"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "SHL"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP2"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "MSTORE"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "ADD"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP1"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP9"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "AND"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "AND"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP2"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "MSTORE"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "ADD"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP8"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "AND"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "AND"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP2"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "MSTORE"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "ADD"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP7"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP2"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "MSTORE"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "ADD"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP6"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP2"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "MSTORE"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "ADD"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP5"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "AND"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "AND"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP2"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "MSTORE"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "ADD"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP4"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP2"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "MSTORE"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "ADD"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP3"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP2"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "MSTORE"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "ADD"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "SWAP8"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "MLOAD"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP1"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP4"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "SUB"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP2"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP8"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "DUP1"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "EXTCODESIZE"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "175"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "175"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "GAS"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "CALL"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "176"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "176"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3168,
											"end": 3361,
											"name": "POP"
										},
										{
											"begin": 3372,
											"end": 3436,
											"name": "PUSH [tag]",
											"value": "177"
										},
										{
											"begin": 3402,
											"end": 3412,
											"name": "CALLER"
										},
										{
											"begin": 3422,
											"end": 3426,
											"name": "ADDRESS"
										},
										{
											"begin": 3429,
											"end": 3435,
											"name": "DUP10"
										},
										{
											"begin": 3372,
											"end": 3384,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 3372,
											"end": 3384,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3372,
											"end": 3384,
											"name": "SWAP1"
										},
										{
											"begin": 3372,
											"end": 3384,
											"name": "SLOAD"
										},
										{
											"begin": 3372,
											"end": 3384,
											"name": "SWAP1"
										},
										{
											"begin": 3372,
											"end": 3384,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 3372,
											"end": 3384,
											"name": "EXP"
										},
										{
											"begin": 3372,
											"end": 3384,
											"name": "SWAP1"
										},
										{
											"begin": 3372,
											"end": 3384,
											"name": "DIV"
										},
										{
											"begin": 3372,
											"end": 3384,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3372,
											"end": 3384,
											"name": "AND"
										},
										{
											"begin": 3372,
											"end": 3401,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3372,
											"end": 3401,
											"name": "AND"
										},
										{
											"begin": 3372,
											"end": 3401,
											"name": "PUSH [tag]",
											"value": "152"
										},
										{
											"begin": 3372,
											"end": 3401,
											"name": "SWAP1"
										},
										{
											"begin": 3372,
											"end": 3436,
											"name": "SWAP4"
										},
										{
											"begin": 3372,
											"end": 3436,
											"name": "SWAP3"
										},
										{
											"begin": 3372,
											"end": 3436,
											"name": "SWAP2"
										},
										{
											"begin": 3372,
											"end": 3436,
											"name": "SWAP1"
										},
										{
											"begin": 3372,
											"end": 3436,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 3372,
											"end": 3436,
											"name": "AND"
										},
										{
											"begin": 3372,
											"end": 3436,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3372,
											"end": 3436,
											"name": "tag",
											"value": "177"
										},
										{
											"begin": 3372,
											"end": 3436,
											"name": "JUMPDEST"
										},
										{
											"begin": 3458,
											"end": 3468,
											"name": "CALLER"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "AND"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "PUSH",
											"value": "9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D"
										},
										{
											"begin": 3470,
											"end": 3476,
											"name": "DUP9"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "MLOAD"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "DUP1"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "DUP3"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "DUP2"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "MSTORE"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "ADD"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "SWAP2"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "POP"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "POP"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "MLOAD"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "DUP1"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "SWAP2"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "SUB"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "SWAP1"
										},
										{
											"begin": 3451,
											"end": 3477,
											"name": "LOG2"
										},
										{
											"begin": 1375,
											"end": 1376,
											"name": "POP"
										},
										{
											"begin": 1410,
											"end": 1423,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1410,
											"end": 1423,
											"name": "SLOAD"
										},
										{
											"begin": 1394,
											"end": 1406,
											"name": "DUP2"
										},
										{
											"begin": 1394,
											"end": 1423,
											"name": "EQ"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH [tag]",
											"value": "178"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "JUMPI"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MLOAD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP3"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SUB"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP3"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MSTORE"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "ADD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "POP"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "MLOAD"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "DUP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP2"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SUB"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "SWAP1"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "REVERT"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "tag",
											"value": "178"
										},
										{
											"begin": 1386,
											"end": 1459,
											"name": "JUMPDEST"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "POP"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "POP"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "POP"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "POP"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "POP"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "POP"
										},
										{
											"begin": 2793,
											"end": 3484,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "tag",
											"value": "86"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "JUMPDEST"
										},
										{
											"begin": 1332,
											"end": 1339,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1364,
											"end": 1365,
											"name": "DUP3"
										},
										{
											"begin": 1359,
											"end": 1360,
											"name": "DUP3"
										},
										{
											"begin": 1359,
											"end": 1365,
											"name": "GT"
										},
										{
											"begin": 1359,
											"end": 1365,
											"name": "ISZERO"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH [tag]",
											"value": "180"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "JUMPI"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MLOAD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MSTORE"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "ADD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP1"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP1"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "ADD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP3"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "SUB"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP3"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MSTORE"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "1E"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MSTORE"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "ADD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP1"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MSTORE"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "POP"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "ADD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "SWAP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "POP"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "POP"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "MLOAD"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "DUP1"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "SWAP2"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "SUB"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "SWAP1"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "REVERT"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "tag",
											"value": "180"
										},
										{
											"begin": 1351,
											"end": 1400,
											"name": "JUMPDEST"
										},
										{
											"begin": 1410,
											"end": 1419,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1426,
											"end": 1427,
											"name": "DUP3"
										},
										{
											"begin": 1422,
											"end": 1423,
											"name": "DUP5"
										},
										{
											"begin": 1422,
											"end": 1427,
											"name": "SUB"
										},
										{
											"begin": 1410,
											"end": 1427,
											"name": "SWAP1"
										},
										{
											"begin": 1410,
											"end": 1427,
											"name": "POP"
										},
										{
											"begin": 1445,
											"end": 1446,
											"name": "DUP1"
										},
										{
											"begin": 1438,
											"end": 1446,
											"name": "SWAP2"
										},
										{
											"begin": 1438,
											"end": 1446,
											"name": "POP"
										},
										{
											"begin": 1438,
											"end": 1446,
											"name": "POP"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "SWAP3"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "SWAP2"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "POP"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "POP"
										},
										{
											"begin": 1274,
											"end": 1453,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1693,
											"end": 2152,
											"name": "tag",
											"value": "87"
										},
										{
											"begin": 1693,
											"end": 2152,
											"name": "JUMPDEST"
										},
										{
											"begin": 1751,
											"end": 1758,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1997,
											"end": 1998,
											"name": "DUP1"
										},
										{
											"begin": 1992,
											"end": 1993,
											"name": "DUP4"
										},
										{
											"begin": 1992,
											"end": 1998,
											"name": "EQ"
										},
										{
											"begin": 1988,
											"end": 2033,
											"name": "ISZERO"
										},
										{
											"begin": 1988,
											"end": 2033,
											"name": "PUSH [tag]",
											"value": "182"
										},
										{
											"begin": 1988,
											"end": 2033,
											"name": "JUMPI"
										},
										{
											"begin": 2021,
											"end": 2022,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2014,
											"end": 2022,
											"name": "SWAP1"
										},
										{
											"begin": 2014,
											"end": 2022,
											"name": "POP"
										},
										{
											"begin": 2014,
											"end": 2022,
											"name": "PUSH [tag]",
											"value": "181"
										},
										{
											"begin": 2014,
											"end": 2022,
											"name": "JUMP"
										},
										{
											"begin": 1988,
											"end": 2033,
											"name": "tag",
											"value": "182"
										},
										{
											"begin": 1988,
											"end": 2033,
											"name": "JUMPDEST"
										},
										{
											"begin": 2043,
											"end": 2052,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2059,
											"end": 2060,
											"name": "DUP3"
										},
										{
											"begin": 2055,
											"end": 2056,
											"name": "DUP5"
										},
										{
											"begin": 2055,
											"end": 2060,
											"name": "MUL"
										},
										{
											"begin": 2043,
											"end": 2060,
											"name": "SWAP1"
										},
										{
											"begin": 2043,
											"end": 2060,
											"name": "POP"
										},
										{
											"begin": 2087,
											"end": 2088,
											"name": "DUP3"
										},
										{
											"begin": 2082,
											"end": 2083,
											"name": "DUP5"
										},
										{
											"begin": 2078,
											"end": 2079,
											"name": "DUP3"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "DUP2"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "PUSH [tag]",
											"value": "183"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "JUMPI"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "INVALID"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "tag",
											"value": "183"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "JUMPDEST"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "DIV"
										},
										{
											"begin": 2078,
											"end": 2088,
											"name": "EQ"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "PUSH [tag]",
											"value": "184"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "JUMPI"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "MLOAD"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "DUP2"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "MSTORE"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "ADD"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "DUP1"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "DUP1"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "ADD"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "DUP3"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "DUP2"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "SUB"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "DUP3"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "MSTORE"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "PUSH",
											"value": "21"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "DUP2"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "MSTORE"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "ADD"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "DUP1"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "PUSH data",
											"value": "9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "PUSH",
											"value": "21"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "SWAP2"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "CODECOPY"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "ADD"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "SWAP2"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "POP"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "POP"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "MLOAD"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "DUP1"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "SWAP2"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "SUB"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "SWAP1"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "REVERT"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "tag",
											"value": "184"
										},
										{
											"begin": 2070,
											"end": 2126,
											"name": "JUMPDEST"
										},
										{
											"begin": 2144,
											"end": 2145,
											"name": "DUP1"
										},
										{
											"begin": 2137,
											"end": 2145,
											"name": "SWAP2"
										},
										{
											"begin": 2137,
											"end": 2145,
											"name": "POP"
										},
										{
											"begin": 2137,
											"end": 2145,
											"name": "POP"
										},
										{
											"begin": 1693,
											"end": 2152,
											"name": "tag",
											"value": "181"
										},
										{
											"begin": 1693,
											"end": 2152,
											"name": "JUMPDEST"
										},
										{
											"begin": 1693,
											"end": 2152,
											"name": "SWAP3"
										},
										{
											"begin": 1693,
											"end": 2152,
											"name": "SWAP2"
										},
										{
											"begin": 1693,
											"end": 2152,
											"name": "POP"
										},
										{
											"begin": 1693,
											"end": 2152,
											"name": "POP"
										},
										{
											"begin": 1693,
											"end": 2152,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2607,
											"end": 2933,
											"name": "tag",
											"value": "88"
										},
										{
											"begin": 2607,
											"end": 2933,
											"name": "JUMPDEST"
										},
										{
											"begin": 2665,
											"end": 2672,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2762,
											"end": 2763,
											"name": "DUP1"
										},
										{
											"begin": 2758,
											"end": 2759,
											"name": "DUP3"
										},
										{
											"begin": 2758,
											"end": 2763,
											"name": "GT"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "PUSH [tag]",
											"value": "186"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "JUMPI"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "MLOAD"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "DUP2"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "MSTORE"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "ADD"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "DUP1"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "DUP1"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "ADD"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "DUP3"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "DUP2"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "SUB"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "DUP3"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "MSTORE"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "PUSH",
											"value": "1A"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "DUP2"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "MSTORE"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "ADD"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "DUP1"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "PUSH",
											"value": "536166654D6174683A206469766973696F6E206279207A65726F000000000000"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "DUP2"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "MSTORE"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "POP"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "ADD"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "SWAP2"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "POP"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "POP"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "MLOAD"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "DUP1"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "SWAP2"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "SUB"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "SWAP1"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "REVERT"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "tag",
											"value": "186"
										},
										{
											"begin": 2750,
											"end": 2794,
											"name": "JUMPDEST"
										},
										{
											"begin": 2804,
											"end": 2813,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2820,
											"end": 2821,
											"name": "DUP3"
										},
										{
											"begin": 2816,
											"end": 2817,
											"name": "DUP5"
										},
										{
											"begin": 2816,
											"end": 2821,
											"name": "DUP2"
										},
										{
											"begin": 2816,
											"end": 2821,
											"name": "PUSH [tag]",
											"value": "187"
										},
										{
											"begin": 2816,
											"end": 2821,
											"name": "JUMPI"
										},
										{
											"begin": 2816,
											"end": 2821,
											"name": "INVALID"
										},
										{
											"begin": 2816,
											"end": 2821,
											"name": "tag",
											"value": "187"
										},
										{
											"begin": 2816,
											"end": 2821,
											"name": "JUMPDEST"
										},
										{
											"begin": 2816,
											"end": 2821,
											"name": "DIV"
										},
										{
											"begin": 2804,
											"end": 2821,
											"name": "SWAP1"
										},
										{
											"begin": 2804,
											"end": 2821,
											"name": "POP"
										},
										{
											"begin": 2925,
											"end": 2926,
											"name": "DUP1"
										},
										{
											"begin": 2918,
											"end": 2926,
											"name": "SWAP2"
										},
										{
											"begin": 2918,
											"end": 2926,
											"name": "POP"
										},
										{
											"begin": 2918,
											"end": 2926,
											"name": "POP"
										},
										{
											"begin": 2607,
											"end": 2933,
											"name": "SWAP3"
										},
										{
											"begin": 2607,
											"end": 2933,
											"name": "SWAP2"
										},
										{
											"begin": 2607,
											"end": 2933,
											"name": "POP"
										},
										{
											"begin": 2607,
											"end": 2933,
											"name": "POP"
										},
										{
											"begin": 2607,
											"end": 2933,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "tag",
											"value": "89"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "JUMPDEST"
										},
										{
											"begin": 892,
											"end": 899,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP1"
										},
										{
											"begin": 927,
											"end": 928,
											"name": "DUP3"
										},
										{
											"begin": 923,
											"end": 924,
											"name": "DUP5"
										},
										{
											"begin": 923,
											"end": 928,
											"name": "ADD"
										},
										{
											"begin": 911,
											"end": 928,
											"name": "SWAP1"
										},
										{
											"begin": 911,
											"end": 928,
											"name": "POP"
										},
										{
											"begin": 951,
											"end": 952,
											"name": "DUP4"
										},
										{
											"begin": 946,
											"end": 947,
											"name": "DUP2"
										},
										{
											"begin": 946,
											"end": 952,
											"name": "LT"
										},
										{
											"begin": 946,
											"end": 952,
											"name": "ISZERO"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH [tag]",
											"value": "189"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "JUMPI"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MLOAD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MSTORE"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "ADD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP1"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP1"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "ADD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP3"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "SUB"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP3"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MSTORE"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "1B"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MSTORE"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "ADD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP1"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MSTORE"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "POP"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "ADD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "SWAP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "POP"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "POP"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MLOAD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP1"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "SWAP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "SUB"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "SWAP1"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "REVERT"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "tag",
											"value": "189"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "JUMPDEST"
										},
										{
											"begin": 1002,
											"end": 1003,
											"name": "DUP1"
										},
										{
											"begin": 995,
											"end": 1003,
											"name": "SWAP2"
										},
										{
											"begin": 995,
											"end": 1003,
											"name": "POP"
										},
										{
											"begin": 995,
											"end": 1003,
											"name": "POP"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "SWAP3"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "SWAP2"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "POP"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "POP"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 662,
											"end": 836,
											"name": "tag",
											"value": "104"
										},
										{
											"begin": 662,
											"end": 836,
											"name": "JUMPDEST"
										},
										{
											"begin": 744,
											"end": 829,
											"name": "PUSH [tag]",
											"value": "191"
										},
										{
											"begin": 763,
											"end": 768,
											"name": "DUP4"
										},
										{
											"begin": 793,
											"end": 798,
											"name": "DUP5"
										},
										{
											"begin": 793,
											"end": 807,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 793,
											"end": 807,
											"name": "AND"
										},
										{
											"begin": 793,
											"end": 807,
											"name": "PUSH",
											"value": "A9059CBB"
										},
										{
											"begin": 793,
											"end": 816,
											"name": "SWAP1"
										},
										{
											"begin": 793,
											"end": 816,
											"name": "POP"
										},
										{
											"begin": 793,
											"end": 816,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 793,
											"end": 816,
											"name": "SHL"
										},
										{
											"begin": 818,
											"end": 820,
											"name": "DUP5"
										},
										{
											"begin": 822,
											"end": 827,
											"name": "DUP5"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "MLOAD"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "ADD"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "DUP1"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "DUP4"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "AND"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "AND"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "DUP2"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "MSTORE"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "ADD"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "DUP3"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "DUP2"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "MSTORE"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "ADD"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "SWAP3"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "POP"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "POP"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "POP"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "MLOAD"
										},
										{
											"begin": 49,
											"end": 53,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 39,
											"end": 46,
											"name": "DUP2"
										},
										{
											"begin": 30,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 26,
											"end": 47,
											"name": "SUB"
										},
										{
											"begin": 22,
											"end": 54,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 20,
											"name": "DUP2"
										},
										{
											"begin": 6,
											"end": 55,
											"name": "MSTORE"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "SWAP1"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "MSTORE"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "SWAP1"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "NOT"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "AND"
										},
										{
											"begin": 38,
											"end": 42,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 29,
											"end": 36,
											"name": "DUP3"
										},
										{
											"begin": 25,
											"end": 43,
											"name": "ADD"
										},
										{
											"begin": 67,
											"end": 77,
											"name": "DUP1"
										},
										{
											"begin": 61,
											"end": 78,
											"name": "MLOAD"
										},
										{
											"begin": 96,
											"end": 154,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 199,
											"end": 207,
											"name": "DUP4"
										},
										{
											"begin": 192,
											"end": 196,
											"name": "DUP2"
										},
										{
											"begin": 186,
											"end": 190,
											"name": "DUP4"
										},
										{
											"begin": 182,
											"end": 197,
											"name": "AND"
										},
										{
											"begin": 179,
											"end": 208,
											"name": "OR"
										},
										{
											"begin": 167,
											"end": 177,
											"name": "DUP4"
										},
										{
											"begin": 160,
											"end": 209,
											"name": "MSTORE"
										},
										{
											"begin": 0,
											"end": 215,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 215,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 215,
											"name": "POP"
										},
										{
											"begin": 770,
											"end": 828,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 762,
											"name": "PUSH [tag]",
											"value": "192"
										},
										{
											"begin": 744,
											"end": 829,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 744,
											"end": 829,
											"name": "tag",
											"value": "191"
										},
										{
											"begin": 744,
											"end": 829,
											"name": "JUMPDEST"
										},
										{
											"begin": 662,
											"end": 836,
											"name": "POP"
										},
										{
											"begin": 662,
											"end": 836,
											"name": "POP"
										},
										{
											"begin": 662,
											"end": 836,
											"name": "POP"
										},
										{
											"begin": 662,
											"end": 836,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 358,
											"end": 462,
											"name": "tag",
											"value": "140"
										},
										{
											"begin": 358,
											"end": 462,
											"name": "JUMPDEST"
										},
										{
											"begin": 416,
											"end": 423,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 446,
											"end": 447,
											"name": "DUP2"
										},
										{
											"begin": 442,
											"end": 443,
											"name": "DUP4"
										},
										{
											"begin": 442,
											"end": 447,
											"name": "LT"
										},
										{
											"begin": 442,
											"end": 455,
											"name": "PUSH [tag]",
											"value": "194"
										},
										{
											"begin": 442,
											"end": 455,
											"name": "JUMPI"
										},
										{
											"begin": 454,
											"end": 455,
											"name": "DUP2"
										},
										{
											"begin": 442,
											"end": 455,
											"name": "PUSH [tag]",
											"value": "195"
										},
										{
											"begin": 442,
											"end": 455,
											"name": "JUMP"
										},
										{
											"begin": 442,
											"end": 455,
											"name": "tag",
											"value": "194"
										},
										{
											"begin": 442,
											"end": 455,
											"name": "JUMPDEST"
										},
										{
											"begin": 450,
											"end": 451,
											"name": "DUP3"
										},
										{
											"begin": 442,
											"end": 455,
											"name": "tag",
											"value": "195"
										},
										{
											"begin": 442,
											"end": 455,
											"name": "JUMPDEST"
										},
										{
											"begin": 435,
											"end": 455,
											"name": "SWAP1"
										},
										{
											"begin": 435,
											"end": 455,
											"name": "POP"
										},
										{
											"begin": 358,
											"end": 462,
											"name": "SWAP3"
										},
										{
											"begin": 358,
											"end": 462,
											"name": "SWAP2"
										},
										{
											"begin": 358,
											"end": 462,
											"name": "POP"
										},
										{
											"begin": 358,
											"end": 462,
											"name": "POP"
										},
										{
											"begin": 358,
											"end": 462,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 842,
											"end": 1044,
											"name": "tag",
											"value": "152"
										},
										{
											"begin": 842,
											"end": 1044,
											"name": "JUMPDEST"
										},
										{
											"begin": 942,
											"end": 1037,
											"name": "PUSH [tag]",
											"value": "197"
										},
										{
											"begin": 961,
											"end": 966,
											"name": "DUP5"
										},
										{
											"begin": 991,
											"end": 996,
											"name": "DUP6"
										},
										{
											"begin": 991,
											"end": 1009,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 991,
											"end": 1009,
											"name": "AND"
										},
										{
											"begin": 991,
											"end": 1009,
											"name": "PUSH",
											"value": "23B872DD"
										},
										{
											"begin": 991,
											"end": 1018,
											"name": "SWAP1"
										},
										{
											"begin": 991,
											"end": 1018,
											"name": "POP"
										},
										{
											"begin": 991,
											"end": 1018,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 991,
											"end": 1018,
											"name": "SHL"
										},
										{
											"begin": 1020,
											"end": 1024,
											"name": "DUP6"
										},
										{
											"begin": 1026,
											"end": 1028,
											"name": "DUP6"
										},
										{
											"begin": 1030,
											"end": 1035,
											"name": "DUP6"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "MLOAD"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "ADD"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "DUP1"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "DUP5"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "AND"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "AND"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "DUP2"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "MSTORE"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "ADD"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "DUP4"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "AND"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "AND"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "DUP2"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "MSTORE"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "ADD"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "DUP3"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "DUP2"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "MSTORE"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "ADD"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "SWAP4"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "POP"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "POP"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "POP"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "POP"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "MLOAD"
										},
										{
											"begin": 49,
											"end": 53,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 39,
											"end": 46,
											"name": "DUP2"
										},
										{
											"begin": 30,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 26,
											"end": 47,
											"name": "SUB"
										},
										{
											"begin": 22,
											"end": 54,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 20,
											"name": "DUP2"
										},
										{
											"begin": 6,
											"end": 55,
											"name": "MSTORE"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "SWAP1"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "MSTORE"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "SWAP1"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "NOT"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "AND"
										},
										{
											"begin": 38,
											"end": 42,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 29,
											"end": 36,
											"name": "DUP3"
										},
										{
											"begin": 25,
											"end": 43,
											"name": "ADD"
										},
										{
											"begin": 67,
											"end": 77,
											"name": "DUP1"
										},
										{
											"begin": 61,
											"end": 78,
											"name": "MLOAD"
										},
										{
											"begin": 96,
											"end": 154,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 199,
											"end": 207,
											"name": "DUP4"
										},
										{
											"begin": 192,
											"end": 196,
											"name": "DUP2"
										},
										{
											"begin": 186,
											"end": 190,
											"name": "DUP4"
										},
										{
											"begin": 182,
											"end": 197,
											"name": "AND"
										},
										{
											"begin": 179,
											"end": 208,
											"name": "OR"
										},
										{
											"begin": 167,
											"end": 177,
											"name": "DUP4"
										},
										{
											"begin": 160,
											"end": 209,
											"name": "MSTORE"
										},
										{
											"begin": 0,
											"end": 215,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 215,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 215,
											"name": "POP"
										},
										{
											"begin": 968,
											"end": 1036,
											"name": "POP"
										},
										{
											"begin": 942,
											"end": 960,
											"name": "PUSH [tag]",
											"value": "192"
										},
										{
											"begin": 942,
											"end": 1037,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 942,
											"end": 1037,
											"name": "tag",
											"value": "197"
										},
										{
											"begin": 942,
											"end": 1037,
											"name": "JUMPDEST"
										},
										{
											"begin": 842,
											"end": 1044,
											"name": "POP"
										},
										{
											"begin": 842,
											"end": 1044,
											"name": "POP"
										},
										{
											"begin": 842,
											"end": 1044,
											"name": "POP"
										},
										{
											"begin": 842,
											"end": 1044,
											"name": "POP"
										},
										{
											"begin": 842,
											"end": 1044,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2621,
											"end": 3716,
											"name": "tag",
											"value": "192"
										},
										{
											"begin": 2621,
											"end": 3716,
											"name": "JUMPDEST"
										},
										{
											"begin": 3216,
											"end": 3243,
											"name": "PUSH [tag]",
											"value": "199"
										},
										{
											"begin": 3224,
											"end": 3229,
											"name": "DUP3"
										},
										{
											"begin": 3216,
											"end": 3241,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3216,
											"end": 3241,
											"name": "AND"
										},
										{
											"begin": 3216,
											"end": 3241,
											"name": "PUSH [tag]",
											"value": "200"
										},
										{
											"begin": 3216,
											"end": 3243,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3216,
											"end": 3243,
											"name": "tag",
											"value": "199"
										},
										{
											"begin": 3216,
											"end": 3243,
											"name": "JUMPDEST"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "PUSH [tag]",
											"value": "201"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "JUMPI"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "MLOAD"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "DUP2"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "MSTORE"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "ADD"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "DUP1"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "DUP1"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "ADD"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "DUP3"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "DUP2"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "SUB"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "DUP3"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "MSTORE"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "DUP2"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "MSTORE"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "ADD"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "DUP1"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "PUSH",
											"value": "5361666545524332303A2063616C6C20746F206E6F6E2D636F6E747261637400"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "DUP2"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "MSTORE"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "POP"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "ADD"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "SWAP2"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "POP"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "POP"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "MLOAD"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "DUP1"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "SWAP2"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "SUB"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "SWAP1"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "REVERT"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "tag",
											"value": "201"
										},
										{
											"begin": 3208,
											"end": 3279,
											"name": "JUMPDEST"
										},
										{
											"begin": 3350,
											"end": 3362,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3364,
											"end": 3387,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 3399,
											"end": 3404,
											"name": "DUP4"
										},
										{
											"begin": 3391,
											"end": 3410,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3391,
											"end": 3410,
											"name": "AND"
										},
										{
											"begin": 3411,
											"end": 3415,
											"name": "DUP4"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "MLOAD"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "DUP1"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "DUP3"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "DUP1"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "MLOAD"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "SWAP1"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "ADD"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "SWAP1"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "DUP1"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "DUP4"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "DUP4"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "tag",
											"value": "202"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "JUMPDEST"
										},
										{
											"begin": 66,
											"end": 68,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 61,
											"end": 64,
											"name": "DUP4"
										},
										{
											"begin": 58,
											"end": 69,
											"name": "LT"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "PUSH [tag]",
											"value": "204"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "JUMPI"
										},
										{
											"begin": 182,
											"end": 185,
											"name": "DUP1"
										},
										{
											"begin": 176,
											"end": 186,
											"name": "MLOAD"
										},
										{
											"begin": 171,
											"end": 174,
											"name": "DUP3"
										},
										{
											"begin": 164,
											"end": 187,
											"name": "MSTORE"
										},
										{
											"begin": 98,
											"end": 100,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 93,
											"end": 96,
											"name": "DUP3"
										},
										{
											"begin": 89,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 82,
											"end": 101,
											"name": "SWAP2"
										},
										{
											"begin": 82,
											"end": 101,
											"name": "POP"
										},
										{
											"begin": 123,
											"end": 125,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 118,
											"end": 121,
											"name": "DUP2"
										},
										{
											"begin": 114,
											"end": 126,
											"name": "ADD"
										},
										{
											"begin": 107,
											"end": 126,
											"name": "SWAP1"
										},
										{
											"begin": 107,
											"end": 126,
											"name": "POP"
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 143,
											"end": 146,
											"name": "DUP4"
										},
										{
											"begin": 139,
											"end": 151,
											"name": "SUB"
										},
										{
											"begin": 132,
											"end": 151,
											"name": "SWAP3"
										},
										{
											"begin": 132,
											"end": 151,
											"name": "POP"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "PUSH [tag]",
											"value": "202"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "JUMP"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "tag",
											"value": "204"
										},
										{
											"begin": 36,
											"end": 189,
											"name": "JUMPDEST"
										},
										{
											"begin": 274,
											"end": 275,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 267,
											"end": 270,
											"name": "DUP4"
										},
										{
											"begin": 263,
											"end": 265,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 259,
											"end": 271,
											"name": "SUB"
										},
										{
											"begin": 254,
											"end": 257,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 250,
											"end": 272,
											"name": "EXP"
										},
										{
											"begin": 246,
											"end": 276,
											"name": "SUB"
										},
										{
											"begin": 315,
											"end": 319,
											"name": "DUP1"
										},
										{
											"begin": 311,
											"end": 320,
											"name": "NOT"
										},
										{
											"begin": 305,
											"end": 308,
											"name": "DUP3"
										},
										{
											"begin": 299,
											"end": 309,
											"name": "MLOAD"
										},
										{
											"begin": 295,
											"end": 321,
											"name": "AND"
										},
										{
											"begin": 356,
											"end": 360,
											"name": "DUP2"
										},
										{
											"begin": 350,
											"end": 353,
											"name": "DUP5"
										},
										{
											"begin": 344,
											"end": 354,
											"name": "MLOAD"
										},
										{
											"begin": 340,
											"end": 361,
											"name": "AND"
										},
										{
											"begin": 389,
											"end": 396,
											"name": "DUP1"
										},
										{
											"begin": 380,
											"end": 387,
											"name": "DUP3"
										},
										{
											"begin": 377,
											"end": 397,
											"name": "OR"
										},
										{
											"begin": 372,
											"end": 375,
											"name": "DUP6"
										},
										{
											"begin": 365,
											"end": 398,
											"name": "MSTORE"
										},
										{
											"begin": 3,
											"end": 402,
											"name": "POP"
										},
										{
											"begin": 3,
											"end": 402,
											"name": "POP"
										},
										{
											"begin": 3,
											"end": 402,
											"name": "POP"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "POP"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "POP"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "POP"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "SWAP1"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "POP"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "ADD"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "SWAP2"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "POP"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "POP"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "MLOAD"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "DUP1"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "DUP4"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "SUB"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "DUP2"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "DUP7"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "GAS"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "CALL"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "SWAP2"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "POP"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "POP"
										},
										{
											"begin": 3391,
											"end": 3416,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 14,
											"end": 15,
											"name": "DUP1"
										},
										{
											"begin": 21,
											"end": 22,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "DUP2"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "EQ"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "PUSH [tag]",
											"value": "206"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "JUMPI"
										},
										{
											"begin": 75,
											"end": 79,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 69,
											"end": 80,
											"name": "MLOAD"
										},
										{
											"begin": 64,
											"end": 80,
											"name": "SWAP2"
										},
										{
											"begin": 64,
											"end": 80,
											"name": "POP"
										},
										{
											"begin": 144,
											"end": 148,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 140,
											"end": 149,
											"name": "NOT"
										},
										{
											"begin": 133,
											"end": 137,
											"name": "PUSH",
											"value": "3F"
										},
										{
											"begin": 115,
											"end": 131,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 111,
											"end": 138,
											"name": "ADD"
										},
										{
											"begin": 107,
											"end": 150,
											"name": "AND"
										},
										{
											"begin": 104,
											"end": 105,
											"name": "DUP3"
										},
										{
											"begin": 100,
											"end": 151,
											"name": "ADD"
										},
										{
											"begin": 94,
											"end": 98,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 87,
											"end": 152,
											"name": "MSTORE"
										},
										{
											"begin": 169,
											"end": 185,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 166,
											"end": 167,
											"name": "DUP3"
										},
										{
											"begin": 159,
											"end": 186,
											"name": "MSTORE"
										},
										{
											"begin": 225,
											"end": 241,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 222,
											"end": 223,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 215,
											"end": 219,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 212,
											"end": 213,
											"name": "DUP5"
										},
										{
											"begin": 208,
											"end": 220,
											"name": "ADD"
										},
										{
											"begin": 193,
											"end": 242,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 7,
											"end": 249,
											"name": "PUSH [tag]",
											"value": "205"
										},
										{
											"begin": 7,
											"end": 249,
											"name": "JUMP"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "tag",
											"value": "206"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "JUMPDEST"
										},
										{
											"begin": 36,
											"end": 40,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 31,
											"end": 40,
											"name": "SWAP2"
										},
										{
											"begin": 31,
											"end": 40,
											"name": "POP"
										},
										{
											"begin": 7,
											"end": 249,
											"name": "tag",
											"value": "205"
										},
										{
											"begin": 7,
											"end": 249,
											"name": "JUMPDEST"
										},
										{
											"begin": 7,
											"end": 249,
											"name": "POP"
										},
										{
											"begin": 3349,
											"end": 3416,
											"name": "SWAP2"
										},
										{
											"begin": 3349,
											"end": 3416,
											"name": "POP"
										},
										{
											"begin": 3349,
											"end": 3416,
											"name": "SWAP2"
										},
										{
											"begin": 3349,
											"end": 3416,
											"name": "POP"
										},
										{
											"begin": 3434,
											"end": 3441,
											"name": "DUP2"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "PUSH [tag]",
											"value": "207"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "JUMPI"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "MLOAD"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "DUP2"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "MSTORE"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "ADD"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "DUP1"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "DUP1"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "ADD"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "DUP3"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "DUP2"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "SUB"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "DUP3"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "MSTORE"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "DUP2"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "MSTORE"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "ADD"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "DUP1"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "PUSH",
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "DUP2"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "MSTORE"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "POP"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "ADD"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "SWAP2"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "POP"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "POP"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "MLOAD"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "DUP1"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "SWAP2"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "SUB"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "SWAP1"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "REVERT"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "tag",
											"value": "207"
										},
										{
											"begin": 3426,
											"end": 3478,
											"name": "JUMPDEST"
										},
										{
											"begin": 3513,
											"end": 3514,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3493,
											"end": 3503,
											"name": "DUP2"
										},
										{
											"begin": 3493,
											"end": 3510,
											"name": "MLOAD"
										},
										{
											"begin": 3493,
											"end": 3514,
											"name": "GT"
										},
										{
											"begin": 3489,
											"end": 3710,
											"name": "ISZERO"
										},
										{
											"begin": 3489,
											"end": 3710,
											"name": "PUSH [tag]",
											"value": "208"
										},
										{
											"begin": 3489,
											"end": 3710,
											"name": "JUMPI"
										},
										{
											"begin": 3633,
											"end": 3643,
											"name": "DUP1"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "DUP1"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "ADD"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "SWAP1"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "MLOAD"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "209"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "209"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "DUP2"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "ADD"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "SWAP1"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "DUP1"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "DUP1"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "MLOAD"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "SWAP1"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "ADD"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "SWAP1"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "SWAP3"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "SWAP2"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "SWAP1"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "POP"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "POP"
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "POP"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "PUSH [tag]",
											"value": "210"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "JUMPI"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "MLOAD"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "DUP2"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "MSTORE"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "ADD"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "DUP1"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "DUP1"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "ADD"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "DUP3"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "DUP2"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "SUB"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "DUP3"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "MSTORE"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "PUSH",
											"value": "2A"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "DUP2"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "MSTORE"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "ADD"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "DUP1"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "PUSH data",
											"value": "E11AD79D1E4A7F2E5F376964CB99E8E8F7904E3FC16A109F7A7ECB9AA7956DCD"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "PUSH",
											"value": "2A"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "SWAP2"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "CODECOPY"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "ADD"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "SWAP2"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "POP"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "POP"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "MLOAD"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "DUP1"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "SWAP2"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "SUB"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "SWAP1"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "REVERT"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "tag",
											"value": "210"
										},
										{
											"begin": 3614,
											"end": 3699,
											"name": "JUMPDEST"
										},
										{
											"begin": 3489,
											"end": 3710,
											"name": "tag",
											"value": "208"
										},
										{
											"begin": 3489,
											"end": 3710,
											"name": "JUMPDEST"
										},
										{
											"begin": 2621,
											"end": 3716,
											"name": "POP"
										},
										{
											"begin": 2621,
											"end": 3716,
											"name": "POP"
										},
										{
											"begin": 2621,
											"end": 3716,
											"name": "POP"
										},
										{
											"begin": 2621,
											"end": 3716,
											"name": "POP"
										},
										{
											"begin": 2621,
											"end": 3716,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "tag",
											"value": "200"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "JUMPDEST"
										},
										{
											"begin": 602,
											"end": 606,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 805,
											"end": 817,
											"name": "DUP1"
										},
										{
											"begin": 914,
											"end": 921,
											"name": "DUP3"
										},
										{
											"begin": 902,
											"end": 922,
											"name": "EXTCODESIZE"
										},
										{
											"begin": 894,
											"end": 922,
											"name": "SWAP1"
										},
										{
											"begin": 894,
											"end": 922,
											"name": "POP"
										},
										{
											"begin": 947,
											"end": 948,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 940,
											"end": 944,
											"name": "DUP2"
										},
										{
											"begin": 940,
											"end": 948,
											"name": "GT"
										},
										{
											"begin": 933,
											"end": 948,
											"name": "SWAP2"
										},
										{
											"begin": 933,
											"end": 948,
											"name": "POP"
										},
										{
											"begin": 933,
											"end": 948,
											"name": "POP"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "SWAP2"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "SWAP1"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "POP"
										},
										{
											"begin": 542,
											"end": 955,
											"name": "JUMP",
											"value": "[out]"
										}
									],
									".data": {
										"9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
										"D50B095422F4CBFCB4C90FBD4D55AAF0967BF1D90E94BB6A1AE9FC4EE7E733DE": "43616c6c6572206973206e6f742052657761726473446973747269627574696f6e20636f6e7472616374",
										"E11AD79D1E4A7F2E5F376964CB99E8E8F7904E3FC16A109F7A7ECB9AA7956DCD": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564"
									}
								}
							}
						},
						"methodIdentifiers": {
							"balanceOf(address)": "70a08231",
							"earned(address)": "008cc262",
							"exit()": "e9fad8ee",
							"getReward()": "3d18b912",
							"getRewardForDuration()": "1c1f78eb",
							"lastTimeRewardApplicable()": "80faa57d",
							"lastUpdateTime()": "c8f33c91",
							"notifyRewardAmount(uint256)": "3c6b16ab",
							"periodFinish()": "ebe2b12b",
							"rewardPerToken()": "cd3daf9d",
							"rewardPerTokenStored()": "df136d65",
							"rewardRate()": "7b0a47ee",
							"rewards(address)": "0700037d",
							"rewardsDistribution()": "3fc6df6e",
							"rewardsDuration()": "386a9525",
							"rewardsToken()": "d1af0c7d",
							"stake(uint256)": "a694fc3a",
							"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": "ecd9ba82",
							"stakingToken()": "72f702f3",
							"totalSupply()": "18160ddd",
							"userRewardPerTokenPaid(address)": "8b876347",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"keccak256\":\"0x4b5aa451e4e8801478708f94b118a7821c0500d676255eaf89fc78c14856ce4e\",\"urls\":[\"bzz-raw://bed15b3f35ed05505efc8fb5cb01d06c52230fbcaadf4ed24a85b1ac2f15f33c\",\"dweb:/ipfs/QmS6tW81u8E4tvzVfVuqEuMCkdwAozQ6pKJPRBR4JEVmQp\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xd1804d04fb39689453f673601429a99a0c68c422a981fc338773df9a59180fe9\",\"urls\":[\"bzz-raw://1b9307920e0378d58c6677f8952ad090a9ecb30e878835e301a0d18386a870c1\",\"dweb:/ipfs/QmYYixTDVF4FXqFpYzEcufAwEY9BFBJ33Ew9ncsGvD7btC\"]},\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\":{\"keccak256\":\"0xc61b3603089b09a730d8ca72e9133a496cc4405da40e9b87c12f073245d774bf\",\"urls\":[\"bzz-raw://de8bb0003d53de236913f0e0102e7a9d015e02098f2495edd000f207fe2be2f4\",\"dweb:/ipfs/QmbtwNwAJEehWWL7yGGyyMoenQvcqtz91pqLgQPpLRoLYC\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x90e8c2521653bbb1768b05889c5760031e688d9cd361f167489b89215e201b95\",\"urls\":[\"bzz-raw://d0abb99bb8bfc2bc0a89902b8ed1dc0442ad08cc78cee64c291b3df6a27bcccc\",\"dweb:/ipfs/QmP5NaEwZthQeM2ESz4WTT3osrP7jhbvu7ocbttBi2JAw6\"]},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0xf6f89424e17870561dc23c5933c55c5726b66a68d51ad2a2c00c569a5f02f507\",\"urls\":[\"bzz-raw://005657a7ffbf6d12726ac0167b55be965dc473d43f061b605f883a54cc00ab4f\",\"dweb:/ipfs/QmaBzyvDQyNnn6DXQYewEtN9Go85orikSnW9PwNWqUGPEX\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf3358e5819ca73357abd6c90bdfffd0474af54364897f6b3e3234c4b71fbe9a1\",\"urls\":[\"bzz-raw://75ae8d04454d1511a2ed986cc8585736f05c5c25280683b3d24712a9f414a4bf\",\"dweb:/ipfs/Qmb3kNCoBUZdah1AgBBD4zMk898j5Qw8ahT1w5cCMYp5Y3\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x0441ff2b36d503f3a29d28d3754291f119064f4973d5c780698143d919037a78\",\"urls\":[\"bzz-raw://af27dd68d2371e68c8ed8cf297ec6d832bf906742d53367b70399ba918060cb7\",\"dweb:/ipfs/QmcMMjZceFepXgRrzSx577oWwt7SCSFzoqZiTF7tTxquF7\"]},\"contracts/RewardsDistributionRecipient.sol\":{\"keccak256\":\"0xbe4c2cf3665101e576fae0f7a26e174a0d80b71d27a7e3a36c230ff857209833\",\"urls\":[\"bzz-raw://655680f2d2e2aa7b2b6ef2a7680b2d81e26a36cdadb02765ded73d47a6bef29b\",\"dweb:/ipfs/QmQSgF4T313dNNnwqkiXvphQTYt93VZ9uMiYEEv2kiE8H5\"]},\"contracts/StakingRewards.sol\":{\"keccak256\":\"0xea59e1d29b8629d0479855bfce8b33b646d8da173ac99bc817ca63e7856e2014\",\"urls\":[\"bzz-raw://48c4a0b2c9281906fded535549a9e047fd539249a138844acadb032bb53bf2c1\",\"dweb:/ipfs/QmbKsm9spEEgLvHEuA9fus83M17NBym5919RTvxyiVX2kg\"]},\"contracts/interfaces/IStakingRewards.sol\":{\"keccak256\":\"0xc4ec3f2fa8a00b37bdd8f80a66c7c1361c67036772203dcb2e8a80ca75dc4466\",\"urls\":[\"bzz-raw://08aa33dba10e77c513cf90f2795f62bf448a915d5e02d645d6b84bf3391f371b\",\"dweb:/ipfs/QmdVYtb1x2V6zZqwJTMuZQ6HyLq8YMzsB5NkaEQnPibL3p\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 602,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "rewardsDistribution",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 570,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "_guardCounter",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 643,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "rewardsToken",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(IERC20)328"
							},
							{
								"astId": 645,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "stakingToken",
								"offset": 0,
								"slot": "3",
								"type": "t_contract(IERC20)328"
							},
							{
								"astId": 648,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "periodFinish",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 651,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "rewardRate",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 654,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "rewardsDuration",
								"offset": 0,
								"slot": "6",
								"type": "t_uint256"
							},
							{
								"astId": 656,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "lastUpdateTime",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 658,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "rewardPerTokenStored",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 662,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "userRewardPerTokenPaid",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 666,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "rewards",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 668,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "11",
								"type": "t_uint256"
							},
							{
								"astId": 672,
								"contract": "contracts/StakingRewards.sol:StakingRewards",
								"label": "_balances",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(IERC20)328": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"contracts/interfaces/IStakingRewards.sol": {
				"IStakingRewards": {
					"abi": [
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "earned",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [],
							"name": "exit",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [],
							"name": "getReward",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "getRewardForDuration",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "lastTimeRewardApplicable",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "rewardPerToken",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"balanceOf(address)": "70a08231",
							"earned(address)": "008cc262",
							"exit()": "e9fad8ee",
							"getReward()": "3d18b912",
							"getRewardForDuration()": "1c1f78eb",
							"lastTimeRewardApplicable()": "80faa57d",
							"rewardPerToken()": "cd3daf9d",
							"stake(uint256)": "a694fc3a",
							"totalSupply()": "18160ddd",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IStakingRewards.sol\":\"IStakingRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IStakingRewards.sol\":{\"keccak256\":\"0xc4ec3f2fa8a00b37bdd8f80a66c7c1361c67036772203dcb2e8a80ca75dc4466\",\"urls\":[\"bzz-raw://08aa33dba10e77c513cf90f2795f62bf448a915d5e02d645d6b84bf3391f371b\",\"dweb:/ipfs/QmdVYtb1x2V6zZqwJTMuZQ6HyLq8YMzsB5NkaEQnPibL3p\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							68
						]
					},
					"id": 69,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@dev Standard math utilities missing in the Solidity language.",
							"fullyImplemented": true,
							"id": 68,
							"linearizedBaseContracts": [
								68
							],
							"name": "Math",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 17,
										"nodeType": "Block",
										"src": "249:38:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"condition": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 12,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 10,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3,
															"src": "266:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"argumentTypes": null,
															"id": 11,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5,
															"src": "271:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "266:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"argumentTypes": null,
														"id": 14,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "279:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 15,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "266:14:0",
													"trueExpression": {
														"argumentTypes": null,
														"id": 13,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "275:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 9,
												"id": 16,
												"nodeType": "Return",
												"src": "259:21:0"
											}
										]
									},
									"documentation": "@dev Returns the largest of two numbers.",
									"id": 18,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "195:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "195:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 5,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "206:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "206:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "194:22:0"
									},
									"returnParameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "240:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 7,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "240:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "239:9:0"
									},
									"scope": 68,
									"src": "182:105:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 34,
										"nodeType": "Block",
										"src": "425:37:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"condition": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 29,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 27,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 20,
															"src": "442:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"argumentTypes": null,
															"id": 28,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 22,
															"src": "446:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "442:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"argumentTypes": null,
														"id": 31,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 22,
														"src": "454:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 32,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "442:13:0",
													"trueExpression": {
														"argumentTypes": null,
														"id": 30,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "450:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 26,
												"id": 33,
												"nodeType": "Return",
												"src": "435:20:0"
											}
										]
									},
									"documentation": "@dev Returns the smallest of two numbers.",
									"id": 35,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "371:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 19,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "371:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "382:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 21,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "382:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "370:22:0"
									},
									"returnParameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "416:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 24,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "416:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "415:9:0"
									},
									"scope": 68,
									"src": "358:104:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "646:119:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 64,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 52,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"components": [
																{
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 46,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"id": 44,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 37,
																		"src": "718:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"argumentTypes": null,
																		"hexValue": "32",
																		"id": 45,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "722:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_2_by_1",
																			"typeString": "int_const 2"
																		},
																		"value": "2"
																	},
																	"src": "718:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 47,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "717:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"argumentTypes": null,
															"components": [
																{
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 50,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"id": 48,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 39,
																		"src": "728:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"argumentTypes": null,
																		"hexValue": "32",
																		"id": 49,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "732:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_2_by_1",
																			"typeString": "int_const 2"
																		},
																		"value": "2"
																	},
																	"src": "728:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 51,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "727:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "717:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"components": [
																		{
																			"argumentTypes": null,
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 59,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"argumentTypes": null,
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 55,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"argumentTypes": null,
																					"id": 53,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 37,
																					"src": "739:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "%",
																				"rightExpression": {
																					"argumentTypes": null,
																					"hexValue": "32",
																					"id": 54,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "743:1:0",
																					"subdenomination": null,
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_2_by_1",
																						"typeString": "int_const 2"
																					},
																					"value": "2"
																				},
																				"src": "739:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"argumentTypes": null,
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 58,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"argumentTypes": null,
																					"id": 56,
																					"name": "b",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 39,
																					"src": "747:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "%",
																				"rightExpression": {
																					"argumentTypes": null,
																					"hexValue": "32",
																					"id": 57,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "751:1:0",
																					"subdenomination": null,
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_2_by_1",
																						"typeString": "int_const 2"
																					},
																					"value": "2"
																				},
																				"src": "747:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "739:13:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 60,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "738:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "32",
																	"id": 61,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "756:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "738:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 63,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "737:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "717:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 43,
												"id": 65,
												"nodeType": "Return",
												"src": "710:48:0"
											}
										]
									},
									"documentation": "@dev Returns the average of two numbers. The result is rounded towards\nzero.",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "592:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 36,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "592:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "603:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "591:22:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "637:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 41,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "637:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "636:9:0"
									},
									"scope": 68,
									"src": "575:190:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 69,
							"src": "99:668:0"
						}
					],
					"src": "0:768:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							201
						]
					},
					"id": 202,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 70,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:1"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.",
							"fullyImplemented": true,
							"id": 201,
							"linearizedBaseContracts": [
								201
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 94,
										"nodeType": "Block",
										"src": "901:109:1",
										"statements": [
											{
												"assignments": [
													80
												],
												"declarations": [
													{
														"constant": false,
														"id": 80,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 94,
														"src": "911:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 79,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "911:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 84,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 83,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 81,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 72,
														"src": "923:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 82,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 74,
														"src": "927:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "923:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "911:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 88,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 86,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 80,
																"src": "946:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 87,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 72,
																"src": "951:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "946:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 89,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "954:29:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 85,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "938:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 90,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "938:46:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 91,
												"nodeType": "ExpressionStatement",
												"src": "938:46:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 92,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 80,
													"src": "1002:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 78,
												"id": 93,
												"nodeType": "Return",
												"src": "995:8:1"
											}
										]
									},
									"documentation": "@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n- Addition cannot overflow.",
									"id": 95,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 72,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "847:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 71,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "847:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 74,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "858:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 73,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "846:22:1"
									},
									"returnParameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 77,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "892:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "891:9:1"
									},
									"scope": 201,
									"src": "834:176:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 119,
										"nodeType": "Block",
										"src": "1341:112:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 105,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 99,
																"src": "1359:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 106,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 97,
																"src": "1364:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1359:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1367:32:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 104,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "1351:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1351:49:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 110,
												"nodeType": "ExpressionStatement",
												"src": "1351:49:1"
											},
											{
												"assignments": [
													112
												],
												"declarations": [
													{
														"constant": false,
														"id": 112,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 119,
														"src": "1410:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 111,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1410:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 116,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 113,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 97,
														"src": "1422:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 114,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 99,
														"src": "1426:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1422:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1410:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 117,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 112,
													"src": "1445:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 103,
												"id": 118,
												"nodeType": "Return",
												"src": "1438:8:1"
											}
										]
									},
									"documentation": "@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.",
									"id": 120,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "1287:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1287:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "1298:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1298:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1286:22:1"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "1332:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1332:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1331:9:1"
									},
									"scope": 201,
									"src": "1274:179:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 153,
										"nodeType": "Block",
										"src": "1760:392:1",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 129,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 122,
														"src": "1992:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 130,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1997:1:1",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1992:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 135,
												"nodeType": "IfStatement",
												"src": "1988:45:1",
												"trueBody": {
													"id": 134,
													"nodeType": "Block",
													"src": "2000:33:1",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 132,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2021:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 128,
															"id": 133,
															"nodeType": "Return",
															"src": "2014:8:1"
														}
													]
												}
											},
											{
												"assignments": [
													137
												],
												"declarations": [
													{
														"constant": false,
														"id": 137,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 153,
														"src": "2043:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 136,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2043:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 141,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 138,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 122,
														"src": "2055:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 139,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 124,
														"src": "2059:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2055:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2043:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 145,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 143,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 137,
																	"src": "2078:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 144,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 122,
																	"src": "2082:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2078:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 146,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 124,
																"src": "2087:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2078:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 148,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2090:35:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 142,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "2070:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2070:56:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 150,
												"nodeType": "ExpressionStatement",
												"src": "2070:56:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 151,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 137,
													"src": "2144:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 128,
												"id": 152,
												"nodeType": "Return",
												"src": "2137:8:1"
											}
										]
									},
									"documentation": "@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n- Multiplication cannot overflow.",
									"id": 154,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "1706:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1706:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "1717:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1717:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1705:22:1"
									},
									"returnParameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "1751:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1751:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1750:9:1"
									},
									"scope": 201,
									"src": "1693:459:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 178,
										"nodeType": "Block",
										"src": "2674:259:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 166,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 164,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 158,
																"src": "2758:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 165,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2762:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2758:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 167,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2765:28:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 163,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "2750:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2750:44:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 169,
												"nodeType": "ExpressionStatement",
												"src": "2750:44:1"
											},
											{
												"assignments": [
													171
												],
												"declarations": [
													{
														"constant": false,
														"id": 171,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 178,
														"src": "2804:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 170,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2804:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 175,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 172,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 156,
														"src": "2816:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 173,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 158,
														"src": "2820:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2816:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2804:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 176,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 171,
													"src": "2925:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 162,
												"id": 177,
												"nodeType": "Return",
												"src": "2918:8:1"
											}
										]
									},
									"documentation": "@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
									"id": 179,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "2620:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2620:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "2631:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2631:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2619:22:1"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "2665:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2665:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2664:9:1"
									},
									"scope": 201,
									"src": "2607:326:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 199,
										"nodeType": "Block",
										"src": "3444:82:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 189,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "3462:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 190,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3467:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3462:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 192,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3470:26:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 188,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "3454:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3454:43:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 194,
												"nodeType": "ExpressionStatement",
												"src": "3454:43:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 197,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 195,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 181,
														"src": "3514:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 196,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 183,
														"src": "3518:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3514:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 187,
												"id": 198,
												"nodeType": "Return",
												"src": "3507:12:1"
											}
										]
									},
									"documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
									"id": 200,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "3390:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3390:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "3401:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3401:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3389:22:1"
									},
									"returnParameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "3435:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3435:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3434:9:1"
									},
									"scope": 201,
									"src": "3377:149:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 202,
							"src": "589:2939:1"
						}
					],
					"src": "0:3529:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol",
					"exportedSymbols": {
						"ERC20Detailed": [
							259
						]
					},
					"id": 260,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 203,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 204,
							"nodeType": "ImportDirective",
							"scope": 260,
							"sourceUnit": 329,
							"src": "25:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 205,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 328,
										"src": "135:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$328",
											"typeString": "contract IERC20"
										}
									},
									"id": 206,
									"nodeType": "InheritanceSpecifier",
									"src": "135:6:2"
								}
							],
							"contractDependencies": [
								328
							],
							"contractKind": "contract",
							"documentation": "@dev Optional functions from the ERC20 standard.",
							"fullyImplemented": false,
							"id": 259,
							"linearizedBaseContracts": [
								259,
								328
							],
							"name": "ERC20Detailed",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 208,
									"name": "_name",
									"nodeType": "VariableDeclaration",
									"scope": 259,
									"src": "148:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 207,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "148:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 210,
									"name": "_symbol",
									"nodeType": "VariableDeclaration",
									"scope": 259,
									"src": "174:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 209,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "174:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 212,
									"name": "_decimals",
									"nodeType": "VariableDeclaration",
									"scope": 259,
									"src": "202:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 211,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "202:5:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 233,
										"nodeType": "Block",
										"src": "494:85:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 221,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 208,
														"src": "504:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 222,
														"name": "name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 214,
														"src": "512:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "504:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 224,
												"nodeType": "ExpressionStatement",
												"src": "504:12:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 225,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 210,
														"src": "526:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 226,
														"name": "symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 216,
														"src": "536:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "526:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 228,
												"nodeType": "ExpressionStatement",
												"src": "526:16:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 229,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 212,
														"src": "552:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 230,
														"name": "decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "564:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "552:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 232,
												"nodeType": "ExpressionStatement",
												"src": "552:20:2"
											}
										]
									},
									"documentation": "@dev Sets the values for `name`, `symbol`, and `decimals`. All three of\nthese values are immutable: they can only be set once during\nconstruction.",
									"id": 234,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"name": "name",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "429:18:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 213,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "429:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"name": "symbol",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "449:20:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 215,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "449:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"name": "decimals",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "471:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 217,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "471:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "428:58:2"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "494:0:2"
									},
									"scope": 259,
									"src": "416:163:2",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 241,
										"nodeType": "Block",
										"src": "696:29:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 239,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 208,
													"src": "713:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 238,
												"id": 240,
												"nodeType": "Return",
												"src": "706:12:2"
											}
										]
									},
									"documentation": "@dev Returns the name of the token.",
									"id": 242,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "657:2:2"
									},
									"returnParameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 242,
												"src": "681:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 236,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "681:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "680:15:2"
									},
									"scope": 259,
									"src": "644:81:2",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 249,
										"nodeType": "Block",
										"src": "892:31:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 247,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 210,
													"src": "909:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 246,
												"id": 248,
												"nodeType": "Return",
												"src": "902:14:2"
											}
										]
									},
									"documentation": "@dev Returns the symbol of the token, usually a shorter version of the\nname.",
									"id": 250,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "853:2:2"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "877:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 244,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "877:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "876:15:2"
									},
									"scope": 259,
									"src": "838:85:2",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 257,
										"nodeType": "Block",
										"src": "1526:33:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 255,
													"name": "_decimals",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 212,
													"src": "1543:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 254,
												"id": 256,
												"nodeType": "Return",
												"src": "1536:16:2"
											}
										]
									},
									"documentation": "@dev Returns the number of decimals used to get its user representation.\nFor example, if `decimals` equals `2`, a balance of `505` tokens should\nbe displayed to a user as `5,05` (`505 / 10 ** 2`).\n     * Tokens usually opt for a value of 18, imitating the relationship between\nEther and Wei.\n     * > Note that this information is only used for _display_ purposes: it in\nno way affects any of the arithmetic of the contract, including\n`IERC20.balanceOf` and `IERC20.transfer`.",
									"id": 258,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1495:2:2"
									},
									"returnParameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1519:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 252,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1519:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1518:7:2"
									},
									"scope": 259,
									"src": "1478:81:2",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 260,
							"src": "109:1452:2"
						}
					],
					"src": "0:1562:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							328
						]
					},
					"id": 329,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 261,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:3"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": "@dev Interface of the ERC20 standard as defined in the EIP. Does not include\nthe optional functions; to access them see `ERC20Detailed`.",
							"fullyImplemented": false,
							"id": 328,
							"linearizedBaseContracts": [
								328
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": "@dev Returns the amount of tokens in existence.",
									"id": 266,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "290:2:3"
									},
									"returnParameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "316:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 263,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "316:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "315:9:3"
									},
									"scope": 328,
									"src": "270:55:3",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Returns the amount of tokens owned by `account`.",
									"id": 273,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "427:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 267,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "426:17:3"
									},
									"returnParameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "467:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "467:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "466:9:3"
									},
									"scope": 328,
									"src": "408:68:3",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Moves `amount` tokens from the caller's account to `recipient`.\n     * Returns a boolean value indicating whether the operation succeeded.\n     * Emits a `Transfer` event.",
									"id": 282,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 275,
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "714:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 274,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "714:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 277,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "733:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 276,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "713:35:3"
									},
									"returnParameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 280,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "767:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 279,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "767:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "766:6:3"
									},
									"scope": 328,
									"src": "696:77:3",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Returns the remaining number of tokens that `spender` will be\nallowed to spend on behalf of `owner` through `transferFrom`. This is\nzero by default.\n     * This value changes when `approve` or `transferFrom` are called.",
									"id": 291,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "1067:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1067:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "1082:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1066:32:3"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 289,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "1122:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1122:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1121:9:3"
									},
									"scope": 328,
									"src": "1048:83:3",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     * Returns a boolean value indicating whether the operation succeeded.\n     * > Beware that changing an allowance with this method brings the risk\nthat someone may use both the old and the new allowance by unfortunate\ntransaction ordering. One possible solution to mitigate this race\ncondition is to first reduce the spender's allowance to 0 and set the\ndesired value afterwards:\nhttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * Emits an `Approval` event.",
									"id": 300,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 293,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "1792:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 292,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1792:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 295,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "1809:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 294,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1809:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1791:33:3"
									},
									"returnParameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "1843:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 297,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1843:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1842:6:3"
									},
									"scope": 328,
									"src": "1775:74:3",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Moves `amount` tokens from `sender` to `recipient` using the\nallowance mechanism. `amount` is then deducted from the caller's\nallowance.\n     * Returns a boolean value indicating whether the operation succeeded.\n     * Emits a `Transfer` event.",
									"id": 311,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 302,
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 311,
												"src": "2178:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2178:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 304,
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 311,
												"src": "2194:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 303,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2194:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 311,
												"src": "2213:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2213:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2177:51:3"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 311,
												"src": "2247:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 308,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2247:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2246:6:3"
									},
									"scope": 328,
									"src": "2156:97:3",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": "@dev Emitted when `value` tokens are moved from one account (`from`) to\nanother (`to`).\n     * Note that `value` may be zero.",
									"id": 319,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 313,
												"indexed": true,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "2437:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 312,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2437:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 315,
												"indexed": true,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "2459:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 314,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2459:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 317,
												"indexed": false,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "2479:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 316,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2479:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2436:57:3"
									},
									"src": "2422:72:3"
								},
								{
									"anonymous": false,
									"documentation": "@dev Emitted when the allowance of a `spender` for an `owner` is set by\na call to `approve`. `value` is the new allowance.",
									"id": 327,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"indexed": true,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "2668:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 320,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 323,
												"indexed": true,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "2691:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 322,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2691:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"indexed": false,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "2716:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 324,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2716:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2667:63:3"
									},
									"src": "2653:78:3"
								}
							],
							"scope": 329,
							"src": "176:2557:3"
						}
					],
					"src": "0:2734:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol",
					"exportedSymbols": {
						"SafeERC20": [
							547
						]
					},
					"id": 548,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 330,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 331,
							"nodeType": "ImportDirective",
							"scope": 548,
							"sourceUnit": 329,
							"src": "25:22:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
							"file": "../../math/SafeMath.sol",
							"id": 332,
							"nodeType": "ImportDirective",
							"scope": 548,
							"sourceUnit": 202,
							"src": "48:33:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../utils/Address.sol",
							"id": 333,
							"nodeType": "ImportDirective",
							"scope": 548,
							"sourceUnit": 567,
							"src": "82:33:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@title SafeERC20\n@dev Wrappers around ERC20 operations that throw on failure (when the token\ncontract returns false). Tokens that return no value (and instead revert or\nthrow on failure) are also supported, non-reverting calls are assumed to be\nsuccessful.\nTo use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\nwhich allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
							"fullyImplemented": true,
							"id": 547,
							"linearizedBaseContracts": [
								547
							],
							"name": "SafeERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 336,
									"libraryName": {
										"contractScope": null,
										"id": 334,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 201,
										"src": "604:8:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$201",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "598:27:4",
									"typeName": {
										"id": 335,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "617:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 339,
									"libraryName": {
										"contractScope": null,
										"id": 337,
										"name": "Address",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 566,
										"src": "636:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Address_$566",
											"typeString": "library Address"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "630:26:4",
									"typeName": {
										"id": 338,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "648:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 360,
										"nodeType": "Block",
										"src": "734:102:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 349,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "763:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 352,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 341,
																			"src": "793:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$328",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 353,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 282,
																		"src": "793:14:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "793:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 355,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 343,
																	"src": "818:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 356,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 345,
																	"src": "822:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 350,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "770:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 351,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "770:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 357,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "770:58:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 348,
														"name": "callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 546,
														"src": "744:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$328_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "744:85:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 359,
												"nodeType": "ExpressionStatement",
												"src": "744:85:4"
											}
										]
									},
									"documentation": null,
									"id": 361,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "684:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$328",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 340,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 328,
													"src": "684:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$328",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "698:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "698:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "710:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 344,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "710:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "683:41:4"
									},
									"returnParameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:0:4"
									},
									"scope": 547,
									"src": "662:174:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 385,
										"nodeType": "Block",
										"src": "932:112:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 373,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 363,
															"src": "961:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 376,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 363,
																			"src": "991:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$328",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 377,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 311,
																		"src": "991:18:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "991:27:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 379,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 365,
																	"src": "1020:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 380,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "1026:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 381,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 369,
																	"src": "1030:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 374,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "968:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 375,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "968:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 382,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "968:68:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 372,
														"name": "callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 546,
														"src": "942:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$328_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "942:95:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 384,
												"nodeType": "ExpressionStatement",
												"src": "942:95:4"
											}
										]
									},
									"documentation": null,
									"id": 386,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 386,
												"src": "868:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$328",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 362,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 328,
													"src": "868:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$328",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 365,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 386,
												"src": "882:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 364,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "882:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 367,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 386,
												"src": "896:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 366,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "896:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 369,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 386,
												"src": "908:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 368,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "908:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "867:55:4"
									},
									"returnParameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "932:0:4"
									},
									"scope": 547,
									"src": "842:202:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 426,
										"nodeType": "Block",
										"src": "1126:536:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 410,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"components": [
																	{
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 398,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"id": 396,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 392,
																			"src": "1415:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "30",
																			"id": 397,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1424:1:4",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1415:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 399,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1414:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"components": [
																	{
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 408,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"arguments": [
																						{
																							"argumentTypes": null,
																							"id": 403,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1316,
																							"src": "1455:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$547",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$547",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 402,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1447:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": "address"
																					},
																					"id": 404,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1447:13:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"argumentTypes": null,
																					"id": 405,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 390,
																					"src": "1462:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"argumentTypes": null,
																					"id": 400,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 388,
																					"src": "1431:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$328",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 401,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 291,
																				"src": "1431:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 406,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1431:39:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "30",
																			"id": 407,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1474:1:4",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1431:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 409,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1430:46:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1414:62:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 411,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1490:56:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 395,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "1406:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1406:150:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 413,
												"nodeType": "ExpressionStatement",
												"src": "1406:150:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 415,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "1585:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 418,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "1615:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$328",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 419,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 300,
																		"src": "1615:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 420,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "1615:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 421,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 390,
																	"src": "1639:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 422,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 392,
																	"src": "1648:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 416,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "1592:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 417,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "1592:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 423,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1592:62:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 414,
														"name": "callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 546,
														"src": "1566:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$328_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1566:89:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 425,
												"nodeType": "ExpressionStatement",
												"src": "1566:89:4"
											}
										]
									},
									"documentation": null,
									"id": 427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "1071:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$328",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 387,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 328,
													"src": "1071:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$328",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "1085:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1085:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "1102:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1070:46:4"
									},
									"returnParameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1126:0:4"
									},
									"scope": 547,
									"src": "1050:612:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 461,
										"nodeType": "Block",
										"src": "1754:196:4",
										"statements": [
											{
												"assignments": [
													437
												],
												"declarations": [
													{
														"constant": false,
														"id": 437,
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 461,
														"src": "1764:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 436,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1764:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 448,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 446,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 433,
															"src": "1831:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 441,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1316,
																			"src": "1811:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$547",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$547",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 440,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1803:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": "address"
																	},
																	"id": 442,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1803:13:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 443,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 431,
																	"src": "1818:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 438,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 429,
																	"src": "1787:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$328",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 439,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 291,
																"src": "1787:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 444,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1787:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 445,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 95,
														"src": "1787:43:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1787:50:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1764:73:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 450,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "1866:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 453,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 429,
																			"src": "1896:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$328",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 454,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 300,
																		"src": "1896:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 455,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "1896:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 456,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 431,
																	"src": "1920:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 457,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 437,
																	"src": "1929:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 451,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "1873:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 452,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "1873:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1873:69:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 449,
														"name": "callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 546,
														"src": "1847:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$328_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1847:96:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 460,
												"nodeType": "ExpressionStatement",
												"src": "1847:96:4"
											}
										]
									},
									"documentation": null,
									"id": 462,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "1699:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$328",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 428,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 328,
													"src": "1699:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$328",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "1713:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 430,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1713:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 433,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "1730:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 432,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1730:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1698:46:4"
									},
									"returnParameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1754:0:4"
									},
									"scope": 547,
									"src": "1668:282:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 496,
										"nodeType": "Block",
										"src": "2042:196:4",
										"statements": [
											{
												"assignments": [
													472
												],
												"declarations": [
													{
														"constant": false,
														"id": 472,
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 496,
														"src": "2052:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 471,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2052:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 483,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 481,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 468,
															"src": "2119:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 476,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1316,
																			"src": "2099:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$547",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$547",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 475,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2091:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": "address"
																	},
																	"id": 477,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2091:13:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 478,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 466,
																	"src": "2106:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 473,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 464,
																	"src": "2075:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$328",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 291,
																"src": "2075:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2075:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 480,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 120,
														"src": "2075:43:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2075:50:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2052:73:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 485,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 464,
															"src": "2154:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 488,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 464,
																			"src": "2184:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$328",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 489,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 300,
																		"src": "2184:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "2184:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 491,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 466,
																	"src": "2208:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 492,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 472,
																	"src": "2217:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 486,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "2161:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 487,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2161:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 493,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2161:69:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 484,
														"name": "callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 546,
														"src": "2135:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$328_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2135:96:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 495,
												"nodeType": "ExpressionStatement",
												"src": "2135:96:4"
											}
										]
									},
									"documentation": null,
									"id": 497,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 464,
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "1987:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$328",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 463,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 328,
													"src": "1987:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$328",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 466,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "2001:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 465,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2001:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 468,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "2018:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2018:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1986:46:4"
									},
									"returnParameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2042:0:4"
									},
									"scope": 547,
									"src": "1956:282:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 545,
										"nodeType": "Block",
										"src": "2690:1026:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 506,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 499,
																			"src": "3224:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$328",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$328",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 505,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3216:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": "address"
																	},
																	"id": 507,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3216:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 508,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 565,
																"src": "3216:25:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 509,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3216:27:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5361666545524332303a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 510,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3245:33:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f6ce7bfd656f35145dec774d6f7e67f4cba158373d2dd7a0f8273e232f86148d",
																"typeString": "literal_string \"SafeERC20: call to non-contract\""
															},
															"value": "SafeERC20: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f6ce7bfd656f35145dec774d6f7e67f4cba158373d2dd7a0f8273e232f86148d",
																"typeString": "literal_string \"SafeERC20: call to non-contract\""
															}
														],
														"id": 504,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "3208:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 511,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3208:71:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 512,
												"nodeType": "ExpressionStatement",
												"src": "3208:71:4"
											},
											{
												"assignments": [
													514,
													516
												],
												"declarations": [
													{
														"constant": false,
														"id": 514,
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 545,
														"src": "3350:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 513,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3350:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 516,
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 545,
														"src": "3364:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 515,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3364:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 523,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 521,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "3411:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 518,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 499,
																	"src": "3399:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$328",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$328",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 517,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3391:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3391:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 520,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "3391:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3391:25:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3349:67:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 525,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 514,
															"src": "3434:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 526,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3443:34:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"id": 524,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "3426:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 527,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3426:52:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 528,
												"nodeType": "ExpressionStatement",
												"src": "3426:52:4"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 529,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 516,
															"src": "3493:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 530,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "3493:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 531,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3513:1:4",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3493:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 544,
												"nodeType": "IfStatement",
												"src": "3489:221:4",
												"trueBody": {
													"id": 543,
													"nodeType": "Block",
													"src": "3516:194:4",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 536,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 516,
																				"src": "3633:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"argumentTypes": null,
																				"components": [
																					{
																						"argumentTypes": null,
																						"id": 537,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3646:4:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": "bool"
																					}
																				],
																				"id": 538,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3645:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"argumentTypes": null,
																				"id": 534,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1279,
																				"src": "3622:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 535,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "3622:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 539,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3622:30:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3654:44:4",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 533,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1295,
																		1296
																	],
																	"referencedDeclaration": 1296,
																	"src": "3614:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 541,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3614:85:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 542,
															"nodeType": "ExpressionStatement",
															"src": "3614:85:4"
														}
													]
												}
											}
										]
									},
									"documentation": "@dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\non the return value: the return value is optional (but if data is returned, it must not be false).\n@param token The token targeted by the call.\n@param data The call data (encoded using abi.encode or one of its variants).",
									"id": 546,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "callOptionalReturn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "2649:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$328",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 498,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 328,
													"src": "2649:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$328",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "2663:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 500,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2663:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2648:33:4"
									},
									"returnParameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2690:0:4"
									},
									"scope": 547,
									"src": "2621:1095:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "private"
								}
							],
							"scope": 548,
							"src": "574:3144:4"
						}
					],
					"src": "0:3719:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							566
						]
					},
					"id": 567,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 549,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:5"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@dev Collection of functions related to the address type,",
							"fullyImplemented": true,
							"id": 566,
							"linearizedBaseContracts": [
								566
							],
							"name": "Address",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 564,
										"nodeType": "Block",
										"src": "608:347:5",
										"statements": [
											{
												"assignments": [
													557
												],
												"declarations": [
													{
														"constant": false,
														"id": 557,
														"name": "size",
														"nodeType": "VariableDeclaration",
														"scope": 564,
														"src": "805:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 556,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "805:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 558,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "805:12:5"
											},
											{
												"externalReferences": [
													{
														"size": {
															"declaration": 557,
															"isOffset": false,
															"isSlot": false,
															"src": "894:4:5",
															"valueSize": 1
														}
													},
													{
														"account": {
															"declaration": 551,
															"isOffset": false,
															"isSlot": false,
															"src": "914:7:5",
															"valueSize": 1
														}
													}
												],
												"id": 559,
												"nodeType": "InlineAssembly",
												"operations": "{ size := extcodesize(account) }",
												"src": "883:41:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 562,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 560,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 557,
														"src": "940:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 561,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "947:1:5",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "940:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 555,
												"id": 563,
												"nodeType": "Return",
												"src": "933:15:5"
											}
										]
									},
									"documentation": "@dev Returns true if `account` is a contract.\n     * This test is non-exhaustive, and there may be false-negatives: during the\nexecution of a contract's constructor, its address will be reported as\nnot containing a contract.\n     * > It is unsafe to assume that an address for which this function returns\nfalse is an externally-owned account (EOA) and not a contract.",
									"id": 565,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 551,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 565,
												"src": "562:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 550,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "561:17:5"
									},
									"returnParameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 565,
												"src": "602:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 553,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "602:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "601:6:5"
									},
									"scope": 566,
									"src": "542:413:5",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 567,
							"src": "94:863:5"
						}
					],
					"src": "0:958:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							598
						]
					},
					"id": 599,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 568,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:6"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": "@dev Contract module that helps prevent reentrant calls to a function.\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\navailable, which can be aplied to functions to make sure there are no nested\n(reentrant) calls to them.\n * Note that because there is a single `nonReentrant` guard, functions marked as\n`nonReentrant` may not call one another. This can be worked around by making\nthose functions `private`, and then adding `external` `nonReentrant` entry\npoints to them.",
							"fullyImplemented": true,
							"id": 598,
							"linearizedBaseContracts": [
								598
							],
							"name": "ReentrancyGuard",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 570,
									"name": "_guardCounter",
									"nodeType": "VariableDeclaration",
									"scope": 598,
									"src": "659:29:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 569,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "659:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 577,
										"nodeType": "Block",
										"src": "719:173:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 575,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 573,
														"name": "_guardCounter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 570,
														"src": "868:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "31",
														"id": 574,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "884:1:6",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "868:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 576,
												"nodeType": "ExpressionStatement",
												"src": "868:17:6"
											}
										]
									},
									"documentation": null,
									"id": 578,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "707:2:6"
									},
									"returnParameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "719:0:6"
									},
									"scope": 598,
									"src": "695:197:6",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 596,
										"nodeType": "Block",
										"src": "1291:175:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 582,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 580,
														"name": "_guardCounter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 570,
														"src": "1301:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "31",
														"id": 581,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1318:1:6",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1301:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 583,
												"nodeType": "ExpressionStatement",
												"src": "1301:18:6"
											},
											{
												"assignments": [
													585
												],
												"declarations": [
													{
														"constant": false,
														"id": 585,
														"name": "localCounter",
														"nodeType": "VariableDeclaration",
														"scope": 596,
														"src": "1329:20:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 584,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1329:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 587,
												"initialValue": {
													"argumentTypes": null,
													"id": 586,
													"name": "_guardCounter",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 570,
													"src": "1352:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1329:36:6"
											},
											{
												"id": 588,
												"nodeType": "PlaceholderStatement",
												"src": "1375:1:6"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 592,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 590,
																"name": "localCounter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 585,
																"src": "1394:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 591,
																"name": "_guardCounter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 570,
																"src": "1410:13:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1394:29:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 593,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1425:33:6",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 589,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "1386:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1386:73:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 595,
												"nodeType": "ExpressionStatement",
												"src": "1386:73:6"
											}
										]
									},
									"documentation": "@dev Prevents a contract from calling itself, directly or indirectly.\nCalling a `nonReentrant` function from another `nonReentrant`\nfunction is not supported. It is possible to prevent this from happening\nby making the `nonReentrant` function external, and make it call a\n`private` function that does the actual work.",
									"id": 597,
									"name": "nonReentrant",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 579,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1288:2:6"
									},
									"src": "1267:199:6",
									"visibility": "internal"
								}
							],
							"scope": 599,
							"src": "556:912:6"
						}
					],
					"src": "0:1469:6"
				},
				"id": 6
			},
			"contracts/RewardsDistributionRecipient.sol": {
				"ast": {
					"absolutePath": "contracts/RewardsDistributionRecipient.sol",
					"exportedSymbols": {
						"RewardsDistributionRecipient": [
							620
						]
					},
					"id": 621,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 600,
							"literals": [
								"solidity",
								"0.5",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:7"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": false,
							"id": 620,
							"linearizedBaseContracts": [
								620
							],
							"name": "RewardsDistributionRecipient",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 602,
									"name": "rewardsDistribution",
									"nodeType": "VariableDeclaration",
									"scope": 620,
									"src": "69:34:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 601,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "69:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": null,
									"id": 607,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "notifyRewardAmount",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 604,
												"name": "reward",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "138:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 603,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "138:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "137:16:7"
									},
									"returnParameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "162:0:7"
									},
									"scope": 620,
									"src": "110:53:7",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": {
										"id": 618,
										"nodeType": "Block",
										"src": "204:150:7",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 613,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 610,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1292,
																	"src": "235:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 611,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "235:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 612,
																"name": "rewardsDistribution",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 602,
																"src": "249:19:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "235:33:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "43616c6c6572206973206e6f742052657761726473446973747269627574696f6e20636f6e7472616374",
															"id": 614,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "282:44:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d50b095422f4cbfcb4c90fbd4d55aaf0967bf1d90e94bb6a1ae9fc4ee7e733de",
																"typeString": "literal_string \"Caller is not RewardsDistribution contract\""
															},
															"value": "Caller is not RewardsDistribution contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d50b095422f4cbfcb4c90fbd4d55aaf0967bf1d90e94bb6a1ae9fc4ee7e733de",
																"typeString": "literal_string \"Caller is not RewardsDistribution contract\""
															}
														],
														"id": 609,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "214:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "214:122:7",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 616,
												"nodeType": "ExpressionStatement",
												"src": "214:122:7"
											},
											{
												"id": 617,
												"nodeType": "PlaceholderStatement",
												"src": "346:1:7"
											}
										]
									},
									"documentation": null,
									"id": 619,
									"name": "onlyRewardsDistribution",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "201:2:7"
									},
									"src": "169:185:7",
									"visibility": "internal"
								}
							],
							"scope": 621,
							"src": "25:331:7"
						}
					],
					"src": "0:357:7"
				},
				"id": 7
			},
			"contracts/StakingRewards.sol": {
				"ast": {
					"absolutePath": "contracts/StakingRewards.sol",
					"exportedSymbols": {
						"IUniswapV2ERC20": [
							1224
						],
						"StakingRewards": [
							1206
						]
					},
					"id": 1225,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 622,
							"literals": [
								"solidity",
								"0.5",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/math/Math.sol",
							"file": "@openzeppelin/contracts/math/Math.sol",
							"id": 623,
							"nodeType": "ImportDirective",
							"scope": 1225,
							"sourceUnit": 69,
							"src": "25:47:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/math/SafeMath.sol",
							"id": 624,
							"nodeType": "ImportDirective",
							"scope": 1225,
							"sourceUnit": 202,
							"src": "73:51:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol",
							"id": 625,
							"nodeType": "ImportDirective",
							"scope": 1225,
							"sourceUnit": 260,
							"src": "125:63:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol",
							"id": 626,
							"nodeType": "ImportDirective",
							"scope": 1225,
							"sourceUnit": 548,
							"src": "189:59:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"id": 627,
							"nodeType": "ImportDirective",
							"scope": 1225,
							"sourceUnit": 599,
							"src": "249:59:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IStakingRewards.sol",
							"file": "./interfaces/IStakingRewards.sol",
							"id": 628,
							"nodeType": "ImportDirective",
							"scope": 1225,
							"sourceUnit": 1278,
							"src": "325:42:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/RewardsDistributionRecipient.sol",
							"file": "./RewardsDistributionRecipient.sol",
							"id": 629,
							"nodeType": "ImportDirective",
							"scope": 1225,
							"sourceUnit": 621,
							"src": "368:44:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 630,
										"name": "IStakingRewards",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1277,
										"src": "445:15:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IStakingRewards_$1277",
											"typeString": "contract IStakingRewards"
										}
									},
									"id": 631,
									"nodeType": "InheritanceSpecifier",
									"src": "445:15:8"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 632,
										"name": "RewardsDistributionRecipient",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 620,
										"src": "466:28:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_RewardsDistributionRecipient_$620",
											"typeString": "contract RewardsDistributionRecipient"
										}
									},
									"id": 633,
									"nodeType": "InheritanceSpecifier",
									"src": "466:28:8"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 634,
										"name": "ReentrancyGuard",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 598,
										"src": "500:15:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ReentrancyGuard_$598",
											"typeString": "contract ReentrancyGuard"
										}
									},
									"id": 635,
									"nodeType": "InheritanceSpecifier",
									"src": "500:15:8"
								}
							],
							"contractDependencies": [
								598,
								620,
								1277
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 1206,
							"linearizedBaseContracts": [
								1206,
								598,
								620,
								1277
							],
							"name": "StakingRewards",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 638,
									"libraryName": {
										"contractScope": null,
										"id": 636,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 201,
										"src": "528:8:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$201",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "522:27:8",
									"typeName": {
										"id": 637,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "541:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 641,
									"libraryName": {
										"contractScope": null,
										"id": 639,
										"name": "SafeERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 547,
										"src": "560:9:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeERC20_$547",
											"typeString": "library SafeERC20"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "554:27:8",
									"typeName": {
										"contractScope": null,
										"id": 640,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 328,
										"src": "574:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$328",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"id": 643,
									"name": "rewardsToken",
									"nodeType": "VariableDeclaration",
									"scope": 1206,
									"src": "636:26:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$328",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"contractScope": null,
										"id": 642,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 328,
										"src": "636:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$328",
											"typeString": "contract IERC20"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 645,
									"name": "stakingToken",
									"nodeType": "VariableDeclaration",
									"scope": 1206,
									"src": "668:26:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$328",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"contractScope": null,
										"id": 644,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 328,
										"src": "668:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$328",
											"typeString": "contract IERC20"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 648,
									"name": "periodFinish",
									"nodeType": "VariableDeclaration",
									"scope": 1206,
									"src": "700:31:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 646,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "700:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30",
										"id": 647,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "730:1:8",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 651,
									"name": "rewardRate",
									"nodeType": "VariableDeclaration",
									"scope": 1206,
									"src": "737:29:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 649,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "737:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30",
										"id": 650,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "765:1:8",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 654,
									"name": "rewardsDuration",
									"nodeType": "VariableDeclaration",
									"scope": 1206,
									"src": "772:39:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 652,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "772:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30",
										"id": 653,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "805:6:8",
										"subdenomination": "days",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 656,
									"name": "lastUpdateTime",
									"nodeType": "VariableDeclaration",
									"scope": 1206,
									"src": "817:29:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 655,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "817:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 658,
									"name": "rewardPerTokenStored",
									"nodeType": "VariableDeclaration",
									"scope": 1206,
									"src": "852:35:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 657,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "852:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 662,
									"name": "userRewardPerTokenPaid",
									"nodeType": "VariableDeclaration",
									"scope": 1206,
									"src": "894:57:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 661,
										"keyType": {
											"id": 659,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "902:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "894:27:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 660,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "913:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 666,
									"name": "rewards",
									"nodeType": "VariableDeclaration",
									"scope": 1206,
									"src": "957:42:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 665,
										"keyType": {
											"id": 663,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "965:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "957:27:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 664,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "976:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 668,
									"name": "_totalSupply",
									"nodeType": "VariableDeclaration",
									"scope": 1206,
									"src": "1006:28:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 667,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1006:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 672,
									"name": "_balances",
									"nodeType": "VariableDeclaration",
									"scope": 1206,
									"src": "1040:45:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 671,
										"keyType": {
											"id": 669,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1048:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1040:27:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 670,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1059:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 705,
										"nodeType": "Block",
										"src": "1317:229:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 683,
														"name": "rewardsToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 643,
														"src": "1327:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$328",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 685,
																"name": "_rewardsToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 676,
																"src": "1349:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 684,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 328,
															"src": "1342:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$328_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 686,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1342:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$328",
															"typeString": "contract IERC20"
														}
													},
													"src": "1327:36:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$328",
														"typeString": "contract IERC20"
													}
												},
												"id": 688,
												"nodeType": "ExpressionStatement",
												"src": "1327:36:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 689,
														"name": "stakingToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 645,
														"src": "1373:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$328",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 691,
																"name": "_stakingToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 680,
																"src": "1395:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 690,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 328,
															"src": "1388:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$328_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 692,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1388:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$328",
															"typeString": "contract IERC20"
														}
													},
													"src": "1373:36:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$328",
														"typeString": "contract IERC20"
													}
												},
												"id": 694,
												"nodeType": "ExpressionStatement",
												"src": "1373:36:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 695,
														"name": "rewardsDuration",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 654,
														"src": "1419:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 696,
															"name": "_rewardsDuration",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 678,
															"src": "1437:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "31",
															"id": 697,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1456:6:8",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_86400_by_1",
																"typeString": "int_const 86400"
															},
															"value": "1"
														},
														"src": "1437:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1419:43:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 700,
												"nodeType": "ExpressionStatement",
												"src": "1419:43:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 701,
														"name": "rewardsDistribution",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 602,
														"src": "1497:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 702,
														"name": "_rewardsDistribution",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 674,
														"src": "1519:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1497:42:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 704,
												"nodeType": "ExpressionStatement",
												"src": "1497:42:8"
											}
										]
									},
									"documentation": null,
									"id": 706,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 674,
												"name": "_rewardsDistribution",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1158:28:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 673,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1158:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 676,
												"name": "_rewardsToken",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1196:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 675,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1196:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 678,
												"name": "_rewardsDuration",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1227:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 677,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 680,
												"name": "_stakingToken",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1282:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 679,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1282:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1148:161:8"
									},
									"returnParameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1317:0:8"
									},
									"scope": 1206,
									"src": "1137:409:8",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 713,
										"nodeType": "Block",
										"src": "1646:36:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 711,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 668,
													"src": "1663:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 710,
												"id": 712,
												"nodeType": "Return",
												"src": "1656:19:8"
											}
										]
									},
									"documentation": null,
									"id": 714,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1611:2:8"
									},
									"returnParameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 714,
												"src": "1637:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 708,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1637:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1636:9:8"
									},
									"scope": 1206,
									"src": "1591:91:8",
									"stateMutability": "view",
									"superFunction": 1253,
									"visibility": "external"
								},
								{
									"body": {
										"id": 725,
										"nodeType": "Block",
										"src": "1756:42:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 721,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 672,
														"src": "1773:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 723,
													"indexExpression": {
														"argumentTypes": null,
														"id": 722,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 716,
														"src": "1783:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1773:18:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 720,
												"id": 724,
												"nodeType": "Return",
												"src": "1766:25:8"
											}
										]
									},
									"documentation": null,
									"id": 726,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 716,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "1707:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 715,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1707:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1706:17:8"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "1747:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 718,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1747:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1746:9:8"
									},
									"scope": 1206,
									"src": "1688:110:8",
									"stateMutability": "view",
									"superFunction": 1260,
									"visibility": "external"
								},
								{
									"body": {
										"id": 738,
										"nodeType": "Block",
										"src": "1870:63:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 733,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1282,
																"src": "1896:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 734,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "1896:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 735,
															"name": "periodFinish",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 648,
															"src": "1913:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 731,
															"name": "Math",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 68,
															"src": "1887:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Math_$68_$",
																"typeString": "type(library Math)"
															}
														},
														"id": 732,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "min",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 35,
														"src": "1887:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1887:39:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 730,
												"id": 737,
												"nodeType": "Return",
												"src": "1880:46:8"
											}
										]
									},
									"documentation": null,
									"id": 739,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "lastTimeRewardApplicable",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1837:2:8"
									},
									"returnParameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 729,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "1861:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 728,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1861:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1860:9:8"
									},
									"scope": 1206,
									"src": "1804:129:8",
									"stateMutability": "view",
									"superFunction": 1231,
									"visibility": "public"
								},
								{
									"body": {
										"id": 769,
										"nodeType": "Block",
										"src": "1995:350:8",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 744,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 668,
														"src": "2009:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 745,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2025:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2009:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 750,
												"nodeType": "IfStatement",
												"src": "2005:75:8",
												"trueBody": {
													"id": 749,
													"nodeType": "Block",
													"src": "2028:52:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 747,
																"name": "rewardPerTokenStored",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 658,
																"src": "2049:20:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 743,
															"id": 748,
															"nodeType": "Return",
															"src": "2042:27:8"
														}
													]
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 765,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 668,
																	"src": "2311:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"hexValue": "31653138",
																			"id": 762,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2280:4:8",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000000000000000000_by_1",
																				"typeString": "int_const 1000000000000000000"
																			},
																			"value": "1e18"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_1000000000000000000_by_1",
																				"typeString": "int_const 1000000000000000000"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"id": 759,
																					"name": "rewardRate",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 651,
																					"src": "2243:10:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"argumentTypes": null,
																					"arguments": [
																						{
																							"argumentTypes": null,
																							"id": 756,
																							"name": "lastUpdateTime",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 656,
																							"src": "2202:14:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"argumentTypes": null,
																							"arguments": [],
																							"expression": {
																								"argumentTypes": [],
																								"id": 753,
																								"name": "lastTimeRewardApplicable",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 739,
																								"src": "2150:24:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																									"typeString": "function () view returns (uint256)"
																								}
																							},
																							"id": 754,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "functionCall",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "2150:26:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 755,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "sub",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 120,
																						"src": "2150:51:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																							"typeString": "function (uint256,uint256) pure returns (uint256)"
																						}
																					},
																					"id": 757,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2150:67:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 758,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "mul",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 154,
																				"src": "2150:92:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 760,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2150:104:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 761,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 154,
																		"src": "2150:129:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 763,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2150:135:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 764,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "div",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 179,
																"src": "2150:160:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 766,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2150:174:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 751,
															"name": "rewardPerTokenStored",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 658,
															"src": "2108:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 752,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 95,
														"src": "2108:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2108:230:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 743,
												"id": 768,
												"nodeType": "Return",
												"src": "2089:249:8"
											}
										]
									},
									"documentation": null,
									"id": 770,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "rewardPerToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1962:2:8"
									},
									"returnParameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "1986:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 741,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1986:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1985:9:8"
									},
									"scope": 1206,
									"src": "1939:406:8",
									"stateMutability": "view",
									"superFunction": 1236,
									"visibility": "public"
								},
								{
									"body": {
										"id": 798,
										"nodeType": "Block",
										"src": "2414:196:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 793,
																"name": "rewards",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 666,
																"src": "2586:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 795,
															"indexExpression": {
																"argumentTypes": null,
																"id": 794,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 772,
																"src": "2594:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2586:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "31653138",
																	"id": 790,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2559:4:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1e18"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"baseExpression": {
																						"argumentTypes": null,
																						"id": 784,
																						"name": "userRewardPerTokenPaid",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 662,
																						"src": "2504:22:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																							"typeString": "mapping(address => uint256)"
																						}
																					},
																					"id": 786,
																					"indexExpression": {
																						"argumentTypes": null,
																						"id": 785,
																						"name": "account",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 772,
																						"src": "2527:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "2504:31:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"argumentTypes": null,
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 781,
																						"name": "rewardPerToken",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 770,
																						"src": "2483:14:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																							"typeString": "function () view returns (uint256)"
																						}
																					},
																					"id": 782,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2483:16:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 783,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sub",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 120,
																				"src": "2483:20:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 787,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2483:53:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"baseExpression": {
																				"argumentTypes": null,
																				"id": 777,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 672,
																				"src": "2443:9:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 779,
																			"indexExpression": {
																				"argumentTypes": null,
																				"id": 778,
																				"name": "account",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 772,
																				"src": "2453:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2443:18:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 780,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 154,
																		"src": "2443:39:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 788,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2443:94:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 789,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "div",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 179,
																"src": "2443:115:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 791,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2443:121:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 792,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 95,
														"src": "2443:142:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2443:160:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 776,
												"id": 797,
												"nodeType": "Return",
												"src": "2424:179:8"
											}
										]
									},
									"documentation": null,
									"id": 799,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "earned",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 799,
												"src": "2367:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 771,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2367:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2366:17:8"
									},
									"returnParameters": {
										"id": 776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 775,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 799,
												"src": "2405:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 774,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2405:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2404:9:8"
									},
									"scope": 1206,
									"src": "2351:259:8",
									"stateMutability": "view",
									"superFunction": 1243,
									"visibility": "public"
								},
								{
									"body": {
										"id": 809,
										"nodeType": "Block",
										"src": "2680:55:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 806,
															"name": "rewardsDuration",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "2712:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 804,
															"name": "rewardRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 651,
															"src": "2697:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 805,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mul",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 154,
														"src": "2697:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2697:31:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 803,
												"id": 808,
												"nodeType": "Return",
												"src": "2690:38:8"
											}
										]
									},
									"documentation": null,
									"id": 810,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRewardForDuration",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2645:2:8"
									},
									"returnParameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 802,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "2671:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 801,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2671:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2670:9:8"
									},
									"scope": 1206,
									"src": "2616:119:8",
									"stateMutability": "view",
									"superFunction": 1248,
									"visibility": "external"
								},
								{
									"body": {
										"id": 891,
										"nodeType": "Block",
										"src": "2976:508:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 830,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 812,
																"src": "2994:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 831,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3003:1:8",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2994:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "43616e6e6f74207374616b652030",
															"id": 833,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3006:16:8",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2972ce884b95fc24c703b7f04fae79e4ca7287e77fa26ed09d1faa4263e887ab",
																"typeString": "literal_string \"Cannot stake 0\""
															},
															"value": "Cannot stake 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2972ce884b95fc24c703b7f04fae79e4ca7287e77fa26ed09d1faa4263e887ab",
																"typeString": "literal_string \"Cannot stake 0\""
															}
														],
														"id": 829,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "2986:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 834,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2986:37:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 835,
												"nodeType": "ExpressionStatement",
												"src": "2986:37:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 841,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 836,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 668,
														"src": "3033:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 839,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 812,
																"src": "3065:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 837,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 668,
																"src": "3048:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 95,
															"src": "3048:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 840,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3048:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3033:39:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 842,
												"nodeType": "ExpressionStatement",
												"src": "3033:39:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 843,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "3082:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 846,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 844,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1292,
																"src": "3092:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 845,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "3092:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3082:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 852,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 812,
																"src": "3132:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 847,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "3106:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 850,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 848,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1292,
																		"src": "3116:3:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 849,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "3116:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3106:21:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 851,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 95,
															"src": "3106:25:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 853,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3106:33:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3082:57:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 855,
												"nodeType": "ExpressionStatement",
												"src": "3082:57:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 862,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1292,
																"src": "3227:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 863,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "3227:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 865,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1324,
																	"src": "3259:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_StakingRewards_$1206",
																		"typeString": "contract StakingRewards"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_StakingRewards_$1206",
																		"typeString": "contract StakingRewards"
																	}
																],
																"id": 864,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3251:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 866,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3251:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 867,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 812,
															"src": "3278:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 868,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 814,
															"src": "3298:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 869,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 816,
															"src": "3320:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"argumentTypes": null,
															"id": 870,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 818,
															"src": "3335:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"argumentTypes": null,
															"id": 871,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 820,
															"src": "3350:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 858,
																			"name": "stakingToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 645,
																			"src": "3192:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$328",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$328",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 857,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3184:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": "address"
																	},
																	"id": 859,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3184:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 856,
																"name": "IUniswapV2ERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1224,
																"src": "3168:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUniswapV2ERC20_$1224_$",
																	"typeString": "type(contract IUniswapV2ERC20)"
																}
															},
															"id": 860,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3168:38:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV2ERC20_$1224",
																"typeString": "contract IUniswapV2ERC20"
															}
														},
														"id": 861,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1223,
														"src": "3168:45:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 872,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:193:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 873,
												"nodeType": "ExpressionStatement",
												"src": "3168:193:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 877,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1292,
																"src": "3402:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 878,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "3402:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 880,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1324,
																	"src": "3422:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_StakingRewards_$1206",
																		"typeString": "contract StakingRewards"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_StakingRewards_$1206",
																		"typeString": "contract StakingRewards"
																	}
																],
																"id": 879,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3414:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 881,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3414:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 882,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 812,
															"src": "3429:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 874,
															"name": "stakingToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 645,
															"src": "3372:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															}
														},
														"id": 876,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 386,
														"src": "3372:29:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$328_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$328_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3372:64:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 884,
												"nodeType": "ExpressionStatement",
												"src": "3372:64:8"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 886,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1292,
																"src": "3458:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 887,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "3458:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 888,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 812,
															"src": "3470:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 885,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1193,
														"src": "3451:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 889,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3451:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 890,
												"nodeType": "EmitStatement",
												"src": "3446:31:8"
											}
										]
									},
									"documentation": null,
									"id": 892,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 823,
											"modifierName": {
												"argumentTypes": null,
												"id": 822,
												"name": "nonReentrant",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 597,
												"src": "2938:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2938:12:8"
										},
										{
											"arguments": [
												{
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 825,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1292,
														"src": "2964:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 826,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "2964:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												}
											],
											"id": 827,
											"modifierName": {
												"argumentTypes": null,
												"id": 824,
												"name": "updateReward",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1183,
												"src": "2951:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_address_$",
													"typeString": "modifier (address)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2951:24:8"
										}
									],
									"name": "stakeWithPermit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 812,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "2827:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 811,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2827:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 814,
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "2851:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 813,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2851:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "2877:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 815,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2877:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 818,
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "2894:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 817,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2894:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 820,
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "2913:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 819,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2913:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2817:111:8"
									},
									"returnParameters": {
										"id": 828,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2976:0:8"
									},
									"scope": 1206,
									"src": "2793:691:8",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": {
										"id": 947,
										"nodeType": "Block",
										"src": "3596:285:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 906,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 904,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 894,
																"src": "3614:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 905,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3623:1:8",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3614:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "43616e6e6f74207374616b652030",
															"id": 907,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3626:16:8",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2972ce884b95fc24c703b7f04fae79e4ca7287e77fa26ed09d1faa4263e887ab",
																"typeString": "literal_string \"Cannot stake 0\""
															},
															"value": "Cannot stake 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2972ce884b95fc24c703b7f04fae79e4ca7287e77fa26ed09d1faa4263e887ab",
																"typeString": "literal_string \"Cannot stake 0\""
															}
														],
														"id": 903,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "3606:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3606:37:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 909,
												"nodeType": "ExpressionStatement",
												"src": "3606:37:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 910,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 668,
														"src": "3653:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 913,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 894,
																"src": "3685:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 911,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 668,
																"src": "3668:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 912,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 95,
															"src": "3668:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 914,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3668:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3653:39:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 916,
												"nodeType": "ExpressionStatement",
												"src": "3653:39:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 928,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 917,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "3702:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 920,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 918,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1292,
																"src": "3712:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 919,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "3712:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3702:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 926,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 894,
																"src": "3752:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 921,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "3726:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 924,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 922,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1292,
																		"src": "3736:3:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 923,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "3736:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3726:21:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 925,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 95,
															"src": "3726:25:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 927,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3726:33:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3702:57:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 929,
												"nodeType": "ExpressionStatement",
												"src": "3702:57:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 933,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1292,
																"src": "3799:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 934,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "3799:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 936,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1324,
																	"src": "3819:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_StakingRewards_$1206",
																		"typeString": "contract StakingRewards"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_StakingRewards_$1206",
																		"typeString": "contract StakingRewards"
																	}
																],
																"id": 935,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3811:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 937,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3811:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 938,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 894,
															"src": "3826:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 930,
															"name": "stakingToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 645,
															"src": "3769:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															}
														},
														"id": 932,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 386,
														"src": "3769:29:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$328_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$328_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 939,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3769:64:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 940,
												"nodeType": "ExpressionStatement",
												"src": "3769:64:8"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 942,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1292,
																"src": "3855:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 943,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "3855:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 944,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 894,
															"src": "3867:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 941,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1193,
														"src": "3848:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 945,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3848:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 946,
												"nodeType": "EmitStatement",
												"src": "3843:31:8"
											}
										]
									},
									"documentation": null,
									"id": 948,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 897,
											"modifierName": {
												"argumentTypes": null,
												"id": 896,
												"name": "nonReentrant",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 597,
												"src": "3546:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3546:12:8"
										},
										{
											"arguments": [
												{
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 899,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1292,
														"src": "3580:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "3580:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												}
											],
											"id": 901,
											"modifierName": {
												"argumentTypes": null,
												"id": 898,
												"name": "updateReward",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1183,
												"src": "3567:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_address_$",
													"typeString": "modifier (address)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3567:24:8"
										}
									],
									"name": "stake",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 894,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "3505:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 893,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3505:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3504:16:8"
									},
									"returnParameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3596:0:8"
									},
									"scope": 1206,
									"src": "3490:391:8",
									"stateMutability": "nonpayable",
									"superFunction": 1265,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1000,
										"nodeType": "Block",
										"src": "3994:272:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 962,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 960,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 950,
																"src": "4012:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 961,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4021:1:8",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4012:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "43616e6e6f742077697468647261772030",
															"id": 963,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4024:19:8",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8d85b8e7f4404d04d93e8d532ad219ceeba0becfbc18622bad46b31e08b1f0b0",
																"typeString": "literal_string \"Cannot withdraw 0\""
															},
															"value": "Cannot withdraw 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8d85b8e7f4404d04d93e8d532ad219ceeba0becfbc18622bad46b31e08b1f0b0",
																"typeString": "literal_string \"Cannot withdraw 0\""
															}
														],
														"id": 959,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "4004:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4004:40:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 965,
												"nodeType": "ExpressionStatement",
												"src": "4004:40:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 971,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 966,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 668,
														"src": "4054:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 969,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 950,
																"src": "4086:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 967,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 668,
																"src": "4069:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 120,
															"src": "4069:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 970,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4069:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4054:39:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 972,
												"nodeType": "ExpressionStatement",
												"src": "4054:39:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 984,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 973,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "4103:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 976,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 974,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1292,
																"src": "4113:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 975,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "4113:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4103:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 982,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 950,
																"src": "4153:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 977,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "4127:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 980,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 978,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1292,
																		"src": "4137:3:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 979,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "4137:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4127:21:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 981,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 120,
															"src": "4127:25:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 983,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4127:33:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4103:57:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 985,
												"nodeType": "ExpressionStatement",
												"src": "4103:57:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 989,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1292,
																"src": "4196:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 990,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "4196:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 991,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 950,
															"src": "4208:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 986,
															"name": "stakingToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 645,
															"src": "4170:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															}
														},
														"id": 988,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 361,
														"src": "4170:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$328_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$328_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 992,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4170:45:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 993,
												"nodeType": "ExpressionStatement",
												"src": "4170:45:8"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 995,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1292,
																"src": "4240:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 996,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "4240:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 997,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 950,
															"src": "4252:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 994,
														"name": "Withdrawn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1199,
														"src": "4230:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4230:29:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 999,
												"nodeType": "EmitStatement",
												"src": "4225:34:8"
											}
										]
									},
									"documentation": null,
									"id": 1001,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 953,
											"modifierName": {
												"argumentTypes": null,
												"id": 952,
												"name": "nonReentrant",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 597,
												"src": "3944:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3944:12:8"
										},
										{
											"arguments": [
												{
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 955,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1292,
														"src": "3978:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 956,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "3978:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												}
											],
											"id": 957,
											"modifierName": {
												"argumentTypes": null,
												"id": 954,
												"name": "updateReward",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1183,
												"src": "3965:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_address_$",
													"typeString": "modifier (address)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3965:24:8"
										}
									],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 950,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1001,
												"src": "3905:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 949,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3905:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3904:16:8"
									},
									"returnParameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3994:0:8"
									},
									"scope": 1206,
									"src": "3887:379:8",
									"stateMutability": "nonpayable",
									"superFunction": 1270,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1043,
										"nodeType": "Block",
										"src": "4338:234:8",
										"statements": [
											{
												"assignments": [
													1011
												],
												"declarations": [
													{
														"constant": false,
														"id": 1011,
														"name": "reward",
														"nodeType": "VariableDeclaration",
														"scope": 1043,
														"src": "4348:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1010,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4348:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1016,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 1012,
														"name": "rewards",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 666,
														"src": "4365:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1015,
													"indexExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1013,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1292,
															"src": "4373:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1014,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "4373:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4365:19:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4348:36:8"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1019,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1017,
														"name": "reward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1011,
														"src": "4398:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1018,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4407:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4398:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1042,
												"nodeType": "IfStatement",
												"src": "4394:172:8",
												"trueBody": {
													"id": 1041,
													"nodeType": "Block",
													"src": "4410:156:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 1025,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 1020,
																		"name": "rewards",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 666,
																		"src": "4424:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1023,
																	"indexExpression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1021,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1292,
																			"src": "4432:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1022,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "4432:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4424:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 1024,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4446:1:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "4424:23:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1026,
															"nodeType": "ExpressionStatement",
															"src": "4424:23:8"
														},
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1030,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1292,
																			"src": "4487:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1031,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "4487:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 1032,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1011,
																		"src": "4499:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"id": 1027,
																		"name": "rewardsToken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 643,
																		"src": "4461:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$328",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1029,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 361,
																	"src": "4461:25:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$328_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$328_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1033,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4461:45:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1034,
															"nodeType": "ExpressionStatement",
															"src": "4461:45:8"
														},
														{
															"eventCall": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1036,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1292,
																			"src": "4536:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1037,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "4536:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 1038,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1011,
																		"src": "4548:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1035,
																	"name": "RewardPaid",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1205,
																	"src": "4525:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 1039,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4525:30:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1040,
															"nodeType": "EmitStatement",
															"src": "4520:35:8"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 1044,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 1004,
											"modifierName": {
												"argumentTypes": null,
												"id": 1003,
												"name": "nonReentrant",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 597,
												"src": "4300:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "4300:12:8"
										},
										{
											"arguments": [
												{
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 1006,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1292,
														"src": "4326:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "4326:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												}
											],
											"id": 1008,
											"modifierName": {
												"argumentTypes": null,
												"id": 1005,
												"name": "updateReward",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1183,
												"src": "4313:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_address_$",
													"typeString": "modifier (address)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "4313:24:8"
										}
									],
									"name": "getReward",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1002,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4290:2:8"
									},
									"returnParameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4338:0:8"
									},
									"scope": 1206,
									"src": "4272:300:8",
									"stateMutability": "nonpayable",
									"superFunction": 1273,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1057,
										"nodeType": "Block",
										"src": "4603:69:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 1048,
																"name": "_balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 672,
																"src": "4622:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 1051,
															"indexExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 1049,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1292,
																	"src": "4632:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1050,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "4632:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4622:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1047,
														"name": "withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1001,
														"src": "4613:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1052,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4613:31:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1053,
												"nodeType": "ExpressionStatement",
												"src": "4613:31:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1054,
														"name": "getReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1044,
														"src": "4654:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4654:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1056,
												"nodeType": "ExpressionStatement",
												"src": "4654:11:8"
											}
										]
									},
									"documentation": null,
									"id": 1058,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "exit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1045,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4591:2:8"
									},
									"returnParameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4603:0:8"
									},
									"scope": 1206,
									"src": "4578:94:8",
									"stateMutability": "nonpayable",
									"superFunction": 1276,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1145,
										"nodeType": "Block",
										"src": "4862:999:8",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1073,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1070,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "4876:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1071,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "4876:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1072,
														"name": "periodFinish",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 648,
														"src": "4895:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4876:31:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1107,
													"nodeType": "Block",
													"src": "4980:204:8",
													"statements": [
														{
															"assignments": [
																1083
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1083,
																	"name": "remaining",
																	"nodeType": "VariableDeclaration",
																	"scope": 1107,
																	"src": "4994:17:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1082,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "4994:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 1089,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1086,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1282,
																			"src": "5031:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 1087,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "5031:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"id": 1084,
																		"name": "periodFinish",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 648,
																		"src": "5014:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1085,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sub",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 120,
																	"src": "5014:16:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1088,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5014:33:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4994:53:8"
														},
														{
															"assignments": [
																1091
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1091,
																	"name": "leftover",
																	"nodeType": "VariableDeclaration",
																	"scope": 1107,
																	"src": "5061:16:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1090,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5061:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 1096,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 1094,
																		"name": "rewardRate",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 651,
																		"src": "5094:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"id": 1092,
																		"name": "remaining",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1083,
																		"src": "5080:9:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1093,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mul",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 154,
																	"src": "5080:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1095,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5080:25:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5061:44:8"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 1105,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 1097,
																	"name": "rewardRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 651,
																	"src": "5119:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1103,
																			"name": "rewardsDuration",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 654,
																			"src": "5157:15:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"id": 1100,
																					"name": "leftover",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1091,
																					"src": "5143:8:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"argumentTypes": null,
																					"id": 1098,
																					"name": "reward",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1060,
																					"src": "5132:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1099,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "add",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 95,
																				"src": "5132:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 1101,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5132:20:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1102,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "div",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 179,
																		"src": "5132:24:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1104,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5132:41:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5119:54:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1106,
															"nodeType": "ExpressionStatement",
															"src": "5119:54:8"
														}
													]
												},
												"id": 1108,
												"nodeType": "IfStatement",
												"src": "4872:312:8",
												"trueBody": {
													"id": 1081,
													"nodeType": "Block",
													"src": "4909:65:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 1079,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 1074,
																	"name": "rewardRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 651,
																	"src": "4923:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1077,
																			"name": "rewardsDuration",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 654,
																			"src": "4947:15:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"id": 1075,
																			"name": "reward",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1060,
																			"src": "4936:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1076,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "div",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 179,
																		"src": "4936:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1078,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4936:27:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4923:40:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1080,
															"nodeType": "ExpressionStatement",
															"src": "4923:40:8"
														}
													]
												}
											},
											{
												"assignments": [
													1110
												],
												"declarations": [
													{
														"constant": false,
														"id": 1110,
														"name": "balance",
														"nodeType": "VariableDeclaration",
														"scope": 1145,
														"src": "5538:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1109,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5538:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1117,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 1114,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1324,
																	"src": "5587:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_StakingRewards_$1206",
																		"typeString": "contract StakingRewards"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_StakingRewards_$1206",
																		"typeString": "contract StakingRewards"
																	}
																],
																"id": 1113,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5579:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 1115,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5579:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 1111,
															"name": "rewardsToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 643,
															"src": "5556:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$328",
																"typeString": "contract IERC20"
															}
														},
														"id": 1112,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 273,
														"src": "5556:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5556:37:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5538:55:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1124,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 1119,
																"name": "rewardRate",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 651,
																"src": "5624:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 1122,
																		"name": "rewardsDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 654,
																		"src": "5650:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"id": 1120,
																		"name": "balance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1110,
																		"src": "5638:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1121,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "div",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 179,
																	"src": "5638:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1123,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5638:28:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5624:42:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "50726f76696465642072657761726420746f6f2068696768",
															"id": 1125,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5680:26:8",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_af294828ccb7807394ab9c640e14eb2534ed0e75bb2e1346f1bb81dd84cda810",
																"typeString": "literal_string \"Provided reward too high\""
															},
															"value": "Provided reward too high"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_af294828ccb7807394ab9c640e14eb2534ed0e75bb2e1346f1bb81dd84cda810",
																"typeString": "literal_string \"Provided reward too high\""
															}
														],
														"id": 1118,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1295,
															1296
														],
														"referencedDeclaration": 1296,
														"src": "5603:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5603:113:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1127,
												"nodeType": "ExpressionStatement",
												"src": "5603:113:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1128,
														"name": "lastUpdateTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 656,
														"src": "5727:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1129,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "5744:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1130,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "5744:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5727:32:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1132,
												"nodeType": "ExpressionStatement",
												"src": "5727:32:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1133,
														"name": "periodFinish",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 648,
														"src": "5769:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 1137,
																"name": "rewardsDuration",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 654,
																"src": "5804:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 1134,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1282,
																	"src": "5784:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "5784:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 95,
															"src": "5784:19:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1138,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5784:36:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5769:51:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1140,
												"nodeType": "ExpressionStatement",
												"src": "5769:51:8"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1142,
															"name": "reward",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1060,
															"src": "5847:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1141,
														"name": "RewardAdded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1187,
														"src": "5835:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5835:19:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1144,
												"nodeType": "EmitStatement",
												"src": "5830:24:8"
											}
										]
									},
									"documentation": null,
									"id": 1146,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 1063,
											"modifierName": {
												"argumentTypes": null,
												"id": 1062,
												"name": "onlyRewardsDistribution",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 619,
												"src": "4801:23:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "4801:23:8"
										},
										{
											"arguments": [
												{
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "30",
															"id": 1066,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4854:1:8",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 1065,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4846:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": "address"
													},
													"id": 1067,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4846:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												}
											],
											"id": 1068,
											"modifierName": {
												"argumentTypes": null,
												"id": 1064,
												"name": "updateReward",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1183,
												"src": "4833:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_address_$",
													"typeString": "modifier (address)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "4833:24:8"
										}
									],
									"name": "notifyRewardAmount",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1060,
												"name": "reward",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "4760:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1059,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4760:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4759:16:8"
									},
									"returnParameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4862:0:8"
									},
									"scope": 1206,
									"src": "4732:1129:8",
									"stateMutability": "nonpayable",
									"superFunction": 607,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1182,
										"nodeType": "Block",
										"src": "5949:283:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1150,
														"name": "rewardPerTokenStored",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 658,
														"src": "5959:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1151,
															"name": "rewardPerToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 770,
															"src": "5982:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 1152,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5982:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5959:39:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1154,
												"nodeType": "ExpressionStatement",
												"src": "5959:39:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1155,
														"name": "lastUpdateTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 656,
														"src": "6008:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1156,
															"name": "lastTimeRewardApplicable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 739,
															"src": "6025:24:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 1157,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6025:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6008:43:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1159,
												"nodeType": "ExpressionStatement",
												"src": "6008:43:8"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1160,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1148,
														"src": "6065:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 1162,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6084:1:8",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1161,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6076:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": "address"
														},
														"id": 1163,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6076:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "6065:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1180,
												"nodeType": "IfStatement",
												"src": "6061:154:8",
												"trueBody": {
													"id": 1179,
													"nodeType": "Block",
													"src": "6088:127:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 1171,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 1165,
																		"name": "rewards",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 666,
																		"src": "6102:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1167,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 1166,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1148,
																		"src": "6110:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6102:16:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1169,
																			"name": "account",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1148,
																			"src": "6128:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1168,
																		"name": "earned",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 799,
																		"src": "6121:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view returns (uint256)"
																		}
																	},
																	"id": 1170,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6121:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6102:34:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1172,
															"nodeType": "ExpressionStatement",
															"src": "6102:34:8"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 1177,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 1173,
																		"name": "userRewardPerTokenPaid",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 662,
																		"src": "6150:22:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1175,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 1174,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1148,
																		"src": "6173:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6150:31:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"id": 1176,
																	"name": "rewardPerTokenStored",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 658,
																	"src": "6184:20:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6150:54:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1178,
															"nodeType": "ExpressionStatement",
															"src": "6150:54:8"
														}
													]
												}
											},
											{
												"id": 1181,
												"nodeType": "PlaceholderStatement",
												"src": "6224:1:8"
											}
										]
									},
									"documentation": null,
									"id": 1183,
									"name": "updateReward",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1148,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "5932:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5932:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5931:17:8"
									},
									"src": "5910:322:8",
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 1187,
									"name": "RewardAdded",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1185,
												"indexed": false,
												"name": "reward",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "6296:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6296:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6295:16:8"
									},
									"src": "6278:34:8"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 1193,
									"name": "Staked",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1189,
												"indexed": true,
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 1193,
												"src": "6330:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6330:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1191,
												"indexed": false,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1193,
												"src": "6352:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6352:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6329:38:8"
									},
									"src": "6317:51:8"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 1199,
									"name": "Withdrawn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"indexed": true,
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 1199,
												"src": "6389:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6389:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1197,
												"indexed": false,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1199,
												"src": "6411:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6411:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6388:38:8"
									},
									"src": "6373:54:8"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 1205,
									"name": "RewardPaid",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1201,
												"indexed": true,
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 1205,
												"src": "6449:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1200,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6449:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1203,
												"indexed": false,
												"name": "reward",
												"nodeType": "VariableDeclaration",
												"scope": 1205,
												"src": "6471:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6471:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6448:38:8"
									},
									"src": "6432:55:8"
								}
							],
							"scope": 1225,
							"src": "414:6075:8"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": null,
							"fullyImplemented": false,
							"id": 1224,
							"linearizedBaseContracts": [
								1224
							],
							"name": "IUniswapV2ERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": null,
									"id": 1223,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1208,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "6548:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6548:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1210,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "6571:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1209,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6571:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1212,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "6596:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1211,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6596:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1214,
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "6619:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6619:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1216,
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "6645:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1215,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6645:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1218,
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "6662:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1217,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6662:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1220,
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "6681:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1219,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6681:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6538:158:8"
									},
									"returnParameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6705:0:8"
									},
									"scope": 1224,
									"src": "6523:183:8",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								}
							],
							"scope": 1225,
							"src": "6491:217:8"
						}
					],
					"src": "0:6709:8"
				},
				"id": 8
			},
			"contracts/interfaces/IStakingRewards.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IStakingRewards.sol",
					"exportedSymbols": {
						"IStakingRewards": [
							1277
						]
					},
					"id": 1278,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1226,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "0:25:9"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": null,
							"fullyImplemented": false,
							"id": 1277,
							"linearizedBaseContracts": [
								1277
							],
							"name": "IStakingRewards",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": null,
									"id": 1231,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "lastTimeRewardApplicable",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1227,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "105:2:9"
									},
									"returnParameters": {
										"id": 1230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1229,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1231,
												"src": "131:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1228,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "131:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "130:9:9"
									},
									"scope": 1277,
									"src": "72:68:9",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": null,
									"id": 1236,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rewardPerToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "169:2:9"
									},
									"returnParameters": {
										"id": 1235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1234,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "195:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "195:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "194:9:9"
									},
									"scope": 1277,
									"src": "146:58:9",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": null,
									"id": 1243,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "earned",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1238,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "226:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1237,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "226:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "225:17:9"
									},
									"returnParameters": {
										"id": 1242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1241,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "266:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "266:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "265:9:9"
									},
									"scope": 1277,
									"src": "210:65:9",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": null,
									"id": 1248,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRewardForDuration",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "310:2:9"
									},
									"returnParameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1248,
												"src": "336:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "336:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "335:9:9"
									},
									"scope": 1277,
									"src": "281:64:9",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": null,
									"id": 1253,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "371:2:9"
									},
									"returnParameters": {
										"id": 1252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1251,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1253,
												"src": "397:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1250,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "397:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "396:9:9"
									},
									"scope": 1277,
									"src": "351:55:9",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": null,
									"id": 1260,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1255,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "431:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1254,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "431:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "430:17:9"
									},
									"returnParameters": {
										"id": 1259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1258,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "471:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "470:9:9"
									},
									"scope": 1277,
									"src": "412:68:9",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": null,
									"id": 1265,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "stake",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1262,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1265,
												"src": "518:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "518:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "517:16:9"
									},
									"returnParameters": {
										"id": 1264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "542:0:9"
									},
									"scope": 1277,
									"src": "503:40:9",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": null,
									"id": 1270,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1267,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "567:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "567:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "566:16:9"
									},
									"returnParameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "591:0:9"
									},
									"scope": 1277,
									"src": "549:43:9",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": null,
									"id": 1273,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getReward",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "616:2:9"
									},
									"returnParameters": {
										"id": 1272,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "627:0:9"
									},
									"scope": 1277,
									"src": "598:30:9",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": null,
									"id": 1276,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:9"
									},
									"returnParameters": {
										"id": 1275,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "658:0:9"
									},
									"scope": 1277,
									"src": "634:25:9",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								}
							],
							"scope": 1278,
							"src": "27:634:9"
						}
					],
					"src": "0:662:9"
				},
				"id": 9
			}
		}
	}
}